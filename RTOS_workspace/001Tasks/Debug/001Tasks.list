
001Tasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b9c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  08004d2c  08004d2c  00014d2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e00  08004e00  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08004e00  08004e00  00014e00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004e08  08004e08  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e08  08004e08  00014e08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004e0c  08004e0c  00014e0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08004e10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          00012e14  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20012e8c  20012e8c  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013050  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002a5a  00000000  00000000  000330f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f20  00000000  00000000  00035b58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000df8  00000000  00000000  00036a78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022f33  00000000  00000000  00037870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010808  00000000  00000000  0005a7a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d2f2a  00000000  00000000  0006afab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0013ded5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004504  00000000  00000000  0013df28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004d14 	.word	0x08004d14

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08004d14 	.word	0x08004d14

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b96e 	b.w	80004c4 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468c      	mov	ip, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	f040 8083 	bne.w	8000316 <__udivmoddi4+0x116>
 8000210:	428a      	cmp	r2, r1
 8000212:	4617      	mov	r7, r2
 8000214:	d947      	bls.n	80002a6 <__udivmoddi4+0xa6>
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	b142      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021c:	f1c2 0020 	rsb	r0, r2, #32
 8000220:	fa24 f000 	lsr.w	r0, r4, r0
 8000224:	4091      	lsls	r1, r2
 8000226:	4097      	lsls	r7, r2
 8000228:	ea40 0c01 	orr.w	ip, r0, r1
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbbc f6f8 	udiv	r6, ip, r8
 8000238:	fa1f fe87 	uxth.w	lr, r7
 800023c:	fb08 c116 	mls	r1, r8, r6, ip
 8000240:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000244:	fb06 f10e 	mul.w	r1, r6, lr
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18fb      	adds	r3, r7, r3
 800024e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000252:	f080 8119 	bcs.w	8000488 <__udivmoddi4+0x288>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8116 	bls.w	8000488 <__udivmoddi4+0x288>
 800025c:	3e02      	subs	r6, #2
 800025e:	443b      	add	r3, r7
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0f8 	udiv	r0, r3, r8
 8000268:	fb08 3310 	mls	r3, r8, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fe0e 	mul.w	lr, r0, lr
 8000274:	45a6      	cmp	lr, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	193c      	adds	r4, r7, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295
 800027e:	f080 8105 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000282:	45a6      	cmp	lr, r4
 8000284:	f240 8102 	bls.w	800048c <__udivmoddi4+0x28c>
 8000288:	3802      	subs	r0, #2
 800028a:	443c      	add	r4, r7
 800028c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000290:	eba4 040e 	sub.w	r4, r4, lr
 8000294:	2600      	movs	r6, #0
 8000296:	b11d      	cbz	r5, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c5 4300 	strd	r4, r3, [r5]
 80002a0:	4631      	mov	r1, r6
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	b902      	cbnz	r2, 80002aa <__udivmoddi4+0xaa>
 80002a8:	deff      	udf	#255	; 0xff
 80002aa:	fab2 f282 	clz	r2, r2
 80002ae:	2a00      	cmp	r2, #0
 80002b0:	d150      	bne.n	8000354 <__udivmoddi4+0x154>
 80002b2:	1bcb      	subs	r3, r1, r7
 80002b4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b8:	fa1f f887 	uxth.w	r8, r7
 80002bc:	2601      	movs	r6, #1
 80002be:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c2:	0c21      	lsrs	r1, r4, #16
 80002c4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002cc:	fb08 f30c 	mul.w	r3, r8, ip
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d907      	bls.n	80002e4 <__udivmoddi4+0xe4>
 80002d4:	1879      	adds	r1, r7, r1
 80002d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002da:	d202      	bcs.n	80002e2 <__udivmoddi4+0xe2>
 80002dc:	428b      	cmp	r3, r1
 80002de:	f200 80e9 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 80002e2:	4684      	mov	ip, r0
 80002e4:	1ac9      	subs	r1, r1, r3
 80002e6:	b2a3      	uxth	r3, r4
 80002e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80002ec:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f4:	fb08 f800 	mul.w	r8, r8, r0
 80002f8:	45a0      	cmp	r8, r4
 80002fa:	d907      	bls.n	800030c <__udivmoddi4+0x10c>
 80002fc:	193c      	adds	r4, r7, r4
 80002fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000302:	d202      	bcs.n	800030a <__udivmoddi4+0x10a>
 8000304:	45a0      	cmp	r8, r4
 8000306:	f200 80d9 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 800030a:	4618      	mov	r0, r3
 800030c:	eba4 0408 	sub.w	r4, r4, r8
 8000310:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000314:	e7bf      	b.n	8000296 <__udivmoddi4+0x96>
 8000316:	428b      	cmp	r3, r1
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x12e>
 800031a:	2d00      	cmp	r5, #0
 800031c:	f000 80b1 	beq.w	8000482 <__udivmoddi4+0x282>
 8000320:	2600      	movs	r6, #0
 8000322:	e9c5 0100 	strd	r0, r1, [r5]
 8000326:	4630      	mov	r0, r6
 8000328:	4631      	mov	r1, r6
 800032a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032e:	fab3 f683 	clz	r6, r3
 8000332:	2e00      	cmp	r6, #0
 8000334:	d14a      	bne.n	80003cc <__udivmoddi4+0x1cc>
 8000336:	428b      	cmp	r3, r1
 8000338:	d302      	bcc.n	8000340 <__udivmoddi4+0x140>
 800033a:	4282      	cmp	r2, r0
 800033c:	f200 80b8 	bhi.w	80004b0 <__udivmoddi4+0x2b0>
 8000340:	1a84      	subs	r4, r0, r2
 8000342:	eb61 0103 	sbc.w	r1, r1, r3
 8000346:	2001      	movs	r0, #1
 8000348:	468c      	mov	ip, r1
 800034a:	2d00      	cmp	r5, #0
 800034c:	d0a8      	beq.n	80002a0 <__udivmoddi4+0xa0>
 800034e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000354:	f1c2 0320 	rsb	r3, r2, #32
 8000358:	fa20 f603 	lsr.w	r6, r0, r3
 800035c:	4097      	lsls	r7, r2
 800035e:	fa01 f002 	lsl.w	r0, r1, r2
 8000362:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000366:	40d9      	lsrs	r1, r3
 8000368:	4330      	orrs	r0, r6
 800036a:	0c03      	lsrs	r3, r0, #16
 800036c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000370:	fa1f f887 	uxth.w	r8, r7
 8000374:	fb0e 1116 	mls	r1, lr, r6, r1
 8000378:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037c:	fb06 f108 	mul.w	r1, r6, r8
 8000380:	4299      	cmp	r1, r3
 8000382:	fa04 f402 	lsl.w	r4, r4, r2
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x19c>
 8000388:	18fb      	adds	r3, r7, r3
 800038a:	f106 3cff 	add.w	ip, r6, #4294967295
 800038e:	f080 808d 	bcs.w	80004ac <__udivmoddi4+0x2ac>
 8000392:	4299      	cmp	r1, r3
 8000394:	f240 808a 	bls.w	80004ac <__udivmoddi4+0x2ac>
 8000398:	3e02      	subs	r6, #2
 800039a:	443b      	add	r3, r7
 800039c:	1a5b      	subs	r3, r3, r1
 800039e:	b281      	uxth	r1, r0
 80003a0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb00 f308 	mul.w	r3, r0, r8
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x1c4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ba:	d273      	bcs.n	80004a4 <__udivmoddi4+0x2a4>
 80003bc:	428b      	cmp	r3, r1
 80003be:	d971      	bls.n	80004a4 <__udivmoddi4+0x2a4>
 80003c0:	3802      	subs	r0, #2
 80003c2:	4439      	add	r1, r7
 80003c4:	1acb      	subs	r3, r1, r3
 80003c6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ca:	e778      	b.n	80002be <__udivmoddi4+0xbe>
 80003cc:	f1c6 0c20 	rsb	ip, r6, #32
 80003d0:	fa03 f406 	lsl.w	r4, r3, r6
 80003d4:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d8:	431c      	orrs	r4, r3
 80003da:	fa20 f70c 	lsr.w	r7, r0, ip
 80003de:	fa01 f306 	lsl.w	r3, r1, r6
 80003e2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003e6:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ea:	431f      	orrs	r7, r3
 80003ec:	0c3b      	lsrs	r3, r7, #16
 80003ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f2:	fa1f f884 	uxth.w	r8, r4
 80003f6:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003fe:	fb09 fa08 	mul.w	sl, r9, r8
 8000402:	458a      	cmp	sl, r1
 8000404:	fa02 f206 	lsl.w	r2, r2, r6
 8000408:	fa00 f306 	lsl.w	r3, r0, r6
 800040c:	d908      	bls.n	8000420 <__udivmoddi4+0x220>
 800040e:	1861      	adds	r1, r4, r1
 8000410:	f109 30ff 	add.w	r0, r9, #4294967295
 8000414:	d248      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 8000416:	458a      	cmp	sl, r1
 8000418:	d946      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800041a:	f1a9 0902 	sub.w	r9, r9, #2
 800041e:	4421      	add	r1, r4
 8000420:	eba1 010a 	sub.w	r1, r1, sl
 8000424:	b2bf      	uxth	r7, r7
 8000426:	fbb1 f0fe 	udiv	r0, r1, lr
 800042a:	fb0e 1110 	mls	r1, lr, r0, r1
 800042e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000432:	fb00 f808 	mul.w	r8, r0, r8
 8000436:	45b8      	cmp	r8, r7
 8000438:	d907      	bls.n	800044a <__udivmoddi4+0x24a>
 800043a:	19e7      	adds	r7, r4, r7
 800043c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000440:	d22e      	bcs.n	80004a0 <__udivmoddi4+0x2a0>
 8000442:	45b8      	cmp	r8, r7
 8000444:	d92c      	bls.n	80004a0 <__udivmoddi4+0x2a0>
 8000446:	3802      	subs	r0, #2
 8000448:	4427      	add	r7, r4
 800044a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800044e:	eba7 0708 	sub.w	r7, r7, r8
 8000452:	fba0 8902 	umull	r8, r9, r0, r2
 8000456:	454f      	cmp	r7, r9
 8000458:	46c6      	mov	lr, r8
 800045a:	4649      	mov	r1, r9
 800045c:	d31a      	bcc.n	8000494 <__udivmoddi4+0x294>
 800045e:	d017      	beq.n	8000490 <__udivmoddi4+0x290>
 8000460:	b15d      	cbz	r5, 800047a <__udivmoddi4+0x27a>
 8000462:	ebb3 020e 	subs.w	r2, r3, lr
 8000466:	eb67 0701 	sbc.w	r7, r7, r1
 800046a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800046e:	40f2      	lsrs	r2, r6
 8000470:	ea4c 0202 	orr.w	r2, ip, r2
 8000474:	40f7      	lsrs	r7, r6
 8000476:	e9c5 2700 	strd	r2, r7, [r5]
 800047a:	2600      	movs	r6, #0
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	462e      	mov	r6, r5
 8000484:	4628      	mov	r0, r5
 8000486:	e70b      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000488:	4606      	mov	r6, r0
 800048a:	e6e9      	b.n	8000260 <__udivmoddi4+0x60>
 800048c:	4618      	mov	r0, r3
 800048e:	e6fd      	b.n	800028c <__udivmoddi4+0x8c>
 8000490:	4543      	cmp	r3, r8
 8000492:	d2e5      	bcs.n	8000460 <__udivmoddi4+0x260>
 8000494:	ebb8 0e02 	subs.w	lr, r8, r2
 8000498:	eb69 0104 	sbc.w	r1, r9, r4
 800049c:	3801      	subs	r0, #1
 800049e:	e7df      	b.n	8000460 <__udivmoddi4+0x260>
 80004a0:	4608      	mov	r0, r1
 80004a2:	e7d2      	b.n	800044a <__udivmoddi4+0x24a>
 80004a4:	4660      	mov	r0, ip
 80004a6:	e78d      	b.n	80003c4 <__udivmoddi4+0x1c4>
 80004a8:	4681      	mov	r9, r0
 80004aa:	e7b9      	b.n	8000420 <__udivmoddi4+0x220>
 80004ac:	4666      	mov	r6, ip
 80004ae:	e775      	b.n	800039c <__udivmoddi4+0x19c>
 80004b0:	4630      	mov	r0, r6
 80004b2:	e74a      	b.n	800034a <__udivmoddi4+0x14a>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	4439      	add	r1, r7
 80004ba:	e713      	b.n	80002e4 <__udivmoddi4+0xe4>
 80004bc:	3802      	subs	r0, #2
 80004be:	443c      	add	r4, r7
 80004c0:	e724      	b.n	800030c <__udivmoddi4+0x10c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b088      	sub	sp, #32
 80004cc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ce:	f000 fbab 	bl	8000c28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d2:	f000 f845 	bl	8000560 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d6:	f000 f8ad 	bl	8000634 <MX_GPIO_Init>

  //SEGGER_SYSVIEW_Conf();
  //SEGGER_SYSVIEW_Start();
  //end of segger settings

  status = xTaskCreate(
 80004da:	f107 0308 	add.w	r3, r7, #8
 80004de:	9301      	str	r3, [sp, #4]
 80004e0:	2302      	movs	r3, #2
 80004e2:	9300      	str	r3, [sp, #0]
 80004e4:	4b18      	ldr	r3, [pc, #96]	; (8000548 <main+0x80>)
 80004e6:	22c8      	movs	r2, #200	; 0xc8
 80004e8:	4918      	ldr	r1, [pc, #96]	; (800054c <main+0x84>)
 80004ea:	4819      	ldr	r0, [pc, #100]	; (8000550 <main+0x88>)
 80004ec:	f002 f938 	bl	8002760 <xTaskCreate>
 80004f0:	6178      	str	r0, [r7, #20]
						  "task-1",          /* Text name for the task. */
						  200,      /* Stack size in words, not bytes. */
						  "hello world from Task-1",    /* Parameter passed into the task. */
						  2,/* Priority at which the task is created. */
						  &task1_handle );
  configASSERT(status == pdPASS);
 80004f2:	697b      	ldr	r3, [r7, #20]
 80004f4:	2b01      	cmp	r3, #1
 80004f6:	d00a      	beq.n	800050e <main+0x46>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80004f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80004fc:	f383 8811 	msr	BASEPRI, r3
 8000500:	f3bf 8f6f 	isb	sy
 8000504:	f3bf 8f4f 	dsb	sy
 8000508:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 800050a:	bf00      	nop
 800050c:	e7fe      	b.n	800050c <main+0x44>

  status = xTaskCreate(
 800050e:	1d3b      	adds	r3, r7, #4
 8000510:	9301      	str	r3, [sp, #4]
 8000512:	2302      	movs	r3, #2
 8000514:	9300      	str	r3, [sp, #0]
 8000516:	4b0f      	ldr	r3, [pc, #60]	; (8000554 <main+0x8c>)
 8000518:	22c8      	movs	r2, #200	; 0xc8
 800051a:	490f      	ldr	r1, [pc, #60]	; (8000558 <main+0x90>)
 800051c:	480f      	ldr	r0, [pc, #60]	; (800055c <main+0x94>)
 800051e:	f002 f91f 	bl	8002760 <xTaskCreate>
 8000522:	6178      	str	r0, [r7, #20]
  						  "task-2",          /* Text name for the task. */
  						  200,      /* Stack size in words, not bytes. */
  						  "hello world from Task-2",    /* Parameter passed into the task. */
  						  2,/* Priority at which the task is created. */
  						  &task2_handle );
  configASSERT(status == pdPASS);
 8000524:	697b      	ldr	r3, [r7, #20]
 8000526:	2b01      	cmp	r3, #1
 8000528:	d00a      	beq.n	8000540 <main+0x78>
        __asm volatile
 800052a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800052e:	f383 8811 	msr	BASEPRI, r3
 8000532:	f3bf 8f6f 	isb	sy
 8000536:	f3bf 8f4f 	dsb	sy
 800053a:	60fb      	str	r3, [r7, #12]
    }
 800053c:	bf00      	nop
 800053e:	e7fe      	b.n	800053e <main+0x76>

  //start the freeRTOS scheduler
  vTaskStartScheduler();
 8000540:	f002 fa8a 	bl	8002a58 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000544:	e7fe      	b.n	8000544 <main+0x7c>
 8000546:	bf00      	nop
 8000548:	08004d2c 	.word	0x08004d2c
 800054c:	08004d44 	.word	0x08004d44
 8000550:	080008f1 	.word	0x080008f1
 8000554:	08004d4c 	.word	0x08004d4c
 8000558:	08004d64 	.word	0x08004d64
 800055c:	08000901 	.word	0x08000901

08000560 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b094      	sub	sp, #80	; 0x50
 8000564:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000566:	f107 0320 	add.w	r3, r7, #32
 800056a:	2230      	movs	r2, #48	; 0x30
 800056c:	2100      	movs	r1, #0
 800056e:	4618      	mov	r0, r3
 8000570:	f003 fef4 	bl	800435c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000574:	f107 030c 	add.w	r3, r7, #12
 8000578:	2200      	movs	r2, #0
 800057a:	601a      	str	r2, [r3, #0]
 800057c:	605a      	str	r2, [r3, #4]
 800057e:	609a      	str	r2, [r3, #8]
 8000580:	60da      	str	r2, [r3, #12]
 8000582:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000584:	2300      	movs	r3, #0
 8000586:	60bb      	str	r3, [r7, #8]
 8000588:	4b28      	ldr	r3, [pc, #160]	; (800062c <SystemClock_Config+0xcc>)
 800058a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800058c:	4a27      	ldr	r2, [pc, #156]	; (800062c <SystemClock_Config+0xcc>)
 800058e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000592:	6413      	str	r3, [r2, #64]	; 0x40
 8000594:	4b25      	ldr	r3, [pc, #148]	; (800062c <SystemClock_Config+0xcc>)
 8000596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000598:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800059c:	60bb      	str	r3, [r7, #8]
 800059e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005a0:	2300      	movs	r3, #0
 80005a2:	607b      	str	r3, [r7, #4]
 80005a4:	4b22      	ldr	r3, [pc, #136]	; (8000630 <SystemClock_Config+0xd0>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	4a21      	ldr	r2, [pc, #132]	; (8000630 <SystemClock_Config+0xd0>)
 80005aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005ae:	6013      	str	r3, [r2, #0]
 80005b0:	4b1f      	ldr	r3, [pc, #124]	; (8000630 <SystemClock_Config+0xd0>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005b8:	607b      	str	r3, [r7, #4]
 80005ba:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005bc:	2302      	movs	r3, #2
 80005be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005c0:	2301      	movs	r3, #1
 80005c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005c4:	2310      	movs	r3, #16
 80005c6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005c8:	2302      	movs	r3, #2
 80005ca:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005cc:	2300      	movs	r3, #0
 80005ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005d0:	2308      	movs	r3, #8
 80005d2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 80005d4:	2332      	movs	r3, #50	; 0x32
 80005d6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005d8:	2304      	movs	r3, #4
 80005da:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005dc:	2307      	movs	r3, #7
 80005de:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e0:	f107 0320 	add.w	r3, r7, #32
 80005e4:	4618      	mov	r0, r3
 80005e6:	f000 fdf9 	bl	80011dc <HAL_RCC_OscConfig>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d001      	beq.n	80005f4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005f0:	f000 f9a0 	bl	8000934 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005f4:	230f      	movs	r3, #15
 80005f6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005f8:	2302      	movs	r3, #2
 80005fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005fc:	2300      	movs	r3, #0
 80005fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000600:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000604:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000606:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800060a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800060c:	f107 030c 	add.w	r3, r7, #12
 8000610:	2100      	movs	r1, #0
 8000612:	4618      	mov	r0, r3
 8000614:	f001 f85a 	bl	80016cc <HAL_RCC_ClockConfig>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800061e:	f000 f989 	bl	8000934 <Error_Handler>
  }
}
 8000622:	bf00      	nop
 8000624:	3750      	adds	r7, #80	; 0x50
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	40023800 	.word	0x40023800
 8000630:	40007000 	.word	0x40007000

08000634 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b08c      	sub	sp, #48	; 0x30
 8000638:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800063a:	f107 031c 	add.w	r3, r7, #28
 800063e:	2200      	movs	r2, #0
 8000640:	601a      	str	r2, [r3, #0]
 8000642:	605a      	str	r2, [r3, #4]
 8000644:	609a      	str	r2, [r3, #8]
 8000646:	60da      	str	r2, [r3, #12]
 8000648:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800064a:	2300      	movs	r3, #0
 800064c:	61bb      	str	r3, [r7, #24]
 800064e:	4ba2      	ldr	r3, [pc, #648]	; (80008d8 <MX_GPIO_Init+0x2a4>)
 8000650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000652:	4aa1      	ldr	r2, [pc, #644]	; (80008d8 <MX_GPIO_Init+0x2a4>)
 8000654:	f043 0310 	orr.w	r3, r3, #16
 8000658:	6313      	str	r3, [r2, #48]	; 0x30
 800065a:	4b9f      	ldr	r3, [pc, #636]	; (80008d8 <MX_GPIO_Init+0x2a4>)
 800065c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065e:	f003 0310 	and.w	r3, r3, #16
 8000662:	61bb      	str	r3, [r7, #24]
 8000664:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000666:	2300      	movs	r3, #0
 8000668:	617b      	str	r3, [r7, #20]
 800066a:	4b9b      	ldr	r3, [pc, #620]	; (80008d8 <MX_GPIO_Init+0x2a4>)
 800066c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066e:	4a9a      	ldr	r2, [pc, #616]	; (80008d8 <MX_GPIO_Init+0x2a4>)
 8000670:	f043 0304 	orr.w	r3, r3, #4
 8000674:	6313      	str	r3, [r2, #48]	; 0x30
 8000676:	4b98      	ldr	r3, [pc, #608]	; (80008d8 <MX_GPIO_Init+0x2a4>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067a:	f003 0304 	and.w	r3, r3, #4
 800067e:	617b      	str	r3, [r7, #20]
 8000680:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000682:	2300      	movs	r3, #0
 8000684:	613b      	str	r3, [r7, #16]
 8000686:	4b94      	ldr	r3, [pc, #592]	; (80008d8 <MX_GPIO_Init+0x2a4>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068a:	4a93      	ldr	r2, [pc, #588]	; (80008d8 <MX_GPIO_Init+0x2a4>)
 800068c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000690:	6313      	str	r3, [r2, #48]	; 0x30
 8000692:	4b91      	ldr	r3, [pc, #580]	; (80008d8 <MX_GPIO_Init+0x2a4>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000696:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800069a:	613b      	str	r3, [r7, #16]
 800069c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800069e:	2300      	movs	r3, #0
 80006a0:	60fb      	str	r3, [r7, #12]
 80006a2:	4b8d      	ldr	r3, [pc, #564]	; (80008d8 <MX_GPIO_Init+0x2a4>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a6:	4a8c      	ldr	r2, [pc, #560]	; (80008d8 <MX_GPIO_Init+0x2a4>)
 80006a8:	f043 0301 	orr.w	r3, r3, #1
 80006ac:	6313      	str	r3, [r2, #48]	; 0x30
 80006ae:	4b8a      	ldr	r3, [pc, #552]	; (80008d8 <MX_GPIO_Init+0x2a4>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b2:	f003 0301 	and.w	r3, r3, #1
 80006b6:	60fb      	str	r3, [r7, #12]
 80006b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ba:	2300      	movs	r3, #0
 80006bc:	60bb      	str	r3, [r7, #8]
 80006be:	4b86      	ldr	r3, [pc, #536]	; (80008d8 <MX_GPIO_Init+0x2a4>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c2:	4a85      	ldr	r2, [pc, #532]	; (80008d8 <MX_GPIO_Init+0x2a4>)
 80006c4:	f043 0302 	orr.w	r3, r3, #2
 80006c8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ca:	4b83      	ldr	r3, [pc, #524]	; (80008d8 <MX_GPIO_Init+0x2a4>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ce:	f003 0302 	and.w	r3, r3, #2
 80006d2:	60bb      	str	r3, [r7, #8]
 80006d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006d6:	2300      	movs	r3, #0
 80006d8:	607b      	str	r3, [r7, #4]
 80006da:	4b7f      	ldr	r3, [pc, #508]	; (80008d8 <MX_GPIO_Init+0x2a4>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006de:	4a7e      	ldr	r2, [pc, #504]	; (80008d8 <MX_GPIO_Init+0x2a4>)
 80006e0:	f043 0308 	orr.w	r3, r3, #8
 80006e4:	6313      	str	r3, [r2, #48]	; 0x30
 80006e6:	4b7c      	ldr	r3, [pc, #496]	; (80008d8 <MX_GPIO_Init+0x2a4>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ea:	f003 0308 	and.w	r3, r3, #8
 80006ee:	607b      	str	r3, [r7, #4]
 80006f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80006f2:	2200      	movs	r2, #0
 80006f4:	2108      	movs	r1, #8
 80006f6:	4879      	ldr	r0, [pc, #484]	; (80008dc <MX_GPIO_Init+0x2a8>)
 80006f8:	f000 fd56 	bl	80011a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80006fc:	2201      	movs	r2, #1
 80006fe:	2101      	movs	r1, #1
 8000700:	4877      	ldr	r0, [pc, #476]	; (80008e0 <MX_GPIO_Init+0x2ac>)
 8000702:	f000 fd51 	bl	80011a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000706:	2200      	movs	r2, #0
 8000708:	f24f 0110 	movw	r1, #61456	; 0xf010
 800070c:	4875      	ldr	r0, [pc, #468]	; (80008e4 <MX_GPIO_Init+0x2b0>)
 800070e:	f000 fd4b 	bl	80011a8 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000712:	2308      	movs	r3, #8
 8000714:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000716:	2301      	movs	r3, #1
 8000718:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071a:	2300      	movs	r3, #0
 800071c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800071e:	2300      	movs	r3, #0
 8000720:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000722:	f107 031c 	add.w	r3, r7, #28
 8000726:	4619      	mov	r1, r3
 8000728:	486c      	ldr	r0, [pc, #432]	; (80008dc <MX_GPIO_Init+0x2a8>)
 800072a:	f000 fba1 	bl	8000e70 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800072e:	2301      	movs	r3, #1
 8000730:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000732:	2301      	movs	r3, #1
 8000734:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000736:	2300      	movs	r3, #0
 8000738:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800073a:	2300      	movs	r3, #0
 800073c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800073e:	f107 031c 	add.w	r3, r7, #28
 8000742:	4619      	mov	r1, r3
 8000744:	4866      	ldr	r0, [pc, #408]	; (80008e0 <MX_GPIO_Init+0x2ac>)
 8000746:	f000 fb93 	bl	8000e70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800074a:	2308      	movs	r3, #8
 800074c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800074e:	2302      	movs	r3, #2
 8000750:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000752:	2300      	movs	r3, #0
 8000754:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000756:	2300      	movs	r3, #0
 8000758:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800075a:	2305      	movs	r3, #5
 800075c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800075e:	f107 031c 	add.w	r3, r7, #28
 8000762:	4619      	mov	r1, r3
 8000764:	485e      	ldr	r0, [pc, #376]	; (80008e0 <MX_GPIO_Init+0x2ac>)
 8000766:	f000 fb83 	bl	8000e70 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800076a:	2301      	movs	r3, #1
 800076c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800076e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000772:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000774:	2300      	movs	r3, #0
 8000776:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000778:	f107 031c 	add.w	r3, r7, #28
 800077c:	4619      	mov	r1, r3
 800077e:	485a      	ldr	r0, [pc, #360]	; (80008e8 <MX_GPIO_Init+0x2b4>)
 8000780:	f000 fb76 	bl	8000e70 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000784:	2310      	movs	r3, #16
 8000786:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000788:	2302      	movs	r3, #2
 800078a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078c:	2300      	movs	r3, #0
 800078e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000790:	2300      	movs	r3, #0
 8000792:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000794:	2306      	movs	r3, #6
 8000796:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000798:	f107 031c 	add.w	r3, r7, #28
 800079c:	4619      	mov	r1, r3
 800079e:	4852      	ldr	r0, [pc, #328]	; (80008e8 <MX_GPIO_Init+0x2b4>)
 80007a0:	f000 fb66 	bl	8000e70 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80007a4:	23e0      	movs	r3, #224	; 0xe0
 80007a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007a8:	2302      	movs	r3, #2
 80007aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ac:	2300      	movs	r3, #0
 80007ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b0:	2300      	movs	r3, #0
 80007b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80007b4:	2305      	movs	r3, #5
 80007b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007b8:	f107 031c 	add.w	r3, r7, #28
 80007bc:	4619      	mov	r1, r3
 80007be:	484a      	ldr	r0, [pc, #296]	; (80008e8 <MX_GPIO_Init+0x2b4>)
 80007c0:	f000 fb56 	bl	8000e70 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80007c4:	2304      	movs	r3, #4
 80007c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007c8:	2300      	movs	r3, #0
 80007ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007cc:	2300      	movs	r3, #0
 80007ce:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80007d0:	f107 031c 	add.w	r3, r7, #28
 80007d4:	4619      	mov	r1, r3
 80007d6:	4845      	ldr	r0, [pc, #276]	; (80008ec <MX_GPIO_Init+0x2b8>)
 80007d8:	f000 fb4a 	bl	8000e70 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80007dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007e2:	2302      	movs	r3, #2
 80007e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e6:	2300      	movs	r3, #0
 80007e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ea:	2300      	movs	r3, #0
 80007ec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80007ee:	2305      	movs	r3, #5
 80007f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80007f2:	f107 031c 	add.w	r3, r7, #28
 80007f6:	4619      	mov	r1, r3
 80007f8:	483c      	ldr	r0, [pc, #240]	; (80008ec <MX_GPIO_Init+0x2b8>)
 80007fa:	f000 fb39 	bl	8000e70 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80007fe:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000802:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000804:	2301      	movs	r3, #1
 8000806:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000808:	2300      	movs	r3, #0
 800080a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080c:	2300      	movs	r3, #0
 800080e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000810:	f107 031c 	add.w	r3, r7, #28
 8000814:	4619      	mov	r1, r3
 8000816:	4833      	ldr	r0, [pc, #204]	; (80008e4 <MX_GPIO_Init+0x2b0>)
 8000818:	f000 fb2a 	bl	8000e70 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800081c:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000820:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000822:	2302      	movs	r3, #2
 8000824:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000826:	2300      	movs	r3, #0
 8000828:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082a:	2300      	movs	r3, #0
 800082c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800082e:	2306      	movs	r3, #6
 8000830:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000832:	f107 031c 	add.w	r3, r7, #28
 8000836:	4619      	mov	r1, r3
 8000838:	4829      	ldr	r0, [pc, #164]	; (80008e0 <MX_GPIO_Init+0x2ac>)
 800083a:	f000 fb19 	bl	8000e70 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800083e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000842:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000844:	2300      	movs	r3, #0
 8000846:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000848:	2300      	movs	r3, #0
 800084a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800084c:	f107 031c 	add.w	r3, r7, #28
 8000850:	4619      	mov	r1, r3
 8000852:	4825      	ldr	r0, [pc, #148]	; (80008e8 <MX_GPIO_Init+0x2b4>)
 8000854:	f000 fb0c 	bl	8000e70 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000858:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800085c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800085e:	2302      	movs	r3, #2
 8000860:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000862:	2300      	movs	r3, #0
 8000864:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000866:	2300      	movs	r3, #0
 8000868:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800086a:	230a      	movs	r3, #10
 800086c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800086e:	f107 031c 	add.w	r3, r7, #28
 8000872:	4619      	mov	r1, r3
 8000874:	481c      	ldr	r0, [pc, #112]	; (80008e8 <MX_GPIO_Init+0x2b4>)
 8000876:	f000 fafb 	bl	8000e70 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800087a:	2320      	movs	r3, #32
 800087c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800087e:	2300      	movs	r3, #0
 8000880:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000882:	2300      	movs	r3, #0
 8000884:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000886:	f107 031c 	add.w	r3, r7, #28
 800088a:	4619      	mov	r1, r3
 800088c:	4815      	ldr	r0, [pc, #84]	; (80008e4 <MX_GPIO_Init+0x2b0>)
 800088e:	f000 faef 	bl	8000e70 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000892:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000896:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000898:	2312      	movs	r3, #18
 800089a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089c:	2300      	movs	r3, #0
 800089e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a0:	2300      	movs	r3, #0
 80008a2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80008a4:	2304      	movs	r3, #4
 80008a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008a8:	f107 031c 	add.w	r3, r7, #28
 80008ac:	4619      	mov	r1, r3
 80008ae:	480f      	ldr	r0, [pc, #60]	; (80008ec <MX_GPIO_Init+0x2b8>)
 80008b0:	f000 fade 	bl	8000e70 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80008b4:	2302      	movs	r3, #2
 80008b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008b8:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80008bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008be:	2300      	movs	r3, #0
 80008c0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80008c2:	f107 031c 	add.w	r3, r7, #28
 80008c6:	4619      	mov	r1, r3
 80008c8:	4804      	ldr	r0, [pc, #16]	; (80008dc <MX_GPIO_Init+0x2a8>)
 80008ca:	f000 fad1 	bl	8000e70 <HAL_GPIO_Init>

}
 80008ce:	bf00      	nop
 80008d0:	3730      	adds	r7, #48	; 0x30
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	40023800 	.word	0x40023800
 80008dc:	40021000 	.word	0x40021000
 80008e0:	40020800 	.word	0x40020800
 80008e4:	40020c00 	.word	0x40020c00
 80008e8:	40020000 	.word	0x40020000
 80008ec:	40020400 	.word	0x40020400

080008f0 <task1_handler>:

/* USER CODE BEGIN 4 */
static void task1_handler(void* parameters){
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
	while(1){
		printf("%s\n",(char*)parameters);
 80008f8:	6878      	ldr	r0, [r7, #4]
 80008fa:	f003 fda5 	bl	8004448 <puts>
 80008fe:	e7fb      	b.n	80008f8 <task1_handler+0x8>

08000900 <task2_handler>:
	}
}

static void task2_handler(void* parameters){
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
	while(1){
		printf("%s\n",(char*)parameters);
 8000908:	6878      	ldr	r0, [r7, #4]
 800090a:	f003 fd9d 	bl	8004448 <puts>
 800090e:	e7fb      	b.n	8000908 <task2_handler+0x8>

08000910 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	4a04      	ldr	r2, [pc, #16]	; (8000930 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800091e:	4293      	cmp	r3, r2
 8000920:	d101      	bne.n	8000926 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000922:	f000 f9a3 	bl	8000c6c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000926:	bf00      	nop
 8000928:	3708      	adds	r7, #8
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	40001000 	.word	0x40001000

08000934 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000938:	b672      	cpsid	i
}
 800093a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800093c:	e7fe      	b.n	800093c <Error_Handler+0x8>
	...

08000940 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000940:	b480      	push	{r7}
 8000942:	b083      	sub	sp, #12
 8000944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000946:	2300      	movs	r3, #0
 8000948:	607b      	str	r3, [r7, #4]
 800094a:	4b10      	ldr	r3, [pc, #64]	; (800098c <HAL_MspInit+0x4c>)
 800094c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800094e:	4a0f      	ldr	r2, [pc, #60]	; (800098c <HAL_MspInit+0x4c>)
 8000950:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000954:	6453      	str	r3, [r2, #68]	; 0x44
 8000956:	4b0d      	ldr	r3, [pc, #52]	; (800098c <HAL_MspInit+0x4c>)
 8000958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800095a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800095e:	607b      	str	r3, [r7, #4]
 8000960:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000962:	2300      	movs	r3, #0
 8000964:	603b      	str	r3, [r7, #0]
 8000966:	4b09      	ldr	r3, [pc, #36]	; (800098c <HAL_MspInit+0x4c>)
 8000968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800096a:	4a08      	ldr	r2, [pc, #32]	; (800098c <HAL_MspInit+0x4c>)
 800096c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000970:	6413      	str	r3, [r2, #64]	; 0x40
 8000972:	4b06      	ldr	r3, [pc, #24]	; (800098c <HAL_MspInit+0x4c>)
 8000974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000976:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800097a:	603b      	str	r3, [r7, #0]
 800097c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800097e:	bf00      	nop
 8000980:	370c      	adds	r7, #12
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop
 800098c:	40023800 	.word	0x40023800

08000990 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b08c      	sub	sp, #48	; 0x30
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000998:	2300      	movs	r3, #0
 800099a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800099c:	2300      	movs	r3, #0
 800099e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80009a0:	2200      	movs	r2, #0
 80009a2:	6879      	ldr	r1, [r7, #4]
 80009a4:	2036      	movs	r0, #54	; 0x36
 80009a6:	f000 fa39 	bl	8000e1c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80009aa:	2036      	movs	r0, #54	; 0x36
 80009ac:	f000 fa52 	bl	8000e54 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80009b0:	2300      	movs	r3, #0
 80009b2:	60fb      	str	r3, [r7, #12]
 80009b4:	4b1f      	ldr	r3, [pc, #124]	; (8000a34 <HAL_InitTick+0xa4>)
 80009b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b8:	4a1e      	ldr	r2, [pc, #120]	; (8000a34 <HAL_InitTick+0xa4>)
 80009ba:	f043 0310 	orr.w	r3, r3, #16
 80009be:	6413      	str	r3, [r2, #64]	; 0x40
 80009c0:	4b1c      	ldr	r3, [pc, #112]	; (8000a34 <HAL_InitTick+0xa4>)
 80009c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c4:	f003 0310 	and.w	r3, r3, #16
 80009c8:	60fb      	str	r3, [r7, #12]
 80009ca:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009cc:	f107 0210 	add.w	r2, r7, #16
 80009d0:	f107 0314 	add.w	r3, r7, #20
 80009d4:	4611      	mov	r1, r2
 80009d6:	4618      	mov	r0, r3
 80009d8:	f001 f860 	bl	8001a9c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80009dc:	f001 f84a 	bl	8001a74 <HAL_RCC_GetPCLK1Freq>
 80009e0:	4603      	mov	r3, r0
 80009e2:	005b      	lsls	r3, r3, #1
 80009e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80009e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009e8:	4a13      	ldr	r2, [pc, #76]	; (8000a38 <HAL_InitTick+0xa8>)
 80009ea:	fba2 2303 	umull	r2, r3, r2, r3
 80009ee:	0c9b      	lsrs	r3, r3, #18
 80009f0:	3b01      	subs	r3, #1
 80009f2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80009f4:	4b11      	ldr	r3, [pc, #68]	; (8000a3c <HAL_InitTick+0xac>)
 80009f6:	4a12      	ldr	r2, [pc, #72]	; (8000a40 <HAL_InitTick+0xb0>)
 80009f8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80009fa:	4b10      	ldr	r3, [pc, #64]	; (8000a3c <HAL_InitTick+0xac>)
 80009fc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a00:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000a02:	4a0e      	ldr	r2, [pc, #56]	; (8000a3c <HAL_InitTick+0xac>)
 8000a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a06:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000a08:	4b0c      	ldr	r3, [pc, #48]	; (8000a3c <HAL_InitTick+0xac>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a0e:	4b0b      	ldr	r3, [pc, #44]	; (8000a3c <HAL_InitTick+0xac>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000a14:	4809      	ldr	r0, [pc, #36]	; (8000a3c <HAL_InitTick+0xac>)
 8000a16:	f001 f873 	bl	8001b00 <HAL_TIM_Base_Init>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d104      	bne.n	8000a2a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000a20:	4806      	ldr	r0, [pc, #24]	; (8000a3c <HAL_InitTick+0xac>)
 8000a22:	f001 f8c7 	bl	8001bb4 <HAL_TIM_Base_Start_IT>
 8000a26:	4603      	mov	r3, r0
 8000a28:	e000      	b.n	8000a2c <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000a2a:	2301      	movs	r3, #1
}
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	3730      	adds	r7, #48	; 0x30
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	40023800 	.word	0x40023800
 8000a38:	431bde83 	.word	0x431bde83
 8000a3c:	20012df0 	.word	0x20012df0
 8000a40:	40001000 	.word	0x40001000

08000a44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a48:	e7fe      	b.n	8000a48 <NMI_Handler+0x4>

08000a4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a4a:	b480      	push	{r7}
 8000a4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a4e:	e7fe      	b.n	8000a4e <HardFault_Handler+0x4>

08000a50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a54:	e7fe      	b.n	8000a54 <MemManage_Handler+0x4>

08000a56 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a56:	b480      	push	{r7}
 8000a58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a5a:	e7fe      	b.n	8000a5a <BusFault_Handler+0x4>

08000a5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a60:	e7fe      	b.n	8000a60 <UsageFault_Handler+0x4>

08000a62 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a62:	b480      	push	{r7}
 8000a64:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a66:	bf00      	nop
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6e:	4770      	bx	lr

08000a70 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000a74:	4802      	ldr	r0, [pc, #8]	; (8000a80 <TIM6_DAC_IRQHandler+0x10>)
 8000a76:	f001 f90d 	bl	8001c94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000a7a:	bf00      	nop
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	20012df0 	.word	0x20012df0

08000a84 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000a84:	b480      	push	{r7}
 8000a86:	b083      	sub	sp, #12
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8000a8e:	4b0f      	ldr	r3, [pc, #60]	; (8000acc <ITM_SendChar+0x48>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	4a0e      	ldr	r2, [pc, #56]	; (8000acc <ITM_SendChar+0x48>)
 8000a94:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000a98:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000a9a:	4b0d      	ldr	r3, [pc, #52]	; (8000ad0 <ITM_SendChar+0x4c>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	4a0c      	ldr	r2, [pc, #48]	; (8000ad0 <ITM_SendChar+0x4c>)
 8000aa0:	f043 0301 	orr.w	r3, r3, #1
 8000aa4:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000aa6:	bf00      	nop
 8000aa8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	f003 0301 	and.w	r3, r3, #1
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d0f8      	beq.n	8000aa8 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000ab6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8000aba:	79fb      	ldrb	r3, [r7, #7]
 8000abc:	6013      	str	r3, [r2, #0]
}
 8000abe:	bf00      	nop
 8000ac0:	370c      	adds	r7, #12
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop
 8000acc:	e000edfc 	.word	0xe000edfc
 8000ad0:	e0000e00 	.word	0xe0000e00

08000ad4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b086      	sub	sp, #24
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	60f8      	str	r0, [r7, #12]
 8000adc:	60b9      	str	r1, [r7, #8]
 8000ade:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	617b      	str	r3, [r7, #20]
 8000ae4:	e00a      	b.n	8000afc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000ae6:	f3af 8000 	nop.w
 8000aea:	4601      	mov	r1, r0
 8000aec:	68bb      	ldr	r3, [r7, #8]
 8000aee:	1c5a      	adds	r2, r3, #1
 8000af0:	60ba      	str	r2, [r7, #8]
 8000af2:	b2ca      	uxtb	r2, r1
 8000af4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000af6:	697b      	ldr	r3, [r7, #20]
 8000af8:	3301      	adds	r3, #1
 8000afa:	617b      	str	r3, [r7, #20]
 8000afc:	697a      	ldr	r2, [r7, #20]
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	429a      	cmp	r2, r3
 8000b02:	dbf0      	blt.n	8000ae6 <_read+0x12>
	}

return len;
 8000b04:	687b      	ldr	r3, [r7, #4]
}
 8000b06:	4618      	mov	r0, r3
 8000b08:	3718      	adds	r7, #24
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}

08000b0e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b0e:	b580      	push	{r7, lr}
 8000b10:	b086      	sub	sp, #24
 8000b12:	af00      	add	r7, sp, #0
 8000b14:	60f8      	str	r0, [r7, #12]
 8000b16:	60b9      	str	r1, [r7, #8]
 8000b18:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	617b      	str	r3, [r7, #20]
 8000b1e:	e009      	b.n	8000b34 <_write+0x26>
	{
		//mari comment out
		//__io_putchar(*ptr++);
		//mari paste
		ITM_SendChar(*ptr++);
 8000b20:	68bb      	ldr	r3, [r7, #8]
 8000b22:	1c5a      	adds	r2, r3, #1
 8000b24:	60ba      	str	r2, [r7, #8]
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f7ff ffab 	bl	8000a84 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b2e:	697b      	ldr	r3, [r7, #20]
 8000b30:	3301      	adds	r3, #1
 8000b32:	617b      	str	r3, [r7, #20]
 8000b34:	697a      	ldr	r2, [r7, #20]
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	429a      	cmp	r2, r3
 8000b3a:	dbf1      	blt.n	8000b20 <_write+0x12>
		//mari paste end
	}
	return len;
 8000b3c:	687b      	ldr	r3, [r7, #4]
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	3718      	adds	r7, #24
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}

08000b46 <_close>:

int _close(int file)
{
 8000b46:	b480      	push	{r7}
 8000b48:	b083      	sub	sp, #12
 8000b4a:	af00      	add	r7, sp, #0
 8000b4c:	6078      	str	r0, [r7, #4]
	return -1;
 8000b4e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b52:	4618      	mov	r0, r3
 8000b54:	370c      	adds	r7, #12
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr

08000b5e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b5e:	b480      	push	{r7}
 8000b60:	b083      	sub	sp, #12
 8000b62:	af00      	add	r7, sp, #0
 8000b64:	6078      	str	r0, [r7, #4]
 8000b66:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b6e:	605a      	str	r2, [r3, #4]
	return 0;
 8000b70:	2300      	movs	r3, #0
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	370c      	adds	r7, #12
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr

08000b7e <_isatty>:

int _isatty(int file)
{
 8000b7e:	b480      	push	{r7}
 8000b80:	b083      	sub	sp, #12
 8000b82:	af00      	add	r7, sp, #0
 8000b84:	6078      	str	r0, [r7, #4]
	return 1;
 8000b86:	2301      	movs	r3, #1
}
 8000b88:	4618      	mov	r0, r3
 8000b8a:	370c      	adds	r7, #12
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b92:	4770      	bx	lr

08000b94 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b085      	sub	sp, #20
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	60f8      	str	r0, [r7, #12]
 8000b9c:	60b9      	str	r1, [r7, #8]
 8000b9e:	607a      	str	r2, [r7, #4]
	return 0;
 8000ba0:	2300      	movs	r3, #0
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	3714      	adds	r7, #20
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr
	...

08000bb0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bb4:	4b06      	ldr	r3, [pc, #24]	; (8000bd0 <SystemInit+0x20>)
 8000bb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bba:	4a05      	ldr	r2, [pc, #20]	; (8000bd0 <SystemInit+0x20>)
 8000bbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bc0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bc4:	bf00      	nop
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop
 8000bd0:	e000ed00 	.word	0xe000ed00

08000bd4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000bd4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c0c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bd8:	480d      	ldr	r0, [pc, #52]	; (8000c10 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000bda:	490e      	ldr	r1, [pc, #56]	; (8000c14 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000bdc:	4a0e      	ldr	r2, [pc, #56]	; (8000c18 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bde:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000be0:	e002      	b.n	8000be8 <LoopCopyDataInit>

08000be2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000be2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000be4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000be6:	3304      	adds	r3, #4

08000be8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000be8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bec:	d3f9      	bcc.n	8000be2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bee:	4a0b      	ldr	r2, [pc, #44]	; (8000c1c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000bf0:	4c0b      	ldr	r4, [pc, #44]	; (8000c20 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000bf2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bf4:	e001      	b.n	8000bfa <LoopFillZerobss>

08000bf6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bf6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bf8:	3204      	adds	r2, #4

08000bfa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bfa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bfc:	d3fb      	bcc.n	8000bf6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000bfe:	f7ff ffd7 	bl	8000bb0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c02:	f003 fb79 	bl	80042f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c06:	f7ff fc5f 	bl	80004c8 <main>
  bx  lr    
 8000c0a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c0c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c14:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000c18:	08004e10 	.word	0x08004e10
  ldr r2, =_sbss
 8000c1c:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000c20:	20012e8c 	.word	0x20012e8c

08000c24 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c24:	e7fe      	b.n	8000c24 <ADC_IRQHandler>
	...

08000c28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c2c:	4b0e      	ldr	r3, [pc, #56]	; (8000c68 <HAL_Init+0x40>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a0d      	ldr	r2, [pc, #52]	; (8000c68 <HAL_Init+0x40>)
 8000c32:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c36:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c38:	4b0b      	ldr	r3, [pc, #44]	; (8000c68 <HAL_Init+0x40>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4a0a      	ldr	r2, [pc, #40]	; (8000c68 <HAL_Init+0x40>)
 8000c3e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c42:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c44:	4b08      	ldr	r3, [pc, #32]	; (8000c68 <HAL_Init+0x40>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a07      	ldr	r2, [pc, #28]	; (8000c68 <HAL_Init+0x40>)
 8000c4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c4e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c50:	2003      	movs	r0, #3
 8000c52:	f000 f8d8 	bl	8000e06 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c56:	200f      	movs	r0, #15
 8000c58:	f7ff fe9a 	bl	8000990 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c5c:	f7ff fe70 	bl	8000940 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c60:	2300      	movs	r3, #0
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	40023c00 	.word	0x40023c00

08000c6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c70:	4b06      	ldr	r3, [pc, #24]	; (8000c8c <HAL_IncTick+0x20>)
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	461a      	mov	r2, r3
 8000c76:	4b06      	ldr	r3, [pc, #24]	; (8000c90 <HAL_IncTick+0x24>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	4413      	add	r3, r2
 8000c7c:	4a04      	ldr	r2, [pc, #16]	; (8000c90 <HAL_IncTick+0x24>)
 8000c7e:	6013      	str	r3, [r2, #0]
}
 8000c80:	bf00      	nop
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop
 8000c8c:	20000008 	.word	0x20000008
 8000c90:	20012e38 	.word	0x20012e38

08000c94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  return uwTick;
 8000c98:	4b03      	ldr	r3, [pc, #12]	; (8000ca8 <HAL_GetTick+0x14>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
}
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop
 8000ca8:	20012e38 	.word	0x20012e38

08000cac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b085      	sub	sp, #20
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	f003 0307 	and.w	r3, r3, #7
 8000cba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cbc:	4b0c      	ldr	r3, [pc, #48]	; (8000cf0 <__NVIC_SetPriorityGrouping+0x44>)
 8000cbe:	68db      	ldr	r3, [r3, #12]
 8000cc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cc2:	68ba      	ldr	r2, [r7, #8]
 8000cc4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cc8:	4013      	ands	r3, r2
 8000cca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cd0:	68bb      	ldr	r3, [r7, #8]
 8000cd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cd4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cdc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cde:	4a04      	ldr	r2, [pc, #16]	; (8000cf0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ce0:	68bb      	ldr	r3, [r7, #8]
 8000ce2:	60d3      	str	r3, [r2, #12]
}
 8000ce4:	bf00      	nop
 8000ce6:	3714      	adds	r7, #20
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cee:	4770      	bx	lr
 8000cf0:	e000ed00 	.word	0xe000ed00

08000cf4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cf8:	4b04      	ldr	r3, [pc, #16]	; (8000d0c <__NVIC_GetPriorityGrouping+0x18>)
 8000cfa:	68db      	ldr	r3, [r3, #12]
 8000cfc:	0a1b      	lsrs	r3, r3, #8
 8000cfe:	f003 0307 	and.w	r3, r3, #7
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	46bd      	mov	sp, r7
 8000d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0a:	4770      	bx	lr
 8000d0c:	e000ed00 	.word	0xe000ed00

08000d10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b083      	sub	sp, #12
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	4603      	mov	r3, r0
 8000d18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	db0b      	blt.n	8000d3a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d22:	79fb      	ldrb	r3, [r7, #7]
 8000d24:	f003 021f 	and.w	r2, r3, #31
 8000d28:	4907      	ldr	r1, [pc, #28]	; (8000d48 <__NVIC_EnableIRQ+0x38>)
 8000d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d2e:	095b      	lsrs	r3, r3, #5
 8000d30:	2001      	movs	r0, #1
 8000d32:	fa00 f202 	lsl.w	r2, r0, r2
 8000d36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d3a:	bf00      	nop
 8000d3c:	370c      	adds	r7, #12
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop
 8000d48:	e000e100 	.word	0xe000e100

08000d4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	4603      	mov	r3, r0
 8000d54:	6039      	str	r1, [r7, #0]
 8000d56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	db0a      	blt.n	8000d76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	b2da      	uxtb	r2, r3
 8000d64:	490c      	ldr	r1, [pc, #48]	; (8000d98 <__NVIC_SetPriority+0x4c>)
 8000d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d6a:	0112      	lsls	r2, r2, #4
 8000d6c:	b2d2      	uxtb	r2, r2
 8000d6e:	440b      	add	r3, r1
 8000d70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d74:	e00a      	b.n	8000d8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	b2da      	uxtb	r2, r3
 8000d7a:	4908      	ldr	r1, [pc, #32]	; (8000d9c <__NVIC_SetPriority+0x50>)
 8000d7c:	79fb      	ldrb	r3, [r7, #7]
 8000d7e:	f003 030f 	and.w	r3, r3, #15
 8000d82:	3b04      	subs	r3, #4
 8000d84:	0112      	lsls	r2, r2, #4
 8000d86:	b2d2      	uxtb	r2, r2
 8000d88:	440b      	add	r3, r1
 8000d8a:	761a      	strb	r2, [r3, #24]
}
 8000d8c:	bf00      	nop
 8000d8e:	370c      	adds	r7, #12
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr
 8000d98:	e000e100 	.word	0xe000e100
 8000d9c:	e000ed00 	.word	0xe000ed00

08000da0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b089      	sub	sp, #36	; 0x24
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	60f8      	str	r0, [r7, #12]
 8000da8:	60b9      	str	r1, [r7, #8]
 8000daa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	f003 0307 	and.w	r3, r3, #7
 8000db2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000db4:	69fb      	ldr	r3, [r7, #28]
 8000db6:	f1c3 0307 	rsb	r3, r3, #7
 8000dba:	2b04      	cmp	r3, #4
 8000dbc:	bf28      	it	cs
 8000dbe:	2304      	movcs	r3, #4
 8000dc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dc2:	69fb      	ldr	r3, [r7, #28]
 8000dc4:	3304      	adds	r3, #4
 8000dc6:	2b06      	cmp	r3, #6
 8000dc8:	d902      	bls.n	8000dd0 <NVIC_EncodePriority+0x30>
 8000dca:	69fb      	ldr	r3, [r7, #28]
 8000dcc:	3b03      	subs	r3, #3
 8000dce:	e000      	b.n	8000dd2 <NVIC_EncodePriority+0x32>
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dd4:	f04f 32ff 	mov.w	r2, #4294967295
 8000dd8:	69bb      	ldr	r3, [r7, #24]
 8000dda:	fa02 f303 	lsl.w	r3, r2, r3
 8000dde:	43da      	mvns	r2, r3
 8000de0:	68bb      	ldr	r3, [r7, #8]
 8000de2:	401a      	ands	r2, r3
 8000de4:	697b      	ldr	r3, [r7, #20]
 8000de6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000de8:	f04f 31ff 	mov.w	r1, #4294967295
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	fa01 f303 	lsl.w	r3, r1, r3
 8000df2:	43d9      	mvns	r1, r3
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000df8:	4313      	orrs	r3, r2
         );
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	3724      	adds	r7, #36	; 0x24
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr

08000e06 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e06:	b580      	push	{r7, lr}
 8000e08:	b082      	sub	sp, #8
 8000e0a:	af00      	add	r7, sp, #0
 8000e0c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e0e:	6878      	ldr	r0, [r7, #4]
 8000e10:	f7ff ff4c 	bl	8000cac <__NVIC_SetPriorityGrouping>
}
 8000e14:	bf00      	nop
 8000e16:	3708      	adds	r7, #8
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}

08000e1c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b086      	sub	sp, #24
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	4603      	mov	r3, r0
 8000e24:	60b9      	str	r1, [r7, #8]
 8000e26:	607a      	str	r2, [r7, #4]
 8000e28:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e2e:	f7ff ff61 	bl	8000cf4 <__NVIC_GetPriorityGrouping>
 8000e32:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e34:	687a      	ldr	r2, [r7, #4]
 8000e36:	68b9      	ldr	r1, [r7, #8]
 8000e38:	6978      	ldr	r0, [r7, #20]
 8000e3a:	f7ff ffb1 	bl	8000da0 <NVIC_EncodePriority>
 8000e3e:	4602      	mov	r2, r0
 8000e40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e44:	4611      	mov	r1, r2
 8000e46:	4618      	mov	r0, r3
 8000e48:	f7ff ff80 	bl	8000d4c <__NVIC_SetPriority>
}
 8000e4c:	bf00      	nop
 8000e4e:	3718      	adds	r7, #24
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}

08000e54 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e62:	4618      	mov	r0, r3
 8000e64:	f7ff ff54 	bl	8000d10 <__NVIC_EnableIRQ>
}
 8000e68:	bf00      	nop
 8000e6a:	3708      	adds	r7, #8
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}

08000e70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b089      	sub	sp, #36	; 0x24
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
 8000e78:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e82:	2300      	movs	r3, #0
 8000e84:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e86:	2300      	movs	r3, #0
 8000e88:	61fb      	str	r3, [r7, #28]
 8000e8a:	e16b      	b.n	8001164 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	69fb      	ldr	r3, [r7, #28]
 8000e90:	fa02 f303 	lsl.w	r3, r2, r3
 8000e94:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	697a      	ldr	r2, [r7, #20]
 8000e9c:	4013      	ands	r3, r2
 8000e9e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ea0:	693a      	ldr	r2, [r7, #16]
 8000ea2:	697b      	ldr	r3, [r7, #20]
 8000ea4:	429a      	cmp	r2, r3
 8000ea6:	f040 815a 	bne.w	800115e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	f003 0303 	and.w	r3, r3, #3
 8000eb2:	2b01      	cmp	r3, #1
 8000eb4:	d005      	beq.n	8000ec2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	685b      	ldr	r3, [r3, #4]
 8000eba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ebe:	2b02      	cmp	r3, #2
 8000ec0:	d130      	bne.n	8000f24 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	689b      	ldr	r3, [r3, #8]
 8000ec6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ec8:	69fb      	ldr	r3, [r7, #28]
 8000eca:	005b      	lsls	r3, r3, #1
 8000ecc:	2203      	movs	r2, #3
 8000ece:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed2:	43db      	mvns	r3, r3
 8000ed4:	69ba      	ldr	r2, [r7, #24]
 8000ed6:	4013      	ands	r3, r2
 8000ed8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	68da      	ldr	r2, [r3, #12]
 8000ede:	69fb      	ldr	r3, [r7, #28]
 8000ee0:	005b      	lsls	r3, r3, #1
 8000ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee6:	69ba      	ldr	r2, [r7, #24]
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	69ba      	ldr	r2, [r7, #24]
 8000ef0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ef8:	2201      	movs	r2, #1
 8000efa:	69fb      	ldr	r3, [r7, #28]
 8000efc:	fa02 f303 	lsl.w	r3, r2, r3
 8000f00:	43db      	mvns	r3, r3
 8000f02:	69ba      	ldr	r2, [r7, #24]
 8000f04:	4013      	ands	r3, r2
 8000f06:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	091b      	lsrs	r3, r3, #4
 8000f0e:	f003 0201 	and.w	r2, r3, #1
 8000f12:	69fb      	ldr	r3, [r7, #28]
 8000f14:	fa02 f303 	lsl.w	r3, r2, r3
 8000f18:	69ba      	ldr	r2, [r7, #24]
 8000f1a:	4313      	orrs	r3, r2
 8000f1c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	69ba      	ldr	r2, [r7, #24]
 8000f22:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	f003 0303 	and.w	r3, r3, #3
 8000f2c:	2b03      	cmp	r3, #3
 8000f2e:	d017      	beq.n	8000f60 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	68db      	ldr	r3, [r3, #12]
 8000f34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f36:	69fb      	ldr	r3, [r7, #28]
 8000f38:	005b      	lsls	r3, r3, #1
 8000f3a:	2203      	movs	r2, #3
 8000f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f40:	43db      	mvns	r3, r3
 8000f42:	69ba      	ldr	r2, [r7, #24]
 8000f44:	4013      	ands	r3, r2
 8000f46:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	689a      	ldr	r2, [r3, #8]
 8000f4c:	69fb      	ldr	r3, [r7, #28]
 8000f4e:	005b      	lsls	r3, r3, #1
 8000f50:	fa02 f303 	lsl.w	r3, r2, r3
 8000f54:	69ba      	ldr	r2, [r7, #24]
 8000f56:	4313      	orrs	r3, r2
 8000f58:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	69ba      	ldr	r2, [r7, #24]
 8000f5e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	f003 0303 	and.w	r3, r3, #3
 8000f68:	2b02      	cmp	r3, #2
 8000f6a:	d123      	bne.n	8000fb4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f6c:	69fb      	ldr	r3, [r7, #28]
 8000f6e:	08da      	lsrs	r2, r3, #3
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	3208      	adds	r2, #8
 8000f74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f78:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f7a:	69fb      	ldr	r3, [r7, #28]
 8000f7c:	f003 0307 	and.w	r3, r3, #7
 8000f80:	009b      	lsls	r3, r3, #2
 8000f82:	220f      	movs	r2, #15
 8000f84:	fa02 f303 	lsl.w	r3, r2, r3
 8000f88:	43db      	mvns	r3, r3
 8000f8a:	69ba      	ldr	r2, [r7, #24]
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	691a      	ldr	r2, [r3, #16]
 8000f94:	69fb      	ldr	r3, [r7, #28]
 8000f96:	f003 0307 	and.w	r3, r3, #7
 8000f9a:	009b      	lsls	r3, r3, #2
 8000f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa0:	69ba      	ldr	r2, [r7, #24]
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	08da      	lsrs	r2, r3, #3
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	3208      	adds	r2, #8
 8000fae:	69b9      	ldr	r1, [r7, #24]
 8000fb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fba:	69fb      	ldr	r3, [r7, #28]
 8000fbc:	005b      	lsls	r3, r3, #1
 8000fbe:	2203      	movs	r2, #3
 8000fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc4:	43db      	mvns	r3, r3
 8000fc6:	69ba      	ldr	r2, [r7, #24]
 8000fc8:	4013      	ands	r3, r2
 8000fca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	f003 0203 	and.w	r2, r3, #3
 8000fd4:	69fb      	ldr	r3, [r7, #28]
 8000fd6:	005b      	lsls	r3, r3, #1
 8000fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fdc:	69ba      	ldr	r2, [r7, #24]
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	69ba      	ldr	r2, [r7, #24]
 8000fe6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	f000 80b4 	beq.w	800115e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	60fb      	str	r3, [r7, #12]
 8000ffa:	4b60      	ldr	r3, [pc, #384]	; (800117c <HAL_GPIO_Init+0x30c>)
 8000ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ffe:	4a5f      	ldr	r2, [pc, #380]	; (800117c <HAL_GPIO_Init+0x30c>)
 8001000:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001004:	6453      	str	r3, [r2, #68]	; 0x44
 8001006:	4b5d      	ldr	r3, [pc, #372]	; (800117c <HAL_GPIO_Init+0x30c>)
 8001008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800100a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800100e:	60fb      	str	r3, [r7, #12]
 8001010:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001012:	4a5b      	ldr	r2, [pc, #364]	; (8001180 <HAL_GPIO_Init+0x310>)
 8001014:	69fb      	ldr	r3, [r7, #28]
 8001016:	089b      	lsrs	r3, r3, #2
 8001018:	3302      	adds	r3, #2
 800101a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800101e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001020:	69fb      	ldr	r3, [r7, #28]
 8001022:	f003 0303 	and.w	r3, r3, #3
 8001026:	009b      	lsls	r3, r3, #2
 8001028:	220f      	movs	r2, #15
 800102a:	fa02 f303 	lsl.w	r3, r2, r3
 800102e:	43db      	mvns	r3, r3
 8001030:	69ba      	ldr	r2, [r7, #24]
 8001032:	4013      	ands	r3, r2
 8001034:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	4a52      	ldr	r2, [pc, #328]	; (8001184 <HAL_GPIO_Init+0x314>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d02b      	beq.n	8001096 <HAL_GPIO_Init+0x226>
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	4a51      	ldr	r2, [pc, #324]	; (8001188 <HAL_GPIO_Init+0x318>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d025      	beq.n	8001092 <HAL_GPIO_Init+0x222>
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4a50      	ldr	r2, [pc, #320]	; (800118c <HAL_GPIO_Init+0x31c>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d01f      	beq.n	800108e <HAL_GPIO_Init+0x21e>
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	4a4f      	ldr	r2, [pc, #316]	; (8001190 <HAL_GPIO_Init+0x320>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d019      	beq.n	800108a <HAL_GPIO_Init+0x21a>
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	4a4e      	ldr	r2, [pc, #312]	; (8001194 <HAL_GPIO_Init+0x324>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d013      	beq.n	8001086 <HAL_GPIO_Init+0x216>
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	4a4d      	ldr	r2, [pc, #308]	; (8001198 <HAL_GPIO_Init+0x328>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d00d      	beq.n	8001082 <HAL_GPIO_Init+0x212>
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4a4c      	ldr	r2, [pc, #304]	; (800119c <HAL_GPIO_Init+0x32c>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d007      	beq.n	800107e <HAL_GPIO_Init+0x20e>
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	4a4b      	ldr	r2, [pc, #300]	; (80011a0 <HAL_GPIO_Init+0x330>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d101      	bne.n	800107a <HAL_GPIO_Init+0x20a>
 8001076:	2307      	movs	r3, #7
 8001078:	e00e      	b.n	8001098 <HAL_GPIO_Init+0x228>
 800107a:	2308      	movs	r3, #8
 800107c:	e00c      	b.n	8001098 <HAL_GPIO_Init+0x228>
 800107e:	2306      	movs	r3, #6
 8001080:	e00a      	b.n	8001098 <HAL_GPIO_Init+0x228>
 8001082:	2305      	movs	r3, #5
 8001084:	e008      	b.n	8001098 <HAL_GPIO_Init+0x228>
 8001086:	2304      	movs	r3, #4
 8001088:	e006      	b.n	8001098 <HAL_GPIO_Init+0x228>
 800108a:	2303      	movs	r3, #3
 800108c:	e004      	b.n	8001098 <HAL_GPIO_Init+0x228>
 800108e:	2302      	movs	r3, #2
 8001090:	e002      	b.n	8001098 <HAL_GPIO_Init+0x228>
 8001092:	2301      	movs	r3, #1
 8001094:	e000      	b.n	8001098 <HAL_GPIO_Init+0x228>
 8001096:	2300      	movs	r3, #0
 8001098:	69fa      	ldr	r2, [r7, #28]
 800109a:	f002 0203 	and.w	r2, r2, #3
 800109e:	0092      	lsls	r2, r2, #2
 80010a0:	4093      	lsls	r3, r2
 80010a2:	69ba      	ldr	r2, [r7, #24]
 80010a4:	4313      	orrs	r3, r2
 80010a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010a8:	4935      	ldr	r1, [pc, #212]	; (8001180 <HAL_GPIO_Init+0x310>)
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	089b      	lsrs	r3, r3, #2
 80010ae:	3302      	adds	r3, #2
 80010b0:	69ba      	ldr	r2, [r7, #24]
 80010b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010b6:	4b3b      	ldr	r3, [pc, #236]	; (80011a4 <HAL_GPIO_Init+0x334>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010bc:	693b      	ldr	r3, [r7, #16]
 80010be:	43db      	mvns	r3, r3
 80010c0:	69ba      	ldr	r2, [r7, #24]
 80010c2:	4013      	ands	r3, r2
 80010c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d003      	beq.n	80010da <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80010d2:	69ba      	ldr	r2, [r7, #24]
 80010d4:	693b      	ldr	r3, [r7, #16]
 80010d6:	4313      	orrs	r3, r2
 80010d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010da:	4a32      	ldr	r2, [pc, #200]	; (80011a4 <HAL_GPIO_Init+0x334>)
 80010dc:	69bb      	ldr	r3, [r7, #24]
 80010de:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80010e0:	4b30      	ldr	r3, [pc, #192]	; (80011a4 <HAL_GPIO_Init+0x334>)
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010e6:	693b      	ldr	r3, [r7, #16]
 80010e8:	43db      	mvns	r3, r3
 80010ea:	69ba      	ldr	r2, [r7, #24]
 80010ec:	4013      	ands	r3, r2
 80010ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d003      	beq.n	8001104 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80010fc:	69ba      	ldr	r2, [r7, #24]
 80010fe:	693b      	ldr	r3, [r7, #16]
 8001100:	4313      	orrs	r3, r2
 8001102:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001104:	4a27      	ldr	r2, [pc, #156]	; (80011a4 <HAL_GPIO_Init+0x334>)
 8001106:	69bb      	ldr	r3, [r7, #24]
 8001108:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800110a:	4b26      	ldr	r3, [pc, #152]	; (80011a4 <HAL_GPIO_Init+0x334>)
 800110c:	689b      	ldr	r3, [r3, #8]
 800110e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001110:	693b      	ldr	r3, [r7, #16]
 8001112:	43db      	mvns	r3, r3
 8001114:	69ba      	ldr	r2, [r7, #24]
 8001116:	4013      	ands	r3, r2
 8001118:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001122:	2b00      	cmp	r3, #0
 8001124:	d003      	beq.n	800112e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001126:	69ba      	ldr	r2, [r7, #24]
 8001128:	693b      	ldr	r3, [r7, #16]
 800112a:	4313      	orrs	r3, r2
 800112c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800112e:	4a1d      	ldr	r2, [pc, #116]	; (80011a4 <HAL_GPIO_Init+0x334>)
 8001130:	69bb      	ldr	r3, [r7, #24]
 8001132:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001134:	4b1b      	ldr	r3, [pc, #108]	; (80011a4 <HAL_GPIO_Init+0x334>)
 8001136:	68db      	ldr	r3, [r3, #12]
 8001138:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800113a:	693b      	ldr	r3, [r7, #16]
 800113c:	43db      	mvns	r3, r3
 800113e:	69ba      	ldr	r2, [r7, #24]
 8001140:	4013      	ands	r3, r2
 8001142:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800114c:	2b00      	cmp	r3, #0
 800114e:	d003      	beq.n	8001158 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001150:	69ba      	ldr	r2, [r7, #24]
 8001152:	693b      	ldr	r3, [r7, #16]
 8001154:	4313      	orrs	r3, r2
 8001156:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001158:	4a12      	ldr	r2, [pc, #72]	; (80011a4 <HAL_GPIO_Init+0x334>)
 800115a:	69bb      	ldr	r3, [r7, #24]
 800115c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	3301      	adds	r3, #1
 8001162:	61fb      	str	r3, [r7, #28]
 8001164:	69fb      	ldr	r3, [r7, #28]
 8001166:	2b0f      	cmp	r3, #15
 8001168:	f67f ae90 	bls.w	8000e8c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800116c:	bf00      	nop
 800116e:	bf00      	nop
 8001170:	3724      	adds	r7, #36	; 0x24
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	40023800 	.word	0x40023800
 8001180:	40013800 	.word	0x40013800
 8001184:	40020000 	.word	0x40020000
 8001188:	40020400 	.word	0x40020400
 800118c:	40020800 	.word	0x40020800
 8001190:	40020c00 	.word	0x40020c00
 8001194:	40021000 	.word	0x40021000
 8001198:	40021400 	.word	0x40021400
 800119c:	40021800 	.word	0x40021800
 80011a0:	40021c00 	.word	0x40021c00
 80011a4:	40013c00 	.word	0x40013c00

080011a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
 80011b0:	460b      	mov	r3, r1
 80011b2:	807b      	strh	r3, [r7, #2]
 80011b4:	4613      	mov	r3, r2
 80011b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011b8:	787b      	ldrb	r3, [r7, #1]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d003      	beq.n	80011c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011be:	887a      	ldrh	r2, [r7, #2]
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80011c4:	e003      	b.n	80011ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80011c6:	887b      	ldrh	r3, [r7, #2]
 80011c8:	041a      	lsls	r2, r3, #16
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	619a      	str	r2, [r3, #24]
}
 80011ce:	bf00      	nop
 80011d0:	370c      	adds	r7, #12
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr
	...

080011dc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b086      	sub	sp, #24
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d101      	bne.n	80011ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011ea:	2301      	movs	r3, #1
 80011ec:	e264      	b.n	80016b8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f003 0301 	and.w	r3, r3, #1
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d075      	beq.n	80012e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80011fa:	4ba3      	ldr	r3, [pc, #652]	; (8001488 <HAL_RCC_OscConfig+0x2ac>)
 80011fc:	689b      	ldr	r3, [r3, #8]
 80011fe:	f003 030c 	and.w	r3, r3, #12
 8001202:	2b04      	cmp	r3, #4
 8001204:	d00c      	beq.n	8001220 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001206:	4ba0      	ldr	r3, [pc, #640]	; (8001488 <HAL_RCC_OscConfig+0x2ac>)
 8001208:	689b      	ldr	r3, [r3, #8]
 800120a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800120e:	2b08      	cmp	r3, #8
 8001210:	d112      	bne.n	8001238 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001212:	4b9d      	ldr	r3, [pc, #628]	; (8001488 <HAL_RCC_OscConfig+0x2ac>)
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800121a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800121e:	d10b      	bne.n	8001238 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001220:	4b99      	ldr	r3, [pc, #612]	; (8001488 <HAL_RCC_OscConfig+0x2ac>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001228:	2b00      	cmp	r3, #0
 800122a:	d05b      	beq.n	80012e4 <HAL_RCC_OscConfig+0x108>
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d157      	bne.n	80012e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001234:	2301      	movs	r3, #1
 8001236:	e23f      	b.n	80016b8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001240:	d106      	bne.n	8001250 <HAL_RCC_OscConfig+0x74>
 8001242:	4b91      	ldr	r3, [pc, #580]	; (8001488 <HAL_RCC_OscConfig+0x2ac>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4a90      	ldr	r2, [pc, #576]	; (8001488 <HAL_RCC_OscConfig+0x2ac>)
 8001248:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800124c:	6013      	str	r3, [r2, #0]
 800124e:	e01d      	b.n	800128c <HAL_RCC_OscConfig+0xb0>
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001258:	d10c      	bne.n	8001274 <HAL_RCC_OscConfig+0x98>
 800125a:	4b8b      	ldr	r3, [pc, #556]	; (8001488 <HAL_RCC_OscConfig+0x2ac>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4a8a      	ldr	r2, [pc, #552]	; (8001488 <HAL_RCC_OscConfig+0x2ac>)
 8001260:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001264:	6013      	str	r3, [r2, #0]
 8001266:	4b88      	ldr	r3, [pc, #544]	; (8001488 <HAL_RCC_OscConfig+0x2ac>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4a87      	ldr	r2, [pc, #540]	; (8001488 <HAL_RCC_OscConfig+0x2ac>)
 800126c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001270:	6013      	str	r3, [r2, #0]
 8001272:	e00b      	b.n	800128c <HAL_RCC_OscConfig+0xb0>
 8001274:	4b84      	ldr	r3, [pc, #528]	; (8001488 <HAL_RCC_OscConfig+0x2ac>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a83      	ldr	r2, [pc, #524]	; (8001488 <HAL_RCC_OscConfig+0x2ac>)
 800127a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800127e:	6013      	str	r3, [r2, #0]
 8001280:	4b81      	ldr	r3, [pc, #516]	; (8001488 <HAL_RCC_OscConfig+0x2ac>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a80      	ldr	r2, [pc, #512]	; (8001488 <HAL_RCC_OscConfig+0x2ac>)
 8001286:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800128a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d013      	beq.n	80012bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001294:	f7ff fcfe 	bl	8000c94 <HAL_GetTick>
 8001298:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800129a:	e008      	b.n	80012ae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800129c:	f7ff fcfa 	bl	8000c94 <HAL_GetTick>
 80012a0:	4602      	mov	r2, r0
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	1ad3      	subs	r3, r2, r3
 80012a6:	2b64      	cmp	r3, #100	; 0x64
 80012a8:	d901      	bls.n	80012ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80012aa:	2303      	movs	r3, #3
 80012ac:	e204      	b.n	80016b8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012ae:	4b76      	ldr	r3, [pc, #472]	; (8001488 <HAL_RCC_OscConfig+0x2ac>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d0f0      	beq.n	800129c <HAL_RCC_OscConfig+0xc0>
 80012ba:	e014      	b.n	80012e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012bc:	f7ff fcea 	bl	8000c94 <HAL_GetTick>
 80012c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012c2:	e008      	b.n	80012d6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012c4:	f7ff fce6 	bl	8000c94 <HAL_GetTick>
 80012c8:	4602      	mov	r2, r0
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	1ad3      	subs	r3, r2, r3
 80012ce:	2b64      	cmp	r3, #100	; 0x64
 80012d0:	d901      	bls.n	80012d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80012d2:	2303      	movs	r3, #3
 80012d4:	e1f0      	b.n	80016b8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012d6:	4b6c      	ldr	r3, [pc, #432]	; (8001488 <HAL_RCC_OscConfig+0x2ac>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d1f0      	bne.n	80012c4 <HAL_RCC_OscConfig+0xe8>
 80012e2:	e000      	b.n	80012e6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f003 0302 	and.w	r3, r3, #2
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d063      	beq.n	80013ba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80012f2:	4b65      	ldr	r3, [pc, #404]	; (8001488 <HAL_RCC_OscConfig+0x2ac>)
 80012f4:	689b      	ldr	r3, [r3, #8]
 80012f6:	f003 030c 	and.w	r3, r3, #12
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d00b      	beq.n	8001316 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012fe:	4b62      	ldr	r3, [pc, #392]	; (8001488 <HAL_RCC_OscConfig+0x2ac>)
 8001300:	689b      	ldr	r3, [r3, #8]
 8001302:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001306:	2b08      	cmp	r3, #8
 8001308:	d11c      	bne.n	8001344 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800130a:	4b5f      	ldr	r3, [pc, #380]	; (8001488 <HAL_RCC_OscConfig+0x2ac>)
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001312:	2b00      	cmp	r3, #0
 8001314:	d116      	bne.n	8001344 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001316:	4b5c      	ldr	r3, [pc, #368]	; (8001488 <HAL_RCC_OscConfig+0x2ac>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f003 0302 	and.w	r3, r3, #2
 800131e:	2b00      	cmp	r3, #0
 8001320:	d005      	beq.n	800132e <HAL_RCC_OscConfig+0x152>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	68db      	ldr	r3, [r3, #12]
 8001326:	2b01      	cmp	r3, #1
 8001328:	d001      	beq.n	800132e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800132a:	2301      	movs	r3, #1
 800132c:	e1c4      	b.n	80016b8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800132e:	4b56      	ldr	r3, [pc, #344]	; (8001488 <HAL_RCC_OscConfig+0x2ac>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	691b      	ldr	r3, [r3, #16]
 800133a:	00db      	lsls	r3, r3, #3
 800133c:	4952      	ldr	r1, [pc, #328]	; (8001488 <HAL_RCC_OscConfig+0x2ac>)
 800133e:	4313      	orrs	r3, r2
 8001340:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001342:	e03a      	b.n	80013ba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	68db      	ldr	r3, [r3, #12]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d020      	beq.n	800138e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800134c:	4b4f      	ldr	r3, [pc, #316]	; (800148c <HAL_RCC_OscConfig+0x2b0>)
 800134e:	2201      	movs	r2, #1
 8001350:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001352:	f7ff fc9f 	bl	8000c94 <HAL_GetTick>
 8001356:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001358:	e008      	b.n	800136c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800135a:	f7ff fc9b 	bl	8000c94 <HAL_GetTick>
 800135e:	4602      	mov	r2, r0
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	1ad3      	subs	r3, r2, r3
 8001364:	2b02      	cmp	r3, #2
 8001366:	d901      	bls.n	800136c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001368:	2303      	movs	r3, #3
 800136a:	e1a5      	b.n	80016b8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800136c:	4b46      	ldr	r3, [pc, #280]	; (8001488 <HAL_RCC_OscConfig+0x2ac>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f003 0302 	and.w	r3, r3, #2
 8001374:	2b00      	cmp	r3, #0
 8001376:	d0f0      	beq.n	800135a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001378:	4b43      	ldr	r3, [pc, #268]	; (8001488 <HAL_RCC_OscConfig+0x2ac>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	691b      	ldr	r3, [r3, #16]
 8001384:	00db      	lsls	r3, r3, #3
 8001386:	4940      	ldr	r1, [pc, #256]	; (8001488 <HAL_RCC_OscConfig+0x2ac>)
 8001388:	4313      	orrs	r3, r2
 800138a:	600b      	str	r3, [r1, #0]
 800138c:	e015      	b.n	80013ba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800138e:	4b3f      	ldr	r3, [pc, #252]	; (800148c <HAL_RCC_OscConfig+0x2b0>)
 8001390:	2200      	movs	r2, #0
 8001392:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001394:	f7ff fc7e 	bl	8000c94 <HAL_GetTick>
 8001398:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800139a:	e008      	b.n	80013ae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800139c:	f7ff fc7a 	bl	8000c94 <HAL_GetTick>
 80013a0:	4602      	mov	r2, r0
 80013a2:	693b      	ldr	r3, [r7, #16]
 80013a4:	1ad3      	subs	r3, r2, r3
 80013a6:	2b02      	cmp	r3, #2
 80013a8:	d901      	bls.n	80013ae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80013aa:	2303      	movs	r3, #3
 80013ac:	e184      	b.n	80016b8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013ae:	4b36      	ldr	r3, [pc, #216]	; (8001488 <HAL_RCC_OscConfig+0x2ac>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f003 0302 	and.w	r3, r3, #2
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d1f0      	bne.n	800139c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f003 0308 	and.w	r3, r3, #8
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d030      	beq.n	8001428 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	695b      	ldr	r3, [r3, #20]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d016      	beq.n	80013fc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013ce:	4b30      	ldr	r3, [pc, #192]	; (8001490 <HAL_RCC_OscConfig+0x2b4>)
 80013d0:	2201      	movs	r2, #1
 80013d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013d4:	f7ff fc5e 	bl	8000c94 <HAL_GetTick>
 80013d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013da:	e008      	b.n	80013ee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013dc:	f7ff fc5a 	bl	8000c94 <HAL_GetTick>
 80013e0:	4602      	mov	r2, r0
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	1ad3      	subs	r3, r2, r3
 80013e6:	2b02      	cmp	r3, #2
 80013e8:	d901      	bls.n	80013ee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80013ea:	2303      	movs	r3, #3
 80013ec:	e164      	b.n	80016b8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013ee:	4b26      	ldr	r3, [pc, #152]	; (8001488 <HAL_RCC_OscConfig+0x2ac>)
 80013f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013f2:	f003 0302 	and.w	r3, r3, #2
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d0f0      	beq.n	80013dc <HAL_RCC_OscConfig+0x200>
 80013fa:	e015      	b.n	8001428 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013fc:	4b24      	ldr	r3, [pc, #144]	; (8001490 <HAL_RCC_OscConfig+0x2b4>)
 80013fe:	2200      	movs	r2, #0
 8001400:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001402:	f7ff fc47 	bl	8000c94 <HAL_GetTick>
 8001406:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001408:	e008      	b.n	800141c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800140a:	f7ff fc43 	bl	8000c94 <HAL_GetTick>
 800140e:	4602      	mov	r2, r0
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	1ad3      	subs	r3, r2, r3
 8001414:	2b02      	cmp	r3, #2
 8001416:	d901      	bls.n	800141c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001418:	2303      	movs	r3, #3
 800141a:	e14d      	b.n	80016b8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800141c:	4b1a      	ldr	r3, [pc, #104]	; (8001488 <HAL_RCC_OscConfig+0x2ac>)
 800141e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001420:	f003 0302 	and.w	r3, r3, #2
 8001424:	2b00      	cmp	r3, #0
 8001426:	d1f0      	bne.n	800140a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f003 0304 	and.w	r3, r3, #4
 8001430:	2b00      	cmp	r3, #0
 8001432:	f000 80a0 	beq.w	8001576 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001436:	2300      	movs	r3, #0
 8001438:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800143a:	4b13      	ldr	r3, [pc, #76]	; (8001488 <HAL_RCC_OscConfig+0x2ac>)
 800143c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001442:	2b00      	cmp	r3, #0
 8001444:	d10f      	bne.n	8001466 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001446:	2300      	movs	r3, #0
 8001448:	60bb      	str	r3, [r7, #8]
 800144a:	4b0f      	ldr	r3, [pc, #60]	; (8001488 <HAL_RCC_OscConfig+0x2ac>)
 800144c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144e:	4a0e      	ldr	r2, [pc, #56]	; (8001488 <HAL_RCC_OscConfig+0x2ac>)
 8001450:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001454:	6413      	str	r3, [r2, #64]	; 0x40
 8001456:	4b0c      	ldr	r3, [pc, #48]	; (8001488 <HAL_RCC_OscConfig+0x2ac>)
 8001458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800145e:	60bb      	str	r3, [r7, #8]
 8001460:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001462:	2301      	movs	r3, #1
 8001464:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001466:	4b0b      	ldr	r3, [pc, #44]	; (8001494 <HAL_RCC_OscConfig+0x2b8>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800146e:	2b00      	cmp	r3, #0
 8001470:	d121      	bne.n	80014b6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001472:	4b08      	ldr	r3, [pc, #32]	; (8001494 <HAL_RCC_OscConfig+0x2b8>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4a07      	ldr	r2, [pc, #28]	; (8001494 <HAL_RCC_OscConfig+0x2b8>)
 8001478:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800147c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800147e:	f7ff fc09 	bl	8000c94 <HAL_GetTick>
 8001482:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001484:	e011      	b.n	80014aa <HAL_RCC_OscConfig+0x2ce>
 8001486:	bf00      	nop
 8001488:	40023800 	.word	0x40023800
 800148c:	42470000 	.word	0x42470000
 8001490:	42470e80 	.word	0x42470e80
 8001494:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001498:	f7ff fbfc 	bl	8000c94 <HAL_GetTick>
 800149c:	4602      	mov	r2, r0
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	1ad3      	subs	r3, r2, r3
 80014a2:	2b02      	cmp	r3, #2
 80014a4:	d901      	bls.n	80014aa <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80014a6:	2303      	movs	r3, #3
 80014a8:	e106      	b.n	80016b8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014aa:	4b85      	ldr	r3, [pc, #532]	; (80016c0 <HAL_RCC_OscConfig+0x4e4>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d0f0      	beq.n	8001498 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	689b      	ldr	r3, [r3, #8]
 80014ba:	2b01      	cmp	r3, #1
 80014bc:	d106      	bne.n	80014cc <HAL_RCC_OscConfig+0x2f0>
 80014be:	4b81      	ldr	r3, [pc, #516]	; (80016c4 <HAL_RCC_OscConfig+0x4e8>)
 80014c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014c2:	4a80      	ldr	r2, [pc, #512]	; (80016c4 <HAL_RCC_OscConfig+0x4e8>)
 80014c4:	f043 0301 	orr.w	r3, r3, #1
 80014c8:	6713      	str	r3, [r2, #112]	; 0x70
 80014ca:	e01c      	b.n	8001506 <HAL_RCC_OscConfig+0x32a>
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	689b      	ldr	r3, [r3, #8]
 80014d0:	2b05      	cmp	r3, #5
 80014d2:	d10c      	bne.n	80014ee <HAL_RCC_OscConfig+0x312>
 80014d4:	4b7b      	ldr	r3, [pc, #492]	; (80016c4 <HAL_RCC_OscConfig+0x4e8>)
 80014d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014d8:	4a7a      	ldr	r2, [pc, #488]	; (80016c4 <HAL_RCC_OscConfig+0x4e8>)
 80014da:	f043 0304 	orr.w	r3, r3, #4
 80014de:	6713      	str	r3, [r2, #112]	; 0x70
 80014e0:	4b78      	ldr	r3, [pc, #480]	; (80016c4 <HAL_RCC_OscConfig+0x4e8>)
 80014e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014e4:	4a77      	ldr	r2, [pc, #476]	; (80016c4 <HAL_RCC_OscConfig+0x4e8>)
 80014e6:	f043 0301 	orr.w	r3, r3, #1
 80014ea:	6713      	str	r3, [r2, #112]	; 0x70
 80014ec:	e00b      	b.n	8001506 <HAL_RCC_OscConfig+0x32a>
 80014ee:	4b75      	ldr	r3, [pc, #468]	; (80016c4 <HAL_RCC_OscConfig+0x4e8>)
 80014f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014f2:	4a74      	ldr	r2, [pc, #464]	; (80016c4 <HAL_RCC_OscConfig+0x4e8>)
 80014f4:	f023 0301 	bic.w	r3, r3, #1
 80014f8:	6713      	str	r3, [r2, #112]	; 0x70
 80014fa:	4b72      	ldr	r3, [pc, #456]	; (80016c4 <HAL_RCC_OscConfig+0x4e8>)
 80014fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014fe:	4a71      	ldr	r2, [pc, #452]	; (80016c4 <HAL_RCC_OscConfig+0x4e8>)
 8001500:	f023 0304 	bic.w	r3, r3, #4
 8001504:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	689b      	ldr	r3, [r3, #8]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d015      	beq.n	800153a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800150e:	f7ff fbc1 	bl	8000c94 <HAL_GetTick>
 8001512:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001514:	e00a      	b.n	800152c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001516:	f7ff fbbd 	bl	8000c94 <HAL_GetTick>
 800151a:	4602      	mov	r2, r0
 800151c:	693b      	ldr	r3, [r7, #16]
 800151e:	1ad3      	subs	r3, r2, r3
 8001520:	f241 3288 	movw	r2, #5000	; 0x1388
 8001524:	4293      	cmp	r3, r2
 8001526:	d901      	bls.n	800152c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001528:	2303      	movs	r3, #3
 800152a:	e0c5      	b.n	80016b8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800152c:	4b65      	ldr	r3, [pc, #404]	; (80016c4 <HAL_RCC_OscConfig+0x4e8>)
 800152e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001530:	f003 0302 	and.w	r3, r3, #2
 8001534:	2b00      	cmp	r3, #0
 8001536:	d0ee      	beq.n	8001516 <HAL_RCC_OscConfig+0x33a>
 8001538:	e014      	b.n	8001564 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800153a:	f7ff fbab 	bl	8000c94 <HAL_GetTick>
 800153e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001540:	e00a      	b.n	8001558 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001542:	f7ff fba7 	bl	8000c94 <HAL_GetTick>
 8001546:	4602      	mov	r2, r0
 8001548:	693b      	ldr	r3, [r7, #16]
 800154a:	1ad3      	subs	r3, r2, r3
 800154c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001550:	4293      	cmp	r3, r2
 8001552:	d901      	bls.n	8001558 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001554:	2303      	movs	r3, #3
 8001556:	e0af      	b.n	80016b8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001558:	4b5a      	ldr	r3, [pc, #360]	; (80016c4 <HAL_RCC_OscConfig+0x4e8>)
 800155a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800155c:	f003 0302 	and.w	r3, r3, #2
 8001560:	2b00      	cmp	r3, #0
 8001562:	d1ee      	bne.n	8001542 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001564:	7dfb      	ldrb	r3, [r7, #23]
 8001566:	2b01      	cmp	r3, #1
 8001568:	d105      	bne.n	8001576 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800156a:	4b56      	ldr	r3, [pc, #344]	; (80016c4 <HAL_RCC_OscConfig+0x4e8>)
 800156c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156e:	4a55      	ldr	r2, [pc, #340]	; (80016c4 <HAL_RCC_OscConfig+0x4e8>)
 8001570:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001574:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	699b      	ldr	r3, [r3, #24]
 800157a:	2b00      	cmp	r3, #0
 800157c:	f000 809b 	beq.w	80016b6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001580:	4b50      	ldr	r3, [pc, #320]	; (80016c4 <HAL_RCC_OscConfig+0x4e8>)
 8001582:	689b      	ldr	r3, [r3, #8]
 8001584:	f003 030c 	and.w	r3, r3, #12
 8001588:	2b08      	cmp	r3, #8
 800158a:	d05c      	beq.n	8001646 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	699b      	ldr	r3, [r3, #24]
 8001590:	2b02      	cmp	r3, #2
 8001592:	d141      	bne.n	8001618 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001594:	4b4c      	ldr	r3, [pc, #304]	; (80016c8 <HAL_RCC_OscConfig+0x4ec>)
 8001596:	2200      	movs	r2, #0
 8001598:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800159a:	f7ff fb7b 	bl	8000c94 <HAL_GetTick>
 800159e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015a0:	e008      	b.n	80015b4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015a2:	f7ff fb77 	bl	8000c94 <HAL_GetTick>
 80015a6:	4602      	mov	r2, r0
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	1ad3      	subs	r3, r2, r3
 80015ac:	2b02      	cmp	r3, #2
 80015ae:	d901      	bls.n	80015b4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80015b0:	2303      	movs	r3, #3
 80015b2:	e081      	b.n	80016b8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015b4:	4b43      	ldr	r3, [pc, #268]	; (80016c4 <HAL_RCC_OscConfig+0x4e8>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d1f0      	bne.n	80015a2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	69da      	ldr	r2, [r3, #28]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6a1b      	ldr	r3, [r3, #32]
 80015c8:	431a      	orrs	r2, r3
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ce:	019b      	lsls	r3, r3, #6
 80015d0:	431a      	orrs	r2, r3
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015d6:	085b      	lsrs	r3, r3, #1
 80015d8:	3b01      	subs	r3, #1
 80015da:	041b      	lsls	r3, r3, #16
 80015dc:	431a      	orrs	r2, r3
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015e2:	061b      	lsls	r3, r3, #24
 80015e4:	4937      	ldr	r1, [pc, #220]	; (80016c4 <HAL_RCC_OscConfig+0x4e8>)
 80015e6:	4313      	orrs	r3, r2
 80015e8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015ea:	4b37      	ldr	r3, [pc, #220]	; (80016c8 <HAL_RCC_OscConfig+0x4ec>)
 80015ec:	2201      	movs	r2, #1
 80015ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015f0:	f7ff fb50 	bl	8000c94 <HAL_GetTick>
 80015f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015f6:	e008      	b.n	800160a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015f8:	f7ff fb4c 	bl	8000c94 <HAL_GetTick>
 80015fc:	4602      	mov	r2, r0
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	1ad3      	subs	r3, r2, r3
 8001602:	2b02      	cmp	r3, #2
 8001604:	d901      	bls.n	800160a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001606:	2303      	movs	r3, #3
 8001608:	e056      	b.n	80016b8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800160a:	4b2e      	ldr	r3, [pc, #184]	; (80016c4 <HAL_RCC_OscConfig+0x4e8>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001612:	2b00      	cmp	r3, #0
 8001614:	d0f0      	beq.n	80015f8 <HAL_RCC_OscConfig+0x41c>
 8001616:	e04e      	b.n	80016b6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001618:	4b2b      	ldr	r3, [pc, #172]	; (80016c8 <HAL_RCC_OscConfig+0x4ec>)
 800161a:	2200      	movs	r2, #0
 800161c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800161e:	f7ff fb39 	bl	8000c94 <HAL_GetTick>
 8001622:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001624:	e008      	b.n	8001638 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001626:	f7ff fb35 	bl	8000c94 <HAL_GetTick>
 800162a:	4602      	mov	r2, r0
 800162c:	693b      	ldr	r3, [r7, #16]
 800162e:	1ad3      	subs	r3, r2, r3
 8001630:	2b02      	cmp	r3, #2
 8001632:	d901      	bls.n	8001638 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001634:	2303      	movs	r3, #3
 8001636:	e03f      	b.n	80016b8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001638:	4b22      	ldr	r3, [pc, #136]	; (80016c4 <HAL_RCC_OscConfig+0x4e8>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001640:	2b00      	cmp	r3, #0
 8001642:	d1f0      	bne.n	8001626 <HAL_RCC_OscConfig+0x44a>
 8001644:	e037      	b.n	80016b6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	699b      	ldr	r3, [r3, #24]
 800164a:	2b01      	cmp	r3, #1
 800164c:	d101      	bne.n	8001652 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800164e:	2301      	movs	r3, #1
 8001650:	e032      	b.n	80016b8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001652:	4b1c      	ldr	r3, [pc, #112]	; (80016c4 <HAL_RCC_OscConfig+0x4e8>)
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	699b      	ldr	r3, [r3, #24]
 800165c:	2b01      	cmp	r3, #1
 800165e:	d028      	beq.n	80016b2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800166a:	429a      	cmp	r2, r3
 800166c:	d121      	bne.n	80016b2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001678:	429a      	cmp	r2, r3
 800167a:	d11a      	bne.n	80016b2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800167c:	68fa      	ldr	r2, [r7, #12]
 800167e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001682:	4013      	ands	r3, r2
 8001684:	687a      	ldr	r2, [r7, #4]
 8001686:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001688:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800168a:	4293      	cmp	r3, r2
 800168c:	d111      	bne.n	80016b2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001698:	085b      	lsrs	r3, r3, #1
 800169a:	3b01      	subs	r3, #1
 800169c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800169e:	429a      	cmp	r2, r3
 80016a0:	d107      	bne.n	80016b2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ac:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016ae:	429a      	cmp	r2, r3
 80016b0:	d001      	beq.n	80016b6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	e000      	b.n	80016b8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80016b6:	2300      	movs	r3, #0
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	3718      	adds	r7, #24
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	40007000 	.word	0x40007000
 80016c4:	40023800 	.word	0x40023800
 80016c8:	42470060 	.word	0x42470060

080016cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b084      	sub	sp, #16
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
 80016d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d101      	bne.n	80016e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016dc:	2301      	movs	r3, #1
 80016de:	e0cc      	b.n	800187a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80016e0:	4b68      	ldr	r3, [pc, #416]	; (8001884 <HAL_RCC_ClockConfig+0x1b8>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f003 0307 	and.w	r3, r3, #7
 80016e8:	683a      	ldr	r2, [r7, #0]
 80016ea:	429a      	cmp	r2, r3
 80016ec:	d90c      	bls.n	8001708 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016ee:	4b65      	ldr	r3, [pc, #404]	; (8001884 <HAL_RCC_ClockConfig+0x1b8>)
 80016f0:	683a      	ldr	r2, [r7, #0]
 80016f2:	b2d2      	uxtb	r2, r2
 80016f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016f6:	4b63      	ldr	r3, [pc, #396]	; (8001884 <HAL_RCC_ClockConfig+0x1b8>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f003 0307 	and.w	r3, r3, #7
 80016fe:	683a      	ldr	r2, [r7, #0]
 8001700:	429a      	cmp	r2, r3
 8001702:	d001      	beq.n	8001708 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001704:	2301      	movs	r3, #1
 8001706:	e0b8      	b.n	800187a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f003 0302 	and.w	r3, r3, #2
 8001710:	2b00      	cmp	r3, #0
 8001712:	d020      	beq.n	8001756 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f003 0304 	and.w	r3, r3, #4
 800171c:	2b00      	cmp	r3, #0
 800171e:	d005      	beq.n	800172c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001720:	4b59      	ldr	r3, [pc, #356]	; (8001888 <HAL_RCC_ClockConfig+0x1bc>)
 8001722:	689b      	ldr	r3, [r3, #8]
 8001724:	4a58      	ldr	r2, [pc, #352]	; (8001888 <HAL_RCC_ClockConfig+0x1bc>)
 8001726:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800172a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f003 0308 	and.w	r3, r3, #8
 8001734:	2b00      	cmp	r3, #0
 8001736:	d005      	beq.n	8001744 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001738:	4b53      	ldr	r3, [pc, #332]	; (8001888 <HAL_RCC_ClockConfig+0x1bc>)
 800173a:	689b      	ldr	r3, [r3, #8]
 800173c:	4a52      	ldr	r2, [pc, #328]	; (8001888 <HAL_RCC_ClockConfig+0x1bc>)
 800173e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001742:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001744:	4b50      	ldr	r3, [pc, #320]	; (8001888 <HAL_RCC_ClockConfig+0x1bc>)
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	689b      	ldr	r3, [r3, #8]
 8001750:	494d      	ldr	r1, [pc, #308]	; (8001888 <HAL_RCC_ClockConfig+0x1bc>)
 8001752:	4313      	orrs	r3, r2
 8001754:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 0301 	and.w	r3, r3, #1
 800175e:	2b00      	cmp	r3, #0
 8001760:	d044      	beq.n	80017ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	2b01      	cmp	r3, #1
 8001768:	d107      	bne.n	800177a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800176a:	4b47      	ldr	r3, [pc, #284]	; (8001888 <HAL_RCC_ClockConfig+0x1bc>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001772:	2b00      	cmp	r3, #0
 8001774:	d119      	bne.n	80017aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	e07f      	b.n	800187a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	2b02      	cmp	r3, #2
 8001780:	d003      	beq.n	800178a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001786:	2b03      	cmp	r3, #3
 8001788:	d107      	bne.n	800179a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800178a:	4b3f      	ldr	r3, [pc, #252]	; (8001888 <HAL_RCC_ClockConfig+0x1bc>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001792:	2b00      	cmp	r3, #0
 8001794:	d109      	bne.n	80017aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	e06f      	b.n	800187a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800179a:	4b3b      	ldr	r3, [pc, #236]	; (8001888 <HAL_RCC_ClockConfig+0x1bc>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f003 0302 	and.w	r3, r3, #2
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d101      	bne.n	80017aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
 80017a8:	e067      	b.n	800187a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017aa:	4b37      	ldr	r3, [pc, #220]	; (8001888 <HAL_RCC_ClockConfig+0x1bc>)
 80017ac:	689b      	ldr	r3, [r3, #8]
 80017ae:	f023 0203 	bic.w	r2, r3, #3
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	4934      	ldr	r1, [pc, #208]	; (8001888 <HAL_RCC_ClockConfig+0x1bc>)
 80017b8:	4313      	orrs	r3, r2
 80017ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017bc:	f7ff fa6a 	bl	8000c94 <HAL_GetTick>
 80017c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017c2:	e00a      	b.n	80017da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017c4:	f7ff fa66 	bl	8000c94 <HAL_GetTick>
 80017c8:	4602      	mov	r2, r0
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	1ad3      	subs	r3, r2, r3
 80017ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d901      	bls.n	80017da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017d6:	2303      	movs	r3, #3
 80017d8:	e04f      	b.n	800187a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017da:	4b2b      	ldr	r3, [pc, #172]	; (8001888 <HAL_RCC_ClockConfig+0x1bc>)
 80017dc:	689b      	ldr	r3, [r3, #8]
 80017de:	f003 020c 	and.w	r2, r3, #12
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	009b      	lsls	r3, r3, #2
 80017e8:	429a      	cmp	r2, r3
 80017ea:	d1eb      	bne.n	80017c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80017ec:	4b25      	ldr	r3, [pc, #148]	; (8001884 <HAL_RCC_ClockConfig+0x1b8>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f003 0307 	and.w	r3, r3, #7
 80017f4:	683a      	ldr	r2, [r7, #0]
 80017f6:	429a      	cmp	r2, r3
 80017f8:	d20c      	bcs.n	8001814 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017fa:	4b22      	ldr	r3, [pc, #136]	; (8001884 <HAL_RCC_ClockConfig+0x1b8>)
 80017fc:	683a      	ldr	r2, [r7, #0]
 80017fe:	b2d2      	uxtb	r2, r2
 8001800:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001802:	4b20      	ldr	r3, [pc, #128]	; (8001884 <HAL_RCC_ClockConfig+0x1b8>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f003 0307 	and.w	r3, r3, #7
 800180a:	683a      	ldr	r2, [r7, #0]
 800180c:	429a      	cmp	r2, r3
 800180e:	d001      	beq.n	8001814 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001810:	2301      	movs	r3, #1
 8001812:	e032      	b.n	800187a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f003 0304 	and.w	r3, r3, #4
 800181c:	2b00      	cmp	r3, #0
 800181e:	d008      	beq.n	8001832 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001820:	4b19      	ldr	r3, [pc, #100]	; (8001888 <HAL_RCC_ClockConfig+0x1bc>)
 8001822:	689b      	ldr	r3, [r3, #8]
 8001824:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	68db      	ldr	r3, [r3, #12]
 800182c:	4916      	ldr	r1, [pc, #88]	; (8001888 <HAL_RCC_ClockConfig+0x1bc>)
 800182e:	4313      	orrs	r3, r2
 8001830:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f003 0308 	and.w	r3, r3, #8
 800183a:	2b00      	cmp	r3, #0
 800183c:	d009      	beq.n	8001852 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800183e:	4b12      	ldr	r3, [pc, #72]	; (8001888 <HAL_RCC_ClockConfig+0x1bc>)
 8001840:	689b      	ldr	r3, [r3, #8]
 8001842:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	691b      	ldr	r3, [r3, #16]
 800184a:	00db      	lsls	r3, r3, #3
 800184c:	490e      	ldr	r1, [pc, #56]	; (8001888 <HAL_RCC_ClockConfig+0x1bc>)
 800184e:	4313      	orrs	r3, r2
 8001850:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001852:	f000 f821 	bl	8001898 <HAL_RCC_GetSysClockFreq>
 8001856:	4602      	mov	r2, r0
 8001858:	4b0b      	ldr	r3, [pc, #44]	; (8001888 <HAL_RCC_ClockConfig+0x1bc>)
 800185a:	689b      	ldr	r3, [r3, #8]
 800185c:	091b      	lsrs	r3, r3, #4
 800185e:	f003 030f 	and.w	r3, r3, #15
 8001862:	490a      	ldr	r1, [pc, #40]	; (800188c <HAL_RCC_ClockConfig+0x1c0>)
 8001864:	5ccb      	ldrb	r3, [r1, r3]
 8001866:	fa22 f303 	lsr.w	r3, r2, r3
 800186a:	4a09      	ldr	r2, [pc, #36]	; (8001890 <HAL_RCC_ClockConfig+0x1c4>)
 800186c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800186e:	4b09      	ldr	r3, [pc, #36]	; (8001894 <HAL_RCC_ClockConfig+0x1c8>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4618      	mov	r0, r3
 8001874:	f7ff f88c 	bl	8000990 <HAL_InitTick>

  return HAL_OK;
 8001878:	2300      	movs	r3, #0
}
 800187a:	4618      	mov	r0, r3
 800187c:	3710      	adds	r7, #16
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	40023c00 	.word	0x40023c00
 8001888:	40023800 	.word	0x40023800
 800188c:	08004d84 	.word	0x08004d84
 8001890:	20000000 	.word	0x20000000
 8001894:	20000004 	.word	0x20000004

08001898 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001898:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800189c:	b084      	sub	sp, #16
 800189e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80018a0:	2300      	movs	r3, #0
 80018a2:	607b      	str	r3, [r7, #4]
 80018a4:	2300      	movs	r3, #0
 80018a6:	60fb      	str	r3, [r7, #12]
 80018a8:	2300      	movs	r3, #0
 80018aa:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80018ac:	2300      	movs	r3, #0
 80018ae:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80018b0:	4b67      	ldr	r3, [pc, #412]	; (8001a50 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	f003 030c 	and.w	r3, r3, #12
 80018b8:	2b08      	cmp	r3, #8
 80018ba:	d00d      	beq.n	80018d8 <HAL_RCC_GetSysClockFreq+0x40>
 80018bc:	2b08      	cmp	r3, #8
 80018be:	f200 80bd 	bhi.w	8001a3c <HAL_RCC_GetSysClockFreq+0x1a4>
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d002      	beq.n	80018cc <HAL_RCC_GetSysClockFreq+0x34>
 80018c6:	2b04      	cmp	r3, #4
 80018c8:	d003      	beq.n	80018d2 <HAL_RCC_GetSysClockFreq+0x3a>
 80018ca:	e0b7      	b.n	8001a3c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80018cc:	4b61      	ldr	r3, [pc, #388]	; (8001a54 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80018ce:	60bb      	str	r3, [r7, #8]
       break;
 80018d0:	e0b7      	b.n	8001a42 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80018d2:	4b61      	ldr	r3, [pc, #388]	; (8001a58 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80018d4:	60bb      	str	r3, [r7, #8]
      break;
 80018d6:	e0b4      	b.n	8001a42 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80018d8:	4b5d      	ldr	r3, [pc, #372]	; (8001a50 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80018e0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80018e2:	4b5b      	ldr	r3, [pc, #364]	; (8001a50 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d04d      	beq.n	800198a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018ee:	4b58      	ldr	r3, [pc, #352]	; (8001a50 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	099b      	lsrs	r3, r3, #6
 80018f4:	461a      	mov	r2, r3
 80018f6:	f04f 0300 	mov.w	r3, #0
 80018fa:	f240 10ff 	movw	r0, #511	; 0x1ff
 80018fe:	f04f 0100 	mov.w	r1, #0
 8001902:	ea02 0800 	and.w	r8, r2, r0
 8001906:	ea03 0901 	and.w	r9, r3, r1
 800190a:	4640      	mov	r0, r8
 800190c:	4649      	mov	r1, r9
 800190e:	f04f 0200 	mov.w	r2, #0
 8001912:	f04f 0300 	mov.w	r3, #0
 8001916:	014b      	lsls	r3, r1, #5
 8001918:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800191c:	0142      	lsls	r2, r0, #5
 800191e:	4610      	mov	r0, r2
 8001920:	4619      	mov	r1, r3
 8001922:	ebb0 0008 	subs.w	r0, r0, r8
 8001926:	eb61 0109 	sbc.w	r1, r1, r9
 800192a:	f04f 0200 	mov.w	r2, #0
 800192e:	f04f 0300 	mov.w	r3, #0
 8001932:	018b      	lsls	r3, r1, #6
 8001934:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001938:	0182      	lsls	r2, r0, #6
 800193a:	1a12      	subs	r2, r2, r0
 800193c:	eb63 0301 	sbc.w	r3, r3, r1
 8001940:	f04f 0000 	mov.w	r0, #0
 8001944:	f04f 0100 	mov.w	r1, #0
 8001948:	00d9      	lsls	r1, r3, #3
 800194a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800194e:	00d0      	lsls	r0, r2, #3
 8001950:	4602      	mov	r2, r0
 8001952:	460b      	mov	r3, r1
 8001954:	eb12 0208 	adds.w	r2, r2, r8
 8001958:	eb43 0309 	adc.w	r3, r3, r9
 800195c:	f04f 0000 	mov.w	r0, #0
 8001960:	f04f 0100 	mov.w	r1, #0
 8001964:	0259      	lsls	r1, r3, #9
 8001966:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800196a:	0250      	lsls	r0, r2, #9
 800196c:	4602      	mov	r2, r0
 800196e:	460b      	mov	r3, r1
 8001970:	4610      	mov	r0, r2
 8001972:	4619      	mov	r1, r3
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	461a      	mov	r2, r3
 8001978:	f04f 0300 	mov.w	r3, #0
 800197c:	f7fe fc28 	bl	80001d0 <__aeabi_uldivmod>
 8001980:	4602      	mov	r2, r0
 8001982:	460b      	mov	r3, r1
 8001984:	4613      	mov	r3, r2
 8001986:	60fb      	str	r3, [r7, #12]
 8001988:	e04a      	b.n	8001a20 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800198a:	4b31      	ldr	r3, [pc, #196]	; (8001a50 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	099b      	lsrs	r3, r3, #6
 8001990:	461a      	mov	r2, r3
 8001992:	f04f 0300 	mov.w	r3, #0
 8001996:	f240 10ff 	movw	r0, #511	; 0x1ff
 800199a:	f04f 0100 	mov.w	r1, #0
 800199e:	ea02 0400 	and.w	r4, r2, r0
 80019a2:	ea03 0501 	and.w	r5, r3, r1
 80019a6:	4620      	mov	r0, r4
 80019a8:	4629      	mov	r1, r5
 80019aa:	f04f 0200 	mov.w	r2, #0
 80019ae:	f04f 0300 	mov.w	r3, #0
 80019b2:	014b      	lsls	r3, r1, #5
 80019b4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80019b8:	0142      	lsls	r2, r0, #5
 80019ba:	4610      	mov	r0, r2
 80019bc:	4619      	mov	r1, r3
 80019be:	1b00      	subs	r0, r0, r4
 80019c0:	eb61 0105 	sbc.w	r1, r1, r5
 80019c4:	f04f 0200 	mov.w	r2, #0
 80019c8:	f04f 0300 	mov.w	r3, #0
 80019cc:	018b      	lsls	r3, r1, #6
 80019ce:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80019d2:	0182      	lsls	r2, r0, #6
 80019d4:	1a12      	subs	r2, r2, r0
 80019d6:	eb63 0301 	sbc.w	r3, r3, r1
 80019da:	f04f 0000 	mov.w	r0, #0
 80019de:	f04f 0100 	mov.w	r1, #0
 80019e2:	00d9      	lsls	r1, r3, #3
 80019e4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80019e8:	00d0      	lsls	r0, r2, #3
 80019ea:	4602      	mov	r2, r0
 80019ec:	460b      	mov	r3, r1
 80019ee:	1912      	adds	r2, r2, r4
 80019f0:	eb45 0303 	adc.w	r3, r5, r3
 80019f4:	f04f 0000 	mov.w	r0, #0
 80019f8:	f04f 0100 	mov.w	r1, #0
 80019fc:	0299      	lsls	r1, r3, #10
 80019fe:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001a02:	0290      	lsls	r0, r2, #10
 8001a04:	4602      	mov	r2, r0
 8001a06:	460b      	mov	r3, r1
 8001a08:	4610      	mov	r0, r2
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	461a      	mov	r2, r3
 8001a10:	f04f 0300 	mov.w	r3, #0
 8001a14:	f7fe fbdc 	bl	80001d0 <__aeabi_uldivmod>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	460b      	mov	r3, r1
 8001a1c:	4613      	mov	r3, r2
 8001a1e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001a20:	4b0b      	ldr	r3, [pc, #44]	; (8001a50 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	0c1b      	lsrs	r3, r3, #16
 8001a26:	f003 0303 	and.w	r3, r3, #3
 8001a2a:	3301      	adds	r3, #1
 8001a2c:	005b      	lsls	r3, r3, #1
 8001a2e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001a30:	68fa      	ldr	r2, [r7, #12]
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a38:	60bb      	str	r3, [r7, #8]
      break;
 8001a3a:	e002      	b.n	8001a42 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a3c:	4b05      	ldr	r3, [pc, #20]	; (8001a54 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001a3e:	60bb      	str	r3, [r7, #8]
      break;
 8001a40:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a42:	68bb      	ldr	r3, [r7, #8]
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	3710      	adds	r7, #16
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001a4e:	bf00      	nop
 8001a50:	40023800 	.word	0x40023800
 8001a54:	00f42400 	.word	0x00f42400
 8001a58:	007a1200 	.word	0x007a1200

08001a5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a60:	4b03      	ldr	r3, [pc, #12]	; (8001a70 <HAL_RCC_GetHCLKFreq+0x14>)
 8001a62:	681b      	ldr	r3, [r3, #0]
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr
 8001a6e:	bf00      	nop
 8001a70:	20000000 	.word	0x20000000

08001a74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001a78:	f7ff fff0 	bl	8001a5c <HAL_RCC_GetHCLKFreq>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	4b05      	ldr	r3, [pc, #20]	; (8001a94 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	0a9b      	lsrs	r3, r3, #10
 8001a84:	f003 0307 	and.w	r3, r3, #7
 8001a88:	4903      	ldr	r1, [pc, #12]	; (8001a98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a8a:	5ccb      	ldrb	r3, [r1, r3]
 8001a8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	40023800 	.word	0x40023800
 8001a98:	08004d94 	.word	0x08004d94

08001a9c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b083      	sub	sp, #12
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
 8001aa4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	220f      	movs	r2, #15
 8001aaa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001aac:	4b12      	ldr	r3, [pc, #72]	; (8001af8 <HAL_RCC_GetClockConfig+0x5c>)
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	f003 0203 	and.w	r2, r3, #3
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001ab8:	4b0f      	ldr	r3, [pc, #60]	; (8001af8 <HAL_RCC_GetClockConfig+0x5c>)
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001ac4:	4b0c      	ldr	r3, [pc, #48]	; (8001af8 <HAL_RCC_GetClockConfig+0x5c>)
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001ad0:	4b09      	ldr	r3, [pc, #36]	; (8001af8 <HAL_RCC_GetClockConfig+0x5c>)
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	08db      	lsrs	r3, r3, #3
 8001ad6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001ade:	4b07      	ldr	r3, [pc, #28]	; (8001afc <HAL_RCC_GetClockConfig+0x60>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 0207 	and.w	r2, r3, #7
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	601a      	str	r2, [r3, #0]
}
 8001aea:	bf00      	nop
 8001aec:	370c      	adds	r7, #12
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr
 8001af6:	bf00      	nop
 8001af8:	40023800 	.word	0x40023800
 8001afc:	40023c00 	.word	0x40023c00

08001b00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d101      	bne.n	8001b12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e041      	b.n	8001b96 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d106      	bne.n	8001b2c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2200      	movs	r2, #0
 8001b22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b26:	6878      	ldr	r0, [r7, #4]
 8001b28:	f000 f839 	bl	8001b9e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2202      	movs	r2, #2
 8001b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	3304      	adds	r3, #4
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	4610      	mov	r0, r2
 8001b40:	f000 f9d8 	bl	8001ef4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2201      	movs	r2, #1
 8001b48:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2201      	movs	r2, #1
 8001b50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2201      	movs	r2, #1
 8001b58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2201      	movs	r2, #1
 8001b60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2201      	movs	r2, #1
 8001b68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2201      	movs	r2, #1
 8001b70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2201      	movs	r2, #1
 8001b78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2201      	movs	r2, #1
 8001b80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2201      	movs	r2, #1
 8001b88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2201      	movs	r2, #1
 8001b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001b94:	2300      	movs	r3, #0
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3708      	adds	r7, #8
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}

08001b9e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001b9e:	b480      	push	{r7}
 8001ba0:	b083      	sub	sp, #12
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001ba6:	bf00      	nop
 8001ba8:	370c      	adds	r7, #12
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr
	...

08001bb4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b085      	sub	sp, #20
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bc2:	b2db      	uxtb	r3, r3
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	d001      	beq.n	8001bcc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	e04e      	b.n	8001c6a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2202      	movs	r2, #2
 8001bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	68da      	ldr	r2, [r3, #12]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f042 0201 	orr.w	r2, r2, #1
 8001be2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a23      	ldr	r2, [pc, #140]	; (8001c78 <HAL_TIM_Base_Start_IT+0xc4>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d022      	beq.n	8001c34 <HAL_TIM_Base_Start_IT+0x80>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bf6:	d01d      	beq.n	8001c34 <HAL_TIM_Base_Start_IT+0x80>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a1f      	ldr	r2, [pc, #124]	; (8001c7c <HAL_TIM_Base_Start_IT+0xc8>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d018      	beq.n	8001c34 <HAL_TIM_Base_Start_IT+0x80>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a1e      	ldr	r2, [pc, #120]	; (8001c80 <HAL_TIM_Base_Start_IT+0xcc>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d013      	beq.n	8001c34 <HAL_TIM_Base_Start_IT+0x80>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a1c      	ldr	r2, [pc, #112]	; (8001c84 <HAL_TIM_Base_Start_IT+0xd0>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d00e      	beq.n	8001c34 <HAL_TIM_Base_Start_IT+0x80>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a1b      	ldr	r2, [pc, #108]	; (8001c88 <HAL_TIM_Base_Start_IT+0xd4>)
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d009      	beq.n	8001c34 <HAL_TIM_Base_Start_IT+0x80>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a19      	ldr	r2, [pc, #100]	; (8001c8c <HAL_TIM_Base_Start_IT+0xd8>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d004      	beq.n	8001c34 <HAL_TIM_Base_Start_IT+0x80>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a18      	ldr	r2, [pc, #96]	; (8001c90 <HAL_TIM_Base_Start_IT+0xdc>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d111      	bne.n	8001c58 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	f003 0307 	and.w	r3, r3, #7
 8001c3e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	2b06      	cmp	r3, #6
 8001c44:	d010      	beq.n	8001c68 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f042 0201 	orr.w	r2, r2, #1
 8001c54:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c56:	e007      	b.n	8001c68 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f042 0201 	orr.w	r2, r2, #1
 8001c66:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001c68:	2300      	movs	r3, #0
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3714      	adds	r7, #20
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr
 8001c76:	bf00      	nop
 8001c78:	40010000 	.word	0x40010000
 8001c7c:	40000400 	.word	0x40000400
 8001c80:	40000800 	.word	0x40000800
 8001c84:	40000c00 	.word	0x40000c00
 8001c88:	40010400 	.word	0x40010400
 8001c8c:	40014000 	.word	0x40014000
 8001c90:	40001800 	.word	0x40001800

08001c94 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	691b      	ldr	r3, [r3, #16]
 8001ca2:	f003 0302 	and.w	r3, r3, #2
 8001ca6:	2b02      	cmp	r3, #2
 8001ca8:	d122      	bne.n	8001cf0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	68db      	ldr	r3, [r3, #12]
 8001cb0:	f003 0302 	and.w	r3, r3, #2
 8001cb4:	2b02      	cmp	r3, #2
 8001cb6:	d11b      	bne.n	8001cf0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f06f 0202 	mvn.w	r2, #2
 8001cc0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	699b      	ldr	r3, [r3, #24]
 8001cce:	f003 0303 	and.w	r3, r3, #3
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d003      	beq.n	8001cde <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	f000 f8ee 	bl	8001eb8 <HAL_TIM_IC_CaptureCallback>
 8001cdc:	e005      	b.n	8001cea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cde:	6878      	ldr	r0, [r7, #4]
 8001ce0:	f000 f8e0 	bl	8001ea4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ce4:	6878      	ldr	r0, [r7, #4]
 8001ce6:	f000 f8f1 	bl	8001ecc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2200      	movs	r2, #0
 8001cee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	691b      	ldr	r3, [r3, #16]
 8001cf6:	f003 0304 	and.w	r3, r3, #4
 8001cfa:	2b04      	cmp	r3, #4
 8001cfc:	d122      	bne.n	8001d44 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	68db      	ldr	r3, [r3, #12]
 8001d04:	f003 0304 	and.w	r3, r3, #4
 8001d08:	2b04      	cmp	r3, #4
 8001d0a:	d11b      	bne.n	8001d44 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f06f 0204 	mvn.w	r2, #4
 8001d14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2202      	movs	r2, #2
 8001d1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	699b      	ldr	r3, [r3, #24]
 8001d22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d003      	beq.n	8001d32 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d2a:	6878      	ldr	r0, [r7, #4]
 8001d2c:	f000 f8c4 	bl	8001eb8 <HAL_TIM_IC_CaptureCallback>
 8001d30:	e005      	b.n	8001d3e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	f000 f8b6 	bl	8001ea4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d38:	6878      	ldr	r0, [r7, #4]
 8001d3a:	f000 f8c7 	bl	8001ecc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2200      	movs	r2, #0
 8001d42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	691b      	ldr	r3, [r3, #16]
 8001d4a:	f003 0308 	and.w	r3, r3, #8
 8001d4e:	2b08      	cmp	r3, #8
 8001d50:	d122      	bne.n	8001d98 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	68db      	ldr	r3, [r3, #12]
 8001d58:	f003 0308 	and.w	r3, r3, #8
 8001d5c:	2b08      	cmp	r3, #8
 8001d5e:	d11b      	bne.n	8001d98 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f06f 0208 	mvn.w	r2, #8
 8001d68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2204      	movs	r2, #4
 8001d6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	69db      	ldr	r3, [r3, #28]
 8001d76:	f003 0303 	and.w	r3, r3, #3
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d003      	beq.n	8001d86 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	f000 f89a 	bl	8001eb8 <HAL_TIM_IC_CaptureCallback>
 8001d84:	e005      	b.n	8001d92 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d86:	6878      	ldr	r0, [r7, #4]
 8001d88:	f000 f88c 	bl	8001ea4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d8c:	6878      	ldr	r0, [r7, #4]
 8001d8e:	f000 f89d 	bl	8001ecc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2200      	movs	r2, #0
 8001d96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	691b      	ldr	r3, [r3, #16]
 8001d9e:	f003 0310 	and.w	r3, r3, #16
 8001da2:	2b10      	cmp	r3, #16
 8001da4:	d122      	bne.n	8001dec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	68db      	ldr	r3, [r3, #12]
 8001dac:	f003 0310 	and.w	r3, r3, #16
 8001db0:	2b10      	cmp	r3, #16
 8001db2:	d11b      	bne.n	8001dec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f06f 0210 	mvn.w	r2, #16
 8001dbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2208      	movs	r2, #8
 8001dc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	69db      	ldr	r3, [r3, #28]
 8001dca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d003      	beq.n	8001dda <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dd2:	6878      	ldr	r0, [r7, #4]
 8001dd4:	f000 f870 	bl	8001eb8 <HAL_TIM_IC_CaptureCallback>
 8001dd8:	e005      	b.n	8001de6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dda:	6878      	ldr	r0, [r7, #4]
 8001ddc:	f000 f862 	bl	8001ea4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001de0:	6878      	ldr	r0, [r7, #4]
 8001de2:	f000 f873 	bl	8001ecc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2200      	movs	r2, #0
 8001dea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	691b      	ldr	r3, [r3, #16]
 8001df2:	f003 0301 	and.w	r3, r3, #1
 8001df6:	2b01      	cmp	r3, #1
 8001df8:	d10e      	bne.n	8001e18 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	68db      	ldr	r3, [r3, #12]
 8001e00:	f003 0301 	and.w	r3, r3, #1
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	d107      	bne.n	8001e18 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f06f 0201 	mvn.w	r2, #1
 8001e10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	f7fe fd7c 	bl	8000910 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	691b      	ldr	r3, [r3, #16]
 8001e1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e22:	2b80      	cmp	r3, #128	; 0x80
 8001e24:	d10e      	bne.n	8001e44 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	68db      	ldr	r3, [r3, #12]
 8001e2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e30:	2b80      	cmp	r3, #128	; 0x80
 8001e32:	d107      	bne.n	8001e44 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001e3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f000 f902 	bl	8002048 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	691b      	ldr	r3, [r3, #16]
 8001e4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e4e:	2b40      	cmp	r3, #64	; 0x40
 8001e50:	d10e      	bne.n	8001e70 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	68db      	ldr	r3, [r3, #12]
 8001e58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e5c:	2b40      	cmp	r3, #64	; 0x40
 8001e5e:	d107      	bne.n	8001e70 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001e68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f000 f838 	bl	8001ee0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	691b      	ldr	r3, [r3, #16]
 8001e76:	f003 0320 	and.w	r3, r3, #32
 8001e7a:	2b20      	cmp	r3, #32
 8001e7c:	d10e      	bne.n	8001e9c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	f003 0320 	and.w	r3, r3, #32
 8001e88:	2b20      	cmp	r3, #32
 8001e8a:	d107      	bne.n	8001e9c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f06f 0220 	mvn.w	r2, #32
 8001e94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	f000 f8cc 	bl	8002034 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001e9c:	bf00      	nop
 8001e9e:	3708      	adds	r7, #8
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}

08001ea4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001eac:	bf00      	nop
 8001eae:	370c      	adds	r7, #12
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr

08001eb8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b083      	sub	sp, #12
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001ec0:	bf00      	nop
 8001ec2:	370c      	adds	r7, #12
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr

08001ecc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001ed4:	bf00      	nop
 8001ed6:	370c      	adds	r7, #12
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ede:	4770      	bx	lr

08001ee0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b083      	sub	sp, #12
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001ee8:	bf00      	nop
 8001eea:	370c      	adds	r7, #12
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr

08001ef4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b085      	sub	sp, #20
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
 8001efc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	4a40      	ldr	r2, [pc, #256]	; (8002008 <TIM_Base_SetConfig+0x114>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d013      	beq.n	8001f34 <TIM_Base_SetConfig+0x40>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f12:	d00f      	beq.n	8001f34 <TIM_Base_SetConfig+0x40>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	4a3d      	ldr	r2, [pc, #244]	; (800200c <TIM_Base_SetConfig+0x118>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d00b      	beq.n	8001f34 <TIM_Base_SetConfig+0x40>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	4a3c      	ldr	r2, [pc, #240]	; (8002010 <TIM_Base_SetConfig+0x11c>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d007      	beq.n	8001f34 <TIM_Base_SetConfig+0x40>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	4a3b      	ldr	r2, [pc, #236]	; (8002014 <TIM_Base_SetConfig+0x120>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d003      	beq.n	8001f34 <TIM_Base_SetConfig+0x40>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	4a3a      	ldr	r2, [pc, #232]	; (8002018 <TIM_Base_SetConfig+0x124>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d108      	bne.n	8001f46 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	68fa      	ldr	r2, [r7, #12]
 8001f42:	4313      	orrs	r3, r2
 8001f44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4a2f      	ldr	r2, [pc, #188]	; (8002008 <TIM_Base_SetConfig+0x114>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d02b      	beq.n	8001fa6 <TIM_Base_SetConfig+0xb2>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f54:	d027      	beq.n	8001fa6 <TIM_Base_SetConfig+0xb2>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	4a2c      	ldr	r2, [pc, #176]	; (800200c <TIM_Base_SetConfig+0x118>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d023      	beq.n	8001fa6 <TIM_Base_SetConfig+0xb2>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4a2b      	ldr	r2, [pc, #172]	; (8002010 <TIM_Base_SetConfig+0x11c>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d01f      	beq.n	8001fa6 <TIM_Base_SetConfig+0xb2>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	4a2a      	ldr	r2, [pc, #168]	; (8002014 <TIM_Base_SetConfig+0x120>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d01b      	beq.n	8001fa6 <TIM_Base_SetConfig+0xb2>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	4a29      	ldr	r2, [pc, #164]	; (8002018 <TIM_Base_SetConfig+0x124>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d017      	beq.n	8001fa6 <TIM_Base_SetConfig+0xb2>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	4a28      	ldr	r2, [pc, #160]	; (800201c <TIM_Base_SetConfig+0x128>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d013      	beq.n	8001fa6 <TIM_Base_SetConfig+0xb2>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4a27      	ldr	r2, [pc, #156]	; (8002020 <TIM_Base_SetConfig+0x12c>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d00f      	beq.n	8001fa6 <TIM_Base_SetConfig+0xb2>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	4a26      	ldr	r2, [pc, #152]	; (8002024 <TIM_Base_SetConfig+0x130>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d00b      	beq.n	8001fa6 <TIM_Base_SetConfig+0xb2>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4a25      	ldr	r2, [pc, #148]	; (8002028 <TIM_Base_SetConfig+0x134>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d007      	beq.n	8001fa6 <TIM_Base_SetConfig+0xb2>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	4a24      	ldr	r2, [pc, #144]	; (800202c <TIM_Base_SetConfig+0x138>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d003      	beq.n	8001fa6 <TIM_Base_SetConfig+0xb2>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	4a23      	ldr	r2, [pc, #140]	; (8002030 <TIM_Base_SetConfig+0x13c>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d108      	bne.n	8001fb8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	68db      	ldr	r3, [r3, #12]
 8001fb2:	68fa      	ldr	r2, [r7, #12]
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	695b      	ldr	r3, [r3, #20]
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	68fa      	ldr	r2, [r7, #12]
 8001fca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	689a      	ldr	r2, [r3, #8]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	4a0a      	ldr	r2, [pc, #40]	; (8002008 <TIM_Base_SetConfig+0x114>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d003      	beq.n	8001fec <TIM_Base_SetConfig+0xf8>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	4a0c      	ldr	r2, [pc, #48]	; (8002018 <TIM_Base_SetConfig+0x124>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d103      	bne.n	8001ff4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	691a      	ldr	r2, [r3, #16]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	615a      	str	r2, [r3, #20]
}
 8001ffa:	bf00      	nop
 8001ffc:	3714      	adds	r7, #20
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr
 8002006:	bf00      	nop
 8002008:	40010000 	.word	0x40010000
 800200c:	40000400 	.word	0x40000400
 8002010:	40000800 	.word	0x40000800
 8002014:	40000c00 	.word	0x40000c00
 8002018:	40010400 	.word	0x40010400
 800201c:	40014000 	.word	0x40014000
 8002020:	40014400 	.word	0x40014400
 8002024:	40014800 	.word	0x40014800
 8002028:	40001800 	.word	0x40001800
 800202c:	40001c00 	.word	0x40001c00
 8002030:	40002000 	.word	0x40002000

08002034 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800203c:	bf00      	nop
 800203e:	370c      	adds	r7, #12
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr

08002048 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002048:	b480      	push	{r7}
 800204a:	b083      	sub	sp, #12
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002050:	bf00      	nop
 8002052:	370c      	adds	r7, #12
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr

0800205c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800205c:	b480      	push	{r7}
 800205e:	b083      	sub	sp, #12
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	f103 0208 	add.w	r2, r3, #8
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	f04f 32ff 	mov.w	r2, #4294967295
 8002074:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	f103 0208 	add.w	r2, r3, #8
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	f103 0208 	add.w	r2, r3, #8
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2200      	movs	r2, #0
 800208e:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002090:	bf00      	nop
 8002092:	370c      	adds	r7, #12
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr

0800209c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800209c:	b480      	push	{r7}
 800209e:	b083      	sub	sp, #12
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2200      	movs	r2, #0
 80020a8:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80020aa:	bf00      	nop
 80020ac:	370c      	adds	r7, #12
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr

080020b6 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80020b6:	b480      	push	{r7}
 80020b8:	b085      	sub	sp, #20
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	6078      	str	r0, [r7, #4]
 80020be:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80020c6:	68bb      	ldr	r3, [r7, #8]
 80020c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020cc:	d103      	bne.n	80020d6 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	691b      	ldr	r3, [r3, #16]
 80020d2:	60fb      	str	r3, [r7, #12]
 80020d4:	e00c      	b.n	80020f0 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	3308      	adds	r3, #8
 80020da:	60fb      	str	r3, [r7, #12]
 80020dc:	e002      	b.n	80020e4 <vListInsert+0x2e>
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	60fb      	str	r3, [r7, #12]
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	68ba      	ldr	r2, [r7, #8]
 80020ec:	429a      	cmp	r2, r3
 80020ee:	d2f6      	bcs.n	80020de <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	685a      	ldr	r2, [r3, #4]
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	683a      	ldr	r2, [r7, #0]
 80020fe:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	68fa      	ldr	r2, [r7, #12]
 8002104:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	683a      	ldr	r2, [r7, #0]
 800210a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	687a      	ldr	r2, [r7, #4]
 8002110:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	1c5a      	adds	r2, r3, #1
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	601a      	str	r2, [r3, #0]
}
 800211c:	bf00      	nop
 800211e:	3714      	adds	r7, #20
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr

08002128 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002128:	b480      	push	{r7}
 800212a:	b085      	sub	sp, #20
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	691b      	ldr	r3, [r3, #16]
 8002134:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	687a      	ldr	r2, [r7, #4]
 800213c:	6892      	ldr	r2, [r2, #8]
 800213e:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	687a      	ldr	r2, [r7, #4]
 8002146:	6852      	ldr	r2, [r2, #4]
 8002148:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	687a      	ldr	r2, [r7, #4]
 8002150:	429a      	cmp	r2, r3
 8002152:	d103      	bne.n	800215c <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	689a      	ldr	r2, [r3, #8]
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2200      	movs	r2, #0
 8002160:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	1e5a      	subs	r2, r3, #1
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
}
 8002170:	4618      	mov	r0, r3
 8002172:	3714      	adds	r7, #20
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr

0800217c <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b086      	sub	sp, #24
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
 8002184:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8002186:	2301      	movs	r3, #1
 8002188:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d10a      	bne.n	80021aa <xQueueGenericReset+0x2e>
        __asm volatile
 8002194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002198:	f383 8811 	msr	BASEPRI, r3
 800219c:	f3bf 8f6f 	isb	sy
 80021a0:	f3bf 8f4f 	dsb	sy
 80021a4:	60fb      	str	r3, [r7, #12]
    }
 80021a6:	bf00      	nop
 80021a8:	e7fe      	b.n	80021a8 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d05d      	beq.n	800226c <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d059      	beq.n	800226c <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021c0:	2100      	movs	r1, #0
 80021c2:	fba3 2302 	umull	r2, r3, r3, r2
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d000      	beq.n	80021cc <xQueueGenericReset+0x50>
 80021ca:	2101      	movs	r1, #1
 80021cc:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d14c      	bne.n	800226c <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 80021d2:	f001 fdb1 	bl	8003d38 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021de:	6939      	ldr	r1, [r7, #16]
 80021e0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80021e2:	fb01 f303 	mul.w	r3, r1, r3
 80021e6:	441a      	add	r2, r3
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	2200      	movs	r2, #0
 80021f0:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002202:	3b01      	subs	r3, #1
 8002204:	6939      	ldr	r1, [r7, #16]
 8002206:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002208:	fb01 f303 	mul.w	r3, r1, r3
 800220c:	441a      	add	r2, r3
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	22ff      	movs	r2, #255	; 0xff
 8002216:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	22ff      	movs	r2, #255	; 0xff
 800221e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d114      	bne.n	8002252 <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	691b      	ldr	r3, [r3, #16]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d01a      	beq.n	8002266 <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	3310      	adds	r3, #16
 8002234:	4618      	mov	r0, r3
 8002236:	f000 ff57 	bl	80030e8 <xTaskRemoveFromEventList>
 800223a:	4603      	mov	r3, r0
 800223c:	2b00      	cmp	r3, #0
 800223e:	d012      	beq.n	8002266 <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002240:	4b15      	ldr	r3, [pc, #84]	; (8002298 <xQueueGenericReset+0x11c>)
 8002242:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002246:	601a      	str	r2, [r3, #0]
 8002248:	f3bf 8f4f 	dsb	sy
 800224c:	f3bf 8f6f 	isb	sy
 8002250:	e009      	b.n	8002266 <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	3310      	adds	r3, #16
 8002256:	4618      	mov	r0, r3
 8002258:	f7ff ff00 	bl	800205c <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	3324      	adds	r3, #36	; 0x24
 8002260:	4618      	mov	r0, r3
 8002262:	f7ff fefb 	bl	800205c <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8002266:	f001 fd97 	bl	8003d98 <vPortExitCritical>
 800226a:	e001      	b.n	8002270 <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 800226c:	2300      	movs	r3, #0
 800226e:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d10a      	bne.n	800228c <xQueueGenericReset+0x110>
        __asm volatile
 8002276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800227a:	f383 8811 	msr	BASEPRI, r3
 800227e:	f3bf 8f6f 	isb	sy
 8002282:	f3bf 8f4f 	dsb	sy
 8002286:	60bb      	str	r3, [r7, #8]
    }
 8002288:	bf00      	nop
 800228a:	e7fe      	b.n	800228a <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 800228c:	697b      	ldr	r3, [r7, #20]
}
 800228e:	4618      	mov	r0, r3
 8002290:	3718      	adds	r7, #24
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	e000ed04 	.word	0xe000ed04

0800229c <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 800229c:	b580      	push	{r7, lr}
 800229e:	b08a      	sub	sp, #40	; 0x28
 80022a0:	af02      	add	r7, sp, #8
 80022a2:	60f8      	str	r0, [r7, #12]
 80022a4:	60b9      	str	r1, [r7, #8]
 80022a6:	4613      	mov	r3, r2
 80022a8:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 80022aa:	2300      	movs	r3, #0
 80022ac:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d02e      	beq.n	8002312 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80022b4:	2100      	movs	r1, #0
 80022b6:	68ba      	ldr	r2, [r7, #8]
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	fba3 2302 	umull	r2, r3, r3, r2
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d000      	beq.n	80022c4 <xQueueGenericCreate+0x28>
 80022c2:	2101      	movs	r1, #1
 80022c4:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d123      	bne.n	8002312 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	68ba      	ldr	r2, [r7, #8]
 80022ce:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80022d2:	f113 0f51 	cmn.w	r3, #81	; 0x51
 80022d6:	d81c      	bhi.n	8002312 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	68ba      	ldr	r2, [r7, #8]
 80022dc:	fb02 f303 	mul.w	r3, r2, r3
 80022e0:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80022e2:	69bb      	ldr	r3, [r7, #24]
 80022e4:	3350      	adds	r3, #80	; 0x50
 80022e6:	4618      	mov	r0, r3
 80022e8:	f001 fe08 	bl	8003efc <pvPortMalloc>
 80022ec:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d01c      	beq.n	800232e <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80022f4:	69fb      	ldr	r3, [r7, #28]
 80022f6:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	3350      	adds	r3, #80	; 0x50
 80022fc:	617b      	str	r3, [r7, #20]
                         * deleted. */
                        pxNewQueue->ucStaticallyAllocated = pdFALSE;
                    }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80022fe:	79fa      	ldrb	r2, [r7, #7]
 8002300:	69fb      	ldr	r3, [r7, #28]
 8002302:	9300      	str	r3, [sp, #0]
 8002304:	4613      	mov	r3, r2
 8002306:	697a      	ldr	r2, [r7, #20]
 8002308:	68b9      	ldr	r1, [r7, #8]
 800230a:	68f8      	ldr	r0, [r7, #12]
 800230c:	f000 f814 	bl	8002338 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8002310:	e00d      	b.n	800232e <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8002312:	69fb      	ldr	r3, [r7, #28]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d10a      	bne.n	800232e <xQueueGenericCreate+0x92>
        __asm volatile
 8002318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800231c:	f383 8811 	msr	BASEPRI, r3
 8002320:	f3bf 8f6f 	isb	sy
 8002324:	f3bf 8f4f 	dsb	sy
 8002328:	613b      	str	r3, [r7, #16]
    }
 800232a:	bf00      	nop
 800232c:	e7fe      	b.n	800232c <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800232e:	69fb      	ldr	r3, [r7, #28]
    }
 8002330:	4618      	mov	r0, r3
 8002332:	3720      	adds	r7, #32
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}

08002338 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b084      	sub	sp, #16
 800233c:	af00      	add	r7, sp, #0
 800233e:	60f8      	str	r0, [r7, #12]
 8002340:	60b9      	str	r1, [r7, #8]
 8002342:	607a      	str	r2, [r7, #4]
 8002344:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d103      	bne.n	8002354 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800234c:	69bb      	ldr	r3, [r7, #24]
 800234e:	69ba      	ldr	r2, [r7, #24]
 8002350:	601a      	str	r2, [r3, #0]
 8002352:	e002      	b.n	800235a <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002354:	69bb      	ldr	r3, [r7, #24]
 8002356:	687a      	ldr	r2, [r7, #4]
 8002358:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800235a:	69bb      	ldr	r3, [r7, #24]
 800235c:	68fa      	ldr	r2, [r7, #12]
 800235e:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002360:	69bb      	ldr	r3, [r7, #24]
 8002362:	68ba      	ldr	r2, [r7, #8]
 8002364:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002366:	2101      	movs	r1, #1
 8002368:	69b8      	ldr	r0, [r7, #24]
 800236a:	f7ff ff07 	bl	800217c <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 800236e:	69bb      	ldr	r3, [r7, #24]
 8002370:	78fa      	ldrb	r2, [r7, #3]
 8002372:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8002376:	bf00      	nop
 8002378:	3710      	adds	r7, #16
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
	...

08002380 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b08c      	sub	sp, #48	; 0x30
 8002384:	af00      	add	r7, sp, #0
 8002386:	60f8      	str	r0, [r7, #12]
 8002388:	60b9      	str	r1, [r7, #8]
 800238a:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 800238c:	2300      	movs	r3, #0
 800238e:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002396:	2b00      	cmp	r3, #0
 8002398:	d10a      	bne.n	80023b0 <xQueueReceive+0x30>
        __asm volatile
 800239a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800239e:	f383 8811 	msr	BASEPRI, r3
 80023a2:	f3bf 8f6f 	isb	sy
 80023a6:	f3bf 8f4f 	dsb	sy
 80023aa:	623b      	str	r3, [r7, #32]
    }
 80023ac:	bf00      	nop
 80023ae:	e7fe      	b.n	80023ae <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d103      	bne.n	80023be <xQueueReceive+0x3e>
 80023b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d101      	bne.n	80023c2 <xQueueReceive+0x42>
 80023be:	2301      	movs	r3, #1
 80023c0:	e000      	b.n	80023c4 <xQueueReceive+0x44>
 80023c2:	2300      	movs	r3, #0
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d10a      	bne.n	80023de <xQueueReceive+0x5e>
        __asm volatile
 80023c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023cc:	f383 8811 	msr	BASEPRI, r3
 80023d0:	f3bf 8f6f 	isb	sy
 80023d4:	f3bf 8f4f 	dsb	sy
 80023d8:	61fb      	str	r3, [r7, #28]
    }
 80023da:	bf00      	nop
 80023dc:	e7fe      	b.n	80023dc <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80023de:	f001 f857 	bl	8003490 <xTaskGetSchedulerState>
 80023e2:	4603      	mov	r3, r0
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d102      	bne.n	80023ee <xQueueReceive+0x6e>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d101      	bne.n	80023f2 <xQueueReceive+0x72>
 80023ee:	2301      	movs	r3, #1
 80023f0:	e000      	b.n	80023f4 <xQueueReceive+0x74>
 80023f2:	2300      	movs	r3, #0
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d10a      	bne.n	800240e <xQueueReceive+0x8e>
        __asm volatile
 80023f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023fc:	f383 8811 	msr	BASEPRI, r3
 8002400:	f3bf 8f6f 	isb	sy
 8002404:	f3bf 8f4f 	dsb	sy
 8002408:	61bb      	str	r3, [r7, #24]
    }
 800240a:	bf00      	nop
 800240c:	e7fe      	b.n	800240c <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800240e:	f001 fc93 	bl	8003d38 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002416:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800241a:	2b00      	cmp	r3, #0
 800241c:	d01f      	beq.n	800245e <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800241e:	68b9      	ldr	r1, [r7, #8]
 8002420:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002422:	f000 f88d 	bl	8002540 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002428:	1e5a      	subs	r2, r3, #1
 800242a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800242c:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800242e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002430:	691b      	ldr	r3, [r3, #16]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d00f      	beq.n	8002456 <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002438:	3310      	adds	r3, #16
 800243a:	4618      	mov	r0, r3
 800243c:	f000 fe54 	bl	80030e8 <xTaskRemoveFromEventList>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d007      	beq.n	8002456 <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002446:	4b3d      	ldr	r3, [pc, #244]	; (800253c <xQueueReceive+0x1bc>)
 8002448:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800244c:	601a      	str	r2, [r3, #0]
 800244e:	f3bf 8f4f 	dsb	sy
 8002452:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002456:	f001 fc9f 	bl	8003d98 <vPortExitCritical>
                return pdPASS;
 800245a:	2301      	movs	r3, #1
 800245c:	e069      	b.n	8002532 <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d103      	bne.n	800246c <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002464:	f001 fc98 	bl	8003d98 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8002468:	2300      	movs	r3, #0
 800246a:	e062      	b.n	8002532 <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 800246c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800246e:	2b00      	cmp	r3, #0
 8002470:	d106      	bne.n	8002480 <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002472:	f107 0310 	add.w	r3, r7, #16
 8002476:	4618      	mov	r0, r3
 8002478:	f000 ff0c 	bl	8003294 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800247c:	2301      	movs	r3, #1
 800247e:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002480:	f001 fc8a 	bl	8003d98 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002484:	f000 fb3a 	bl	8002afc <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002488:	f001 fc56 	bl	8003d38 <vPortEnterCritical>
 800248c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800248e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002492:	b25b      	sxtb	r3, r3
 8002494:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002498:	d103      	bne.n	80024a2 <xQueueReceive+0x122>
 800249a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800249c:	2200      	movs	r2, #0
 800249e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80024a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80024a8:	b25b      	sxtb	r3, r3
 80024aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024ae:	d103      	bne.n	80024b8 <xQueueReceive+0x138>
 80024b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024b2:	2200      	movs	r2, #0
 80024b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80024b8:	f001 fc6e 	bl	8003d98 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80024bc:	1d3a      	adds	r2, r7, #4
 80024be:	f107 0310 	add.w	r3, r7, #16
 80024c2:	4611      	mov	r1, r2
 80024c4:	4618      	mov	r0, r3
 80024c6:	f000 fefb 	bl	80032c0 <xTaskCheckForTimeOut>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d123      	bne.n	8002518 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80024d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80024d2:	f000 f8ad 	bl	8002630 <prvIsQueueEmpty>
 80024d6:	4603      	mov	r3, r0
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d017      	beq.n	800250c <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80024dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024de:	3324      	adds	r3, #36	; 0x24
 80024e0:	687a      	ldr	r2, [r7, #4]
 80024e2:	4611      	mov	r1, r2
 80024e4:	4618      	mov	r0, r3
 80024e6:	f000 fd95 	bl	8003014 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80024ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80024ec:	f000 f84e 	bl	800258c <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80024f0:	f000 fb12 	bl	8002b18 <xTaskResumeAll>
 80024f4:	4603      	mov	r3, r0
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d189      	bne.n	800240e <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 80024fa:	4b10      	ldr	r3, [pc, #64]	; (800253c <xQueueReceive+0x1bc>)
 80024fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002500:	601a      	str	r2, [r3, #0]
 8002502:	f3bf 8f4f 	dsb	sy
 8002506:	f3bf 8f6f 	isb	sy
 800250a:	e780      	b.n	800240e <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 800250c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800250e:	f000 f83d 	bl	800258c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002512:	f000 fb01 	bl	8002b18 <xTaskResumeAll>
 8002516:	e77a      	b.n	800240e <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002518:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800251a:	f000 f837 	bl	800258c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800251e:	f000 fafb 	bl	8002b18 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002522:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002524:	f000 f884 	bl	8002630 <prvIsQueueEmpty>
 8002528:	4603      	mov	r3, r0
 800252a:	2b00      	cmp	r3, #0
 800252c:	f43f af6f 	beq.w	800240e <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8002530:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002532:	4618      	mov	r0, r3
 8002534:	3730      	adds	r7, #48	; 0x30
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	e000ed04 	.word	0xe000ed04

08002540 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b082      	sub	sp, #8
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
 8002548:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254e:	2b00      	cmp	r3, #0
 8002550:	d018      	beq.n	8002584 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	68da      	ldr	r2, [r3, #12]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255a:	441a      	add	r2, r3
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	68da      	ldr	r2, [r3, #12]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	429a      	cmp	r2, r3
 800256a:	d303      	bcc.n	8002574 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	68d9      	ldr	r1, [r3, #12]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257c:	461a      	mov	r2, r3
 800257e:	6838      	ldr	r0, [r7, #0]
 8002580:	f001 fede 	bl	8004340 <memcpy>
    }
}
 8002584:	bf00      	nop
 8002586:	3708      	adds	r7, #8
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}

0800258c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b084      	sub	sp, #16
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002594:	f001 fbd0 	bl	8003d38 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800259e:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80025a0:	e011      	b.n	80025c6 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d012      	beq.n	80025d0 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	3324      	adds	r3, #36	; 0x24
 80025ae:	4618      	mov	r0, r3
 80025b0:	f000 fd9a 	bl	80030e8 <xTaskRemoveFromEventList>
 80025b4:	4603      	mov	r3, r0
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d001      	beq.n	80025be <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 80025ba:	f000 fee7 	bl	800338c <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80025be:	7bfb      	ldrb	r3, [r7, #15]
 80025c0:	3b01      	subs	r3, #1
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80025c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	dce9      	bgt.n	80025a2 <prvUnlockQueue+0x16>
 80025ce:	e000      	b.n	80025d2 <prvUnlockQueue+0x46>
                        break;
 80025d0:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	22ff      	movs	r2, #255	; 0xff
 80025d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 80025da:	f001 fbdd 	bl	8003d98 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80025de:	f001 fbab 	bl	8003d38 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80025e8:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80025ea:	e011      	b.n	8002610 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	691b      	ldr	r3, [r3, #16]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d012      	beq.n	800261a <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	3310      	adds	r3, #16
 80025f8:	4618      	mov	r0, r3
 80025fa:	f000 fd75 	bl	80030e8 <xTaskRemoveFromEventList>
 80025fe:	4603      	mov	r3, r0
 8002600:	2b00      	cmp	r3, #0
 8002602:	d001      	beq.n	8002608 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002604:	f000 fec2 	bl	800338c <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002608:	7bbb      	ldrb	r3, [r7, #14]
 800260a:	3b01      	subs	r3, #1
 800260c:	b2db      	uxtb	r3, r3
 800260e:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002610:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002614:	2b00      	cmp	r3, #0
 8002616:	dce9      	bgt.n	80025ec <prvUnlockQueue+0x60>
 8002618:	e000      	b.n	800261c <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800261a:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	22ff      	movs	r2, #255	; 0xff
 8002620:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8002624:	f001 fbb8 	bl	8003d98 <vPortExitCritical>
}
 8002628:	bf00      	nop
 800262a:	3710      	adds	r7, #16
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}

08002630 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b084      	sub	sp, #16
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002638:	f001 fb7e 	bl	8003d38 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002640:	2b00      	cmp	r3, #0
 8002642:	d102      	bne.n	800264a <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002644:	2301      	movs	r3, #1
 8002646:	60fb      	str	r3, [r7, #12]
 8002648:	e001      	b.n	800264e <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800264a:	2300      	movs	r3, #0
 800264c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800264e:	f001 fba3 	bl	8003d98 <vPortExitCritical>

    return xReturn;
 8002652:	68fb      	ldr	r3, [r7, #12]
}
 8002654:	4618      	mov	r0, r3
 8002656:	3710      	adds	r7, #16
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}

0800265c <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 800265c:	b480      	push	{r7}
 800265e:	b087      	sub	sp, #28
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
 8002664:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        configASSERT( xQueue );
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d10a      	bne.n	8002682 <vQueueAddToRegistry+0x26>
        __asm volatile
 800266c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002670:	f383 8811 	msr	BASEPRI, r3
 8002674:	f3bf 8f6f 	isb	sy
 8002678:	f3bf 8f4f 	dsb	sy
 800267c:	60fb      	str	r3, [r7, #12]
    }
 800267e:	bf00      	nop
 8002680:	e7fe      	b.n	8002680 <vQueueAddToRegistry+0x24>

        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8002682:	2300      	movs	r3, #0
 8002684:	613b      	str	r3, [r7, #16]

        if( pcQueueName != NULL )
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d024      	beq.n	80026d6 <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800268c:	2300      	movs	r3, #0
 800268e:	617b      	str	r3, [r7, #20]
 8002690:	e01e      	b.n	80026d0 <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8002692:	4a18      	ldr	r2, [pc, #96]	; (80026f4 <vQueueAddToRegistry+0x98>)
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	00db      	lsls	r3, r3, #3
 8002698:	4413      	add	r3, r2
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	687a      	ldr	r2, [r7, #4]
 800269e:	429a      	cmp	r2, r3
 80026a0:	d105      	bne.n	80026ae <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	00db      	lsls	r3, r3, #3
 80026a6:	4a13      	ldr	r2, [pc, #76]	; (80026f4 <vQueueAddToRegistry+0x98>)
 80026a8:	4413      	add	r3, r2
 80026aa:	613b      	str	r3, [r7, #16]
                    break;
 80026ac:	e013      	b.n	80026d6 <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d10a      	bne.n	80026ca <vQueueAddToRegistry+0x6e>
 80026b4:	4a0f      	ldr	r2, [pc, #60]	; (80026f4 <vQueueAddToRegistry+0x98>)
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d104      	bne.n	80026ca <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	00db      	lsls	r3, r3, #3
 80026c4:	4a0b      	ldr	r2, [pc, #44]	; (80026f4 <vQueueAddToRegistry+0x98>)
 80026c6:	4413      	add	r3, r2
 80026c8:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	3301      	adds	r3, #1
 80026ce:	617b      	str	r3, [r7, #20]
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	2b07      	cmp	r3, #7
 80026d4:	d9dd      	bls.n	8002692 <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d005      	beq.n	80026e8 <vQueueAddToRegistry+0x8c>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	683a      	ldr	r2, [r7, #0]
 80026e0:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	687a      	ldr	r2, [r7, #4]
 80026e6:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 80026e8:	bf00      	nop
 80026ea:	371c      	adds	r7, #28
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr
 80026f4:	20012e3c 	.word	0x20012e3c

080026f8 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b086      	sub	sp, #24
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	60f8      	str	r0, [r7, #12]
 8002700:	60b9      	str	r1, [r7, #8]
 8002702:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002708:	f001 fb16 	bl	8003d38 <vPortEnterCritical>
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002712:	b25b      	sxtb	r3, r3
 8002714:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002718:	d103      	bne.n	8002722 <vQueueWaitForMessageRestricted+0x2a>
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	2200      	movs	r2, #0
 800271e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002728:	b25b      	sxtb	r3, r3
 800272a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800272e:	d103      	bne.n	8002738 <vQueueWaitForMessageRestricted+0x40>
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	2200      	movs	r2, #0
 8002734:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002738:	f001 fb2e 	bl	8003d98 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002740:	2b00      	cmp	r3, #0
 8002742:	d106      	bne.n	8002752 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	3324      	adds	r3, #36	; 0x24
 8002748:	687a      	ldr	r2, [r7, #4]
 800274a:	68b9      	ldr	r1, [r7, #8]
 800274c:	4618      	mov	r0, r3
 800274e:	f000 fc85 	bl	800305c <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002752:	6978      	ldr	r0, [r7, #20]
 8002754:	f7ff ff1a 	bl	800258c <prvUnlockQueue>
    }
 8002758:	bf00      	nop
 800275a:	3718      	adds	r7, #24
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}

08002760 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002760:	b580      	push	{r7, lr}
 8002762:	b08c      	sub	sp, #48	; 0x30
 8002764:	af04      	add	r7, sp, #16
 8002766:	60f8      	str	r0, [r7, #12]
 8002768:	60b9      	str	r1, [r7, #8]
 800276a:	603b      	str	r3, [r7, #0]
 800276c:	4613      	mov	r3, r2
 800276e:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002770:	88fb      	ldrh	r3, [r7, #6]
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	4618      	mov	r0, r3
 8002776:	f001 fbc1 	bl	8003efc <pvPortMalloc>
 800277a:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d00e      	beq.n	80027a0 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002782:	2058      	movs	r0, #88	; 0x58
 8002784:	f001 fbba 	bl	8003efc <pvPortMalloc>
 8002788:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d003      	beq.n	8002798 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8002790:	69fb      	ldr	r3, [r7, #28]
 8002792:	697a      	ldr	r2, [r7, #20]
 8002794:	631a      	str	r2, [r3, #48]	; 0x30
 8002796:	e005      	b.n	80027a4 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFreeStack( pxStack );
 8002798:	6978      	ldr	r0, [r7, #20]
 800279a:	f001 fc8f 	bl	80040bc <vPortFree>
 800279e:	e001      	b.n	80027a4 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 80027a0:	2300      	movs	r3, #0
 80027a2:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80027a4:	69fb      	ldr	r3, [r7, #28]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d013      	beq.n	80027d2 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80027aa:	88fa      	ldrh	r2, [r7, #6]
 80027ac:	2300      	movs	r3, #0
 80027ae:	9303      	str	r3, [sp, #12]
 80027b0:	69fb      	ldr	r3, [r7, #28]
 80027b2:	9302      	str	r3, [sp, #8]
 80027b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027b6:	9301      	str	r3, [sp, #4]
 80027b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027ba:	9300      	str	r3, [sp, #0]
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	68b9      	ldr	r1, [r7, #8]
 80027c0:	68f8      	ldr	r0, [r7, #12]
 80027c2:	f000 f80e 	bl	80027e2 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80027c6:	69f8      	ldr	r0, [r7, #28]
 80027c8:	f000 f8b0 	bl	800292c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80027cc:	2301      	movs	r3, #1
 80027ce:	61bb      	str	r3, [r7, #24]
 80027d0:	e002      	b.n	80027d8 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80027d2:	f04f 33ff 	mov.w	r3, #4294967295
 80027d6:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80027d8:	69bb      	ldr	r3, [r7, #24]
    }
 80027da:	4618      	mov	r0, r3
 80027dc:	3720      	adds	r7, #32
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}

080027e2 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80027e2:	b580      	push	{r7, lr}
 80027e4:	b088      	sub	sp, #32
 80027e6:	af00      	add	r7, sp, #0
 80027e8:	60f8      	str	r0, [r7, #12]
 80027ea:	60b9      	str	r1, [r7, #8]
 80027ec:	607a      	str	r2, [r7, #4]
 80027ee:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80027f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027f2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	461a      	mov	r2, r3
 80027fa:	21a5      	movs	r1, #165	; 0xa5
 80027fc:	f001 fdae 	bl	800435c <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002802:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800280a:	3b01      	subs	r3, #1
 800280c:	009b      	lsls	r3, r3, #2
 800280e:	4413      	add	r3, r2
 8002810:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002812:	69bb      	ldr	r3, [r7, #24]
 8002814:	f023 0307 	bic.w	r3, r3, #7
 8002818:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800281a:	69bb      	ldr	r3, [r7, #24]
 800281c:	f003 0307 	and.w	r3, r3, #7
 8002820:	2b00      	cmp	r3, #0
 8002822:	d00a      	beq.n	800283a <prvInitialiseNewTask+0x58>
        __asm volatile
 8002824:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002828:	f383 8811 	msr	BASEPRI, r3
 800282c:	f3bf 8f6f 	isb	sy
 8002830:	f3bf 8f4f 	dsb	sy
 8002834:	617b      	str	r3, [r7, #20]
    }
 8002836:	bf00      	nop
 8002838:	e7fe      	b.n	8002838 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d01f      	beq.n	8002880 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002840:	2300      	movs	r3, #0
 8002842:	61fb      	str	r3, [r7, #28]
 8002844:	e012      	b.n	800286c <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002846:	68ba      	ldr	r2, [r7, #8]
 8002848:	69fb      	ldr	r3, [r7, #28]
 800284a:	4413      	add	r3, r2
 800284c:	7819      	ldrb	r1, [r3, #0]
 800284e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002850:	69fb      	ldr	r3, [r7, #28]
 8002852:	4413      	add	r3, r2
 8002854:	3334      	adds	r3, #52	; 0x34
 8002856:	460a      	mov	r2, r1
 8002858:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800285a:	68ba      	ldr	r2, [r7, #8]
 800285c:	69fb      	ldr	r3, [r7, #28]
 800285e:	4413      	add	r3, r2
 8002860:	781b      	ldrb	r3, [r3, #0]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d006      	beq.n	8002874 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002866:	69fb      	ldr	r3, [r7, #28]
 8002868:	3301      	adds	r3, #1
 800286a:	61fb      	str	r3, [r7, #28]
 800286c:	69fb      	ldr	r3, [r7, #28]
 800286e:	2b09      	cmp	r3, #9
 8002870:	d9e9      	bls.n	8002846 <prvInitialiseNewTask+0x64>
 8002872:	e000      	b.n	8002876 <prvInitialiseNewTask+0x94>
            {
                break;
 8002874:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002878:	2200      	movs	r2, #0
 800287a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800287e:	e003      	b.n	8002888 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002882:	2200      	movs	r2, #0
 8002884:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8002888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800288a:	2b04      	cmp	r3, #4
 800288c:	d90a      	bls.n	80028a4 <prvInitialiseNewTask+0xc2>
        __asm volatile
 800288e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002892:	f383 8811 	msr	BASEPRI, r3
 8002896:	f3bf 8f6f 	isb	sy
 800289a:	f3bf 8f4f 	dsb	sy
 800289e:	613b      	str	r3, [r7, #16]
    }
 80028a0:	bf00      	nop
 80028a2:	e7fe      	b.n	80028a2 <prvInitialiseNewTask+0xc0>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80028a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028a6:	2b04      	cmp	r3, #4
 80028a8:	d901      	bls.n	80028ae <prvInitialiseNewTask+0xcc>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80028aa:	2304      	movs	r3, #4
 80028ac:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80028ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80028b2:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 80028b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80028b8:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 80028ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028bc:	2200      	movs	r2, #0
 80028be:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80028c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028c2:	3304      	adds	r3, #4
 80028c4:	4618      	mov	r0, r3
 80028c6:	f7ff fbe9 	bl	800209c <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80028ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028cc:	3318      	adds	r3, #24
 80028ce:	4618      	mov	r0, r3
 80028d0:	f7ff fbe4 	bl	800209c <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80028d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80028d8:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80028da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028dc:	f1c3 0205 	rsb	r2, r3, #5
 80028e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028e2:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80028e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80028e8:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 80028ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028ec:	3350      	adds	r3, #80	; 0x50
 80028ee:	2204      	movs	r2, #4
 80028f0:	2100      	movs	r1, #0
 80028f2:	4618      	mov	r0, r3
 80028f4:	f001 fd32 	bl	800435c <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 80028f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028fa:	3354      	adds	r3, #84	; 0x54
 80028fc:	2201      	movs	r2, #1
 80028fe:	2100      	movs	r1, #0
 8002900:	4618      	mov	r0, r3
 8002902:	f001 fd2b 	bl	800435c <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002906:	683a      	ldr	r2, [r7, #0]
 8002908:	68f9      	ldr	r1, [r7, #12]
 800290a:	69b8      	ldr	r0, [r7, #24]
 800290c:	f001 f8e2 	bl	8003ad4 <pxPortInitialiseStack>
 8002910:	4602      	mov	r2, r0
 8002912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002914:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002918:	2b00      	cmp	r3, #0
 800291a:	d002      	beq.n	8002922 <prvInitialiseNewTask+0x140>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800291c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800291e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002920:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002922:	bf00      	nop
 8002924:	3720      	adds	r7, #32
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}
	...

0800292c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b084      	sub	sp, #16
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002934:	f001 fa00 	bl	8003d38 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002938:	4b40      	ldr	r3, [pc, #256]	; (8002a3c <prvAddNewTaskToReadyList+0x110>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	3301      	adds	r3, #1
 800293e:	4a3f      	ldr	r2, [pc, #252]	; (8002a3c <prvAddNewTaskToReadyList+0x110>)
 8002940:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002942:	4b3f      	ldr	r3, [pc, #252]	; (8002a40 <prvAddNewTaskToReadyList+0x114>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d109      	bne.n	800295e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800294a:	4a3d      	ldr	r2, [pc, #244]	; (8002a40 <prvAddNewTaskToReadyList+0x114>)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002950:	4b3a      	ldr	r3, [pc, #232]	; (8002a3c <prvAddNewTaskToReadyList+0x110>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	2b01      	cmp	r3, #1
 8002956:	d110      	bne.n	800297a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002958:	f000 fd3c 	bl	80033d4 <prvInitialiseTaskLists>
 800295c:	e00d      	b.n	800297a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800295e:	4b39      	ldr	r3, [pc, #228]	; (8002a44 <prvAddNewTaskToReadyList+0x118>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d109      	bne.n	800297a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002966:	4b36      	ldr	r3, [pc, #216]	; (8002a40 <prvAddNewTaskToReadyList+0x114>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002970:	429a      	cmp	r2, r3
 8002972:	d802      	bhi.n	800297a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002974:	4a32      	ldr	r2, [pc, #200]	; (8002a40 <prvAddNewTaskToReadyList+0x114>)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800297a:	4b33      	ldr	r3, [pc, #204]	; (8002a48 <prvAddNewTaskToReadyList+0x11c>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	3301      	adds	r3, #1
 8002980:	4a31      	ldr	r2, [pc, #196]	; (8002a48 <prvAddNewTaskToReadyList+0x11c>)
 8002982:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002984:	4b30      	ldr	r3, [pc, #192]	; (8002a48 <prvAddNewTaskToReadyList+0x11c>)
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002990:	2201      	movs	r2, #1
 8002992:	409a      	lsls	r2, r3
 8002994:	4b2d      	ldr	r3, [pc, #180]	; (8002a4c <prvAddNewTaskToReadyList+0x120>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4313      	orrs	r3, r2
 800299a:	4a2c      	ldr	r2, [pc, #176]	; (8002a4c <prvAddNewTaskToReadyList+0x120>)
 800299c:	6013      	str	r3, [r2, #0]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029a2:	492b      	ldr	r1, [pc, #172]	; (8002a50 <prvAddNewTaskToReadyList+0x124>)
 80029a4:	4613      	mov	r3, r2
 80029a6:	009b      	lsls	r3, r3, #2
 80029a8:	4413      	add	r3, r2
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	440b      	add	r3, r1
 80029ae:	3304      	adds	r3, #4
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	60fb      	str	r3, [r7, #12]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	68fa      	ldr	r2, [r7, #12]
 80029b8:	609a      	str	r2, [r3, #8]
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	689a      	ldr	r2, [r3, #8]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	60da      	str	r2, [r3, #12]
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	687a      	ldr	r2, [r7, #4]
 80029c8:	3204      	adds	r2, #4
 80029ca:	605a      	str	r2, [r3, #4]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	1d1a      	adds	r2, r3, #4
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	609a      	str	r2, [r3, #8]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029d8:	4613      	mov	r3, r2
 80029da:	009b      	lsls	r3, r3, #2
 80029dc:	4413      	add	r3, r2
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	4a1b      	ldr	r2, [pc, #108]	; (8002a50 <prvAddNewTaskToReadyList+0x124>)
 80029e2:	441a      	add	r2, r3
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	615a      	str	r2, [r3, #20]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029ec:	4918      	ldr	r1, [pc, #96]	; (8002a50 <prvAddNewTaskToReadyList+0x124>)
 80029ee:	4613      	mov	r3, r2
 80029f0:	009b      	lsls	r3, r3, #2
 80029f2:	4413      	add	r3, r2
 80029f4:	009b      	lsls	r3, r3, #2
 80029f6:	440b      	add	r3, r1
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	1c59      	adds	r1, r3, #1
 80029fc:	4814      	ldr	r0, [pc, #80]	; (8002a50 <prvAddNewTaskToReadyList+0x124>)
 80029fe:	4613      	mov	r3, r2
 8002a00:	009b      	lsls	r3, r3, #2
 8002a02:	4413      	add	r3, r2
 8002a04:	009b      	lsls	r3, r3, #2
 8002a06:	4403      	add	r3, r0
 8002a08:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002a0a:	f001 f9c5 	bl	8003d98 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002a0e:	4b0d      	ldr	r3, [pc, #52]	; (8002a44 <prvAddNewTaskToReadyList+0x118>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d00e      	beq.n	8002a34 <prvAddNewTaskToReadyList+0x108>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002a16:	4b0a      	ldr	r3, [pc, #40]	; (8002a40 <prvAddNewTaskToReadyList+0x114>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a20:	429a      	cmp	r2, r3
 8002a22:	d207      	bcs.n	8002a34 <prvAddNewTaskToReadyList+0x108>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002a24:	4b0b      	ldr	r3, [pc, #44]	; (8002a54 <prvAddNewTaskToReadyList+0x128>)
 8002a26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a2a:	601a      	str	r2, [r3, #0]
 8002a2c:	f3bf 8f4f 	dsb	sy
 8002a30:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002a34:	bf00      	nop
 8002a36:	3710      	adds	r7, #16
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}
 8002a3c:	20000154 	.word	0x20000154
 8002a40:	20000094 	.word	0x20000094
 8002a44:	20000160 	.word	0x20000160
 8002a48:	20000170 	.word	0x20000170
 8002a4c:	2000015c 	.word	0x2000015c
 8002a50:	20000098 	.word	0x20000098
 8002a54:	e000ed04 	.word	0xe000ed04

08002a58 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b086      	sub	sp, #24
 8002a5c:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8002a5e:	4b20      	ldr	r3, [pc, #128]	; (8002ae0 <vTaskStartScheduler+0x88>)
 8002a60:	9301      	str	r3, [sp, #4]
 8002a62:	2300      	movs	r3, #0
 8002a64:	9300      	str	r3, [sp, #0]
 8002a66:	2300      	movs	r3, #0
 8002a68:	2282      	movs	r2, #130	; 0x82
 8002a6a:	491e      	ldr	r1, [pc, #120]	; (8002ae4 <vTaskStartScheduler+0x8c>)
 8002a6c:	481e      	ldr	r0, [pc, #120]	; (8002ae8 <vTaskStartScheduler+0x90>)
 8002a6e:	f7ff fe77 	bl	8002760 <xTaskCreate>
 8002a72:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	d102      	bne.n	8002a80 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8002a7a:	f000 fda7 	bl	80035cc <xTimerCreateTimerTask>
 8002a7e:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	d116      	bne.n	8002ab4 <vTaskStartScheduler+0x5c>
        __asm volatile
 8002a86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a8a:	f383 8811 	msr	BASEPRI, r3
 8002a8e:	f3bf 8f6f 	isb	sy
 8002a92:	f3bf 8f4f 	dsb	sy
 8002a96:	60bb      	str	r3, [r7, #8]
    }
 8002a98:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8002a9a:	4b14      	ldr	r3, [pc, #80]	; (8002aec <vTaskStartScheduler+0x94>)
 8002a9c:	f04f 32ff 	mov.w	r2, #4294967295
 8002aa0:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002aa2:	4b13      	ldr	r3, [pc, #76]	; (8002af0 <vTaskStartScheduler+0x98>)
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002aa8:	4b12      	ldr	r3, [pc, #72]	; (8002af4 <vTaskStartScheduler+0x9c>)
 8002aaa:	2200      	movs	r2, #0
 8002aac:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8002aae:	f001 f8a1 	bl	8003bf4 <xPortStartScheduler>
 8002ab2:	e00e      	b.n	8002ad2 <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aba:	d10a      	bne.n	8002ad2 <vTaskStartScheduler+0x7a>
        __asm volatile
 8002abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ac0:	f383 8811 	msr	BASEPRI, r3
 8002ac4:	f3bf 8f6f 	isb	sy
 8002ac8:	f3bf 8f4f 	dsb	sy
 8002acc:	607b      	str	r3, [r7, #4]
    }
 8002ace:	bf00      	nop
 8002ad0:	e7fe      	b.n	8002ad0 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002ad2:	4b09      	ldr	r3, [pc, #36]	; (8002af8 <vTaskStartScheduler+0xa0>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
}
 8002ad6:	bf00      	nop
 8002ad8:	3710      	adds	r7, #16
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	20000178 	.word	0x20000178
 8002ae4:	08004d6c 	.word	0x08004d6c
 8002ae8:	080033a5 	.word	0x080033a5
 8002aec:	20000174 	.word	0x20000174
 8002af0:	20000160 	.word	0x20000160
 8002af4:	20000158 	.word	0x20000158
 8002af8:	2000000c 	.word	0x2000000c

08002afc <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002afc:	b480      	push	{r7}
 8002afe:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002b00:	4b04      	ldr	r3, [pc, #16]	; (8002b14 <vTaskSuspendAll+0x18>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	3301      	adds	r3, #1
 8002b06:	4a03      	ldr	r2, [pc, #12]	; (8002b14 <vTaskSuspendAll+0x18>)
 8002b08:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002b0a:	bf00      	nop
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b12:	4770      	bx	lr
 8002b14:	2000017c 	.word	0x2000017c

08002b18 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b088      	sub	sp, #32
 8002b1c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002b22:	2300      	movs	r3, #0
 8002b24:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002b26:	4b71      	ldr	r3, [pc, #452]	; (8002cec <xTaskResumeAll+0x1d4>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d10a      	bne.n	8002b44 <xTaskResumeAll+0x2c>
        __asm volatile
 8002b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b32:	f383 8811 	msr	BASEPRI, r3
 8002b36:	f3bf 8f6f 	isb	sy
 8002b3a:	f3bf 8f4f 	dsb	sy
 8002b3e:	607b      	str	r3, [r7, #4]
    }
 8002b40:	bf00      	nop
 8002b42:	e7fe      	b.n	8002b42 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002b44:	f001 f8f8 	bl	8003d38 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002b48:	4b68      	ldr	r3, [pc, #416]	; (8002cec <xTaskResumeAll+0x1d4>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	3b01      	subs	r3, #1
 8002b4e:	4a67      	ldr	r2, [pc, #412]	; (8002cec <xTaskResumeAll+0x1d4>)
 8002b50:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002b52:	4b66      	ldr	r3, [pc, #408]	; (8002cec <xTaskResumeAll+0x1d4>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	f040 80c0 	bne.w	8002cdc <xTaskResumeAll+0x1c4>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002b5c:	4b64      	ldr	r3, [pc, #400]	; (8002cf0 <xTaskResumeAll+0x1d8>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	f000 80bb 	beq.w	8002cdc <xTaskResumeAll+0x1c4>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002b66:	e08a      	b.n	8002c7e <xTaskResumeAll+0x166>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002b68:	4b62      	ldr	r3, [pc, #392]	; (8002cf4 <xTaskResumeAll+0x1dc>)
 8002b6a:	68db      	ldr	r3, [r3, #12]
 8002b6c:	68db      	ldr	r3, [r3, #12]
 8002b6e:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002b70:	69fb      	ldr	r3, [r7, #28]
 8002b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b74:	613b      	str	r3, [r7, #16]
 8002b76:	69fb      	ldr	r3, [r7, #28]
 8002b78:	69db      	ldr	r3, [r3, #28]
 8002b7a:	69fa      	ldr	r2, [r7, #28]
 8002b7c:	6a12      	ldr	r2, [r2, #32]
 8002b7e:	609a      	str	r2, [r3, #8]
 8002b80:	69fb      	ldr	r3, [r7, #28]
 8002b82:	6a1b      	ldr	r3, [r3, #32]
 8002b84:	69fa      	ldr	r2, [r7, #28]
 8002b86:	69d2      	ldr	r2, [r2, #28]
 8002b88:	605a      	str	r2, [r3, #4]
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	685a      	ldr	r2, [r3, #4]
 8002b8e:	69fb      	ldr	r3, [r7, #28]
 8002b90:	3318      	adds	r3, #24
 8002b92:	429a      	cmp	r2, r3
 8002b94:	d103      	bne.n	8002b9e <xTaskResumeAll+0x86>
 8002b96:	69fb      	ldr	r3, [r7, #28]
 8002b98:	6a1a      	ldr	r2, [r3, #32]
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	605a      	str	r2, [r3, #4]
 8002b9e:	69fb      	ldr	r3, [r7, #28]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	629a      	str	r2, [r3, #40]	; 0x28
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	1e5a      	subs	r2, r3, #1
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002bae:	69fb      	ldr	r3, [r7, #28]
 8002bb0:	695b      	ldr	r3, [r3, #20]
 8002bb2:	60fb      	str	r3, [r7, #12]
 8002bb4:	69fb      	ldr	r3, [r7, #28]
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	69fa      	ldr	r2, [r7, #28]
 8002bba:	68d2      	ldr	r2, [r2, #12]
 8002bbc:	609a      	str	r2, [r3, #8]
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	68db      	ldr	r3, [r3, #12]
 8002bc2:	69fa      	ldr	r2, [r7, #28]
 8002bc4:	6892      	ldr	r2, [r2, #8]
 8002bc6:	605a      	str	r2, [r3, #4]
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	685a      	ldr	r2, [r3, #4]
 8002bcc:	69fb      	ldr	r3, [r7, #28]
 8002bce:	3304      	adds	r3, #4
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d103      	bne.n	8002bdc <xTaskResumeAll+0xc4>
 8002bd4:	69fb      	ldr	r3, [r7, #28]
 8002bd6:	68da      	ldr	r2, [r3, #12]
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	605a      	str	r2, [r3, #4]
 8002bdc:	69fb      	ldr	r3, [r7, #28]
 8002bde:	2200      	movs	r2, #0
 8002be0:	615a      	str	r2, [r3, #20]
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	1e5a      	subs	r2, r3, #1
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8002bec:	69fb      	ldr	r3, [r7, #28]
 8002bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	409a      	lsls	r2, r3
 8002bf4:	4b40      	ldr	r3, [pc, #256]	; (8002cf8 <xTaskResumeAll+0x1e0>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	4a3f      	ldr	r2, [pc, #252]	; (8002cf8 <xTaskResumeAll+0x1e0>)
 8002bfc:	6013      	str	r3, [r2, #0]
 8002bfe:	69fb      	ldr	r3, [r7, #28]
 8002c00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c02:	493e      	ldr	r1, [pc, #248]	; (8002cfc <xTaskResumeAll+0x1e4>)
 8002c04:	4613      	mov	r3, r2
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	4413      	add	r3, r2
 8002c0a:	009b      	lsls	r3, r3, #2
 8002c0c:	440b      	add	r3, r1
 8002c0e:	3304      	adds	r3, #4
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	60bb      	str	r3, [r7, #8]
 8002c14:	69fb      	ldr	r3, [r7, #28]
 8002c16:	68ba      	ldr	r2, [r7, #8]
 8002c18:	609a      	str	r2, [r3, #8]
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	689a      	ldr	r2, [r3, #8]
 8002c1e:	69fb      	ldr	r3, [r7, #28]
 8002c20:	60da      	str	r2, [r3, #12]
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	69fa      	ldr	r2, [r7, #28]
 8002c28:	3204      	adds	r2, #4
 8002c2a:	605a      	str	r2, [r3, #4]
 8002c2c:	69fb      	ldr	r3, [r7, #28]
 8002c2e:	1d1a      	adds	r2, r3, #4
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	609a      	str	r2, [r3, #8]
 8002c34:	69fb      	ldr	r3, [r7, #28]
 8002c36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c38:	4613      	mov	r3, r2
 8002c3a:	009b      	lsls	r3, r3, #2
 8002c3c:	4413      	add	r3, r2
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	4a2e      	ldr	r2, [pc, #184]	; (8002cfc <xTaskResumeAll+0x1e4>)
 8002c42:	441a      	add	r2, r3
 8002c44:	69fb      	ldr	r3, [r7, #28]
 8002c46:	615a      	str	r2, [r3, #20]
 8002c48:	69fb      	ldr	r3, [r7, #28]
 8002c4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c4c:	492b      	ldr	r1, [pc, #172]	; (8002cfc <xTaskResumeAll+0x1e4>)
 8002c4e:	4613      	mov	r3, r2
 8002c50:	009b      	lsls	r3, r3, #2
 8002c52:	4413      	add	r3, r2
 8002c54:	009b      	lsls	r3, r3, #2
 8002c56:	440b      	add	r3, r1
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	1c59      	adds	r1, r3, #1
 8002c5c:	4827      	ldr	r0, [pc, #156]	; (8002cfc <xTaskResumeAll+0x1e4>)
 8002c5e:	4613      	mov	r3, r2
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	4413      	add	r3, r2
 8002c64:	009b      	lsls	r3, r3, #2
 8002c66:	4403      	add	r3, r0
 8002c68:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002c6a:	69fb      	ldr	r3, [r7, #28]
 8002c6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c6e:	4b24      	ldr	r3, [pc, #144]	; (8002d00 <xTaskResumeAll+0x1e8>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c74:	429a      	cmp	r2, r3
 8002c76:	d302      	bcc.n	8002c7e <xTaskResumeAll+0x166>
                    {
                        xYieldPending = pdTRUE;
 8002c78:	4b22      	ldr	r3, [pc, #136]	; (8002d04 <xTaskResumeAll+0x1ec>)
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002c7e:	4b1d      	ldr	r3, [pc, #116]	; (8002cf4 <xTaskResumeAll+0x1dc>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	f47f af70 	bne.w	8002b68 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002c88:	69fb      	ldr	r3, [r7, #28]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d001      	beq.n	8002c92 <xTaskResumeAll+0x17a>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002c8e:	f000 fbe3 	bl	8003458 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002c92:	4b1d      	ldr	r3, [pc, #116]	; (8002d08 <xTaskResumeAll+0x1f0>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d010      	beq.n	8002cc0 <xTaskResumeAll+0x1a8>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002c9e:	f000 f847 	bl	8002d30 <xTaskIncrementTick>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d002      	beq.n	8002cae <xTaskResumeAll+0x196>
                            {
                                xYieldPending = pdTRUE;
 8002ca8:	4b16      	ldr	r3, [pc, #88]	; (8002d04 <xTaskResumeAll+0x1ec>)
 8002caa:	2201      	movs	r2, #1
 8002cac:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	3b01      	subs	r3, #1
 8002cb2:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d1f1      	bne.n	8002c9e <xTaskResumeAll+0x186>

                        xPendedTicks = 0;
 8002cba:	4b13      	ldr	r3, [pc, #76]	; (8002d08 <xTaskResumeAll+0x1f0>)
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002cc0:	4b10      	ldr	r3, [pc, #64]	; (8002d04 <xTaskResumeAll+0x1ec>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d009      	beq.n	8002cdc <xTaskResumeAll+0x1c4>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	61bb      	str	r3, [r7, #24]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8002ccc:	4b0f      	ldr	r3, [pc, #60]	; (8002d0c <xTaskResumeAll+0x1f4>)
 8002cce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cd2:	601a      	str	r2, [r3, #0]
 8002cd4:	f3bf 8f4f 	dsb	sy
 8002cd8:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002cdc:	f001 f85c 	bl	8003d98 <vPortExitCritical>

    return xAlreadyYielded;
 8002ce0:	69bb      	ldr	r3, [r7, #24]
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3720      	adds	r7, #32
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	bf00      	nop
 8002cec:	2000017c 	.word	0x2000017c
 8002cf0:	20000154 	.word	0x20000154
 8002cf4:	2000012c 	.word	0x2000012c
 8002cf8:	2000015c 	.word	0x2000015c
 8002cfc:	20000098 	.word	0x20000098
 8002d00:	20000094 	.word	0x20000094
 8002d04:	20000168 	.word	0x20000168
 8002d08:	20000164 	.word	0x20000164
 8002d0c:	e000ed04 	.word	0xe000ed04

08002d10 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002d10:	b480      	push	{r7}
 8002d12:	b083      	sub	sp, #12
 8002d14:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8002d16:	4b05      	ldr	r3, [pc, #20]	; (8002d2c <xTaskGetTickCount+0x1c>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8002d1c:	687b      	ldr	r3, [r7, #4]
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	370c      	adds	r7, #12
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr
 8002d2a:	bf00      	nop
 8002d2c:	20000158 	.word	0x20000158

08002d30 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b08a      	sub	sp, #40	; 0x28
 8002d34:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002d36:	2300      	movs	r3, #0
 8002d38:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002d3a:	4b7d      	ldr	r3, [pc, #500]	; (8002f30 <xTaskIncrementTick+0x200>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	f040 80ec 	bne.w	8002f1c <xTaskIncrementTick+0x1ec>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002d44:	4b7b      	ldr	r3, [pc, #492]	; (8002f34 <xTaskIncrementTick+0x204>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	3301      	adds	r3, #1
 8002d4a:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002d4c:	4a79      	ldr	r2, [pc, #484]	; (8002f34 <xTaskIncrementTick+0x204>)
 8002d4e:	6a3b      	ldr	r3, [r7, #32]
 8002d50:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002d52:	6a3b      	ldr	r3, [r7, #32]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d120      	bne.n	8002d9a <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8002d58:	4b77      	ldr	r3, [pc, #476]	; (8002f38 <xTaskIncrementTick+0x208>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d00a      	beq.n	8002d78 <xTaskIncrementTick+0x48>
        __asm volatile
 8002d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d66:	f383 8811 	msr	BASEPRI, r3
 8002d6a:	f3bf 8f6f 	isb	sy
 8002d6e:	f3bf 8f4f 	dsb	sy
 8002d72:	607b      	str	r3, [r7, #4]
    }
 8002d74:	bf00      	nop
 8002d76:	e7fe      	b.n	8002d76 <xTaskIncrementTick+0x46>
 8002d78:	4b6f      	ldr	r3, [pc, #444]	; (8002f38 <xTaskIncrementTick+0x208>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	61fb      	str	r3, [r7, #28]
 8002d7e:	4b6f      	ldr	r3, [pc, #444]	; (8002f3c <xTaskIncrementTick+0x20c>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a6d      	ldr	r2, [pc, #436]	; (8002f38 <xTaskIncrementTick+0x208>)
 8002d84:	6013      	str	r3, [r2, #0]
 8002d86:	4a6d      	ldr	r2, [pc, #436]	; (8002f3c <xTaskIncrementTick+0x20c>)
 8002d88:	69fb      	ldr	r3, [r7, #28]
 8002d8a:	6013      	str	r3, [r2, #0]
 8002d8c:	4b6c      	ldr	r3, [pc, #432]	; (8002f40 <xTaskIncrementTick+0x210>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	3301      	adds	r3, #1
 8002d92:	4a6b      	ldr	r2, [pc, #428]	; (8002f40 <xTaskIncrementTick+0x210>)
 8002d94:	6013      	str	r3, [r2, #0]
 8002d96:	f000 fb5f 	bl	8003458 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002d9a:	4b6a      	ldr	r3, [pc, #424]	; (8002f44 <xTaskIncrementTick+0x214>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	6a3a      	ldr	r2, [r7, #32]
 8002da0:	429a      	cmp	r2, r3
 8002da2:	f0c0 80a6 	bcc.w	8002ef2 <xTaskIncrementTick+0x1c2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002da6:	4b64      	ldr	r3, [pc, #400]	; (8002f38 <xTaskIncrementTick+0x208>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d104      	bne.n	8002dba <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002db0:	4b64      	ldr	r3, [pc, #400]	; (8002f44 <xTaskIncrementTick+0x214>)
 8002db2:	f04f 32ff 	mov.w	r2, #4294967295
 8002db6:	601a      	str	r2, [r3, #0]
                    break;
 8002db8:	e09b      	b.n	8002ef2 <xTaskIncrementTick+0x1c2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002dba:	4b5f      	ldr	r3, [pc, #380]	; (8002f38 <xTaskIncrementTick+0x208>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	68db      	ldr	r3, [r3, #12]
 8002dc0:	68db      	ldr	r3, [r3, #12]
 8002dc2:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002dc4:	69bb      	ldr	r3, [r7, #24]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8002dca:	6a3a      	ldr	r2, [r7, #32]
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	429a      	cmp	r2, r3
 8002dd0:	d203      	bcs.n	8002dda <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002dd2:	4a5c      	ldr	r2, [pc, #368]	; (8002f44 <xTaskIncrementTick+0x214>)
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8002dd8:	e08b      	b.n	8002ef2 <xTaskIncrementTick+0x1c2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002dda:	69bb      	ldr	r3, [r7, #24]
 8002ddc:	695b      	ldr	r3, [r3, #20]
 8002dde:	613b      	str	r3, [r7, #16]
 8002de0:	69bb      	ldr	r3, [r7, #24]
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	69ba      	ldr	r2, [r7, #24]
 8002de6:	68d2      	ldr	r2, [r2, #12]
 8002de8:	609a      	str	r2, [r3, #8]
 8002dea:	69bb      	ldr	r3, [r7, #24]
 8002dec:	68db      	ldr	r3, [r3, #12]
 8002dee:	69ba      	ldr	r2, [r7, #24]
 8002df0:	6892      	ldr	r2, [r2, #8]
 8002df2:	605a      	str	r2, [r3, #4]
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	685a      	ldr	r2, [r3, #4]
 8002df8:	69bb      	ldr	r3, [r7, #24]
 8002dfa:	3304      	adds	r3, #4
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d103      	bne.n	8002e08 <xTaskIncrementTick+0xd8>
 8002e00:	69bb      	ldr	r3, [r7, #24]
 8002e02:	68da      	ldr	r2, [r3, #12]
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	605a      	str	r2, [r3, #4]
 8002e08:	69bb      	ldr	r3, [r7, #24]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	615a      	str	r2, [r3, #20]
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	1e5a      	subs	r2, r3, #1
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002e18:	69bb      	ldr	r3, [r7, #24]
 8002e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d01e      	beq.n	8002e5e <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002e20:	69bb      	ldr	r3, [r7, #24]
 8002e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e24:	60fb      	str	r3, [r7, #12]
 8002e26:	69bb      	ldr	r3, [r7, #24]
 8002e28:	69db      	ldr	r3, [r3, #28]
 8002e2a:	69ba      	ldr	r2, [r7, #24]
 8002e2c:	6a12      	ldr	r2, [r2, #32]
 8002e2e:	609a      	str	r2, [r3, #8]
 8002e30:	69bb      	ldr	r3, [r7, #24]
 8002e32:	6a1b      	ldr	r3, [r3, #32]
 8002e34:	69ba      	ldr	r2, [r7, #24]
 8002e36:	69d2      	ldr	r2, [r2, #28]
 8002e38:	605a      	str	r2, [r3, #4]
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	685a      	ldr	r2, [r3, #4]
 8002e3e:	69bb      	ldr	r3, [r7, #24]
 8002e40:	3318      	adds	r3, #24
 8002e42:	429a      	cmp	r2, r3
 8002e44:	d103      	bne.n	8002e4e <xTaskIncrementTick+0x11e>
 8002e46:	69bb      	ldr	r3, [r7, #24]
 8002e48:	6a1a      	ldr	r2, [r3, #32]
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	605a      	str	r2, [r3, #4]
 8002e4e:	69bb      	ldr	r3, [r7, #24]
 8002e50:	2200      	movs	r2, #0
 8002e52:	629a      	str	r2, [r3, #40]	; 0x28
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	1e5a      	subs	r2, r3, #1
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002e5e:	69bb      	ldr	r3, [r7, #24]
 8002e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e62:	2201      	movs	r2, #1
 8002e64:	409a      	lsls	r2, r3
 8002e66:	4b38      	ldr	r3, [pc, #224]	; (8002f48 <xTaskIncrementTick+0x218>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	4a36      	ldr	r2, [pc, #216]	; (8002f48 <xTaskIncrementTick+0x218>)
 8002e6e:	6013      	str	r3, [r2, #0]
 8002e70:	69bb      	ldr	r3, [r7, #24]
 8002e72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e74:	4935      	ldr	r1, [pc, #212]	; (8002f4c <xTaskIncrementTick+0x21c>)
 8002e76:	4613      	mov	r3, r2
 8002e78:	009b      	lsls	r3, r3, #2
 8002e7a:	4413      	add	r3, r2
 8002e7c:	009b      	lsls	r3, r3, #2
 8002e7e:	440b      	add	r3, r1
 8002e80:	3304      	adds	r3, #4
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	60bb      	str	r3, [r7, #8]
 8002e86:	69bb      	ldr	r3, [r7, #24]
 8002e88:	68ba      	ldr	r2, [r7, #8]
 8002e8a:	609a      	str	r2, [r3, #8]
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	689a      	ldr	r2, [r3, #8]
 8002e90:	69bb      	ldr	r3, [r7, #24]
 8002e92:	60da      	str	r2, [r3, #12]
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	69ba      	ldr	r2, [r7, #24]
 8002e9a:	3204      	adds	r2, #4
 8002e9c:	605a      	str	r2, [r3, #4]
 8002e9e:	69bb      	ldr	r3, [r7, #24]
 8002ea0:	1d1a      	adds	r2, r3, #4
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	609a      	str	r2, [r3, #8]
 8002ea6:	69bb      	ldr	r3, [r7, #24]
 8002ea8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002eaa:	4613      	mov	r3, r2
 8002eac:	009b      	lsls	r3, r3, #2
 8002eae:	4413      	add	r3, r2
 8002eb0:	009b      	lsls	r3, r3, #2
 8002eb2:	4a26      	ldr	r2, [pc, #152]	; (8002f4c <xTaskIncrementTick+0x21c>)
 8002eb4:	441a      	add	r2, r3
 8002eb6:	69bb      	ldr	r3, [r7, #24]
 8002eb8:	615a      	str	r2, [r3, #20]
 8002eba:	69bb      	ldr	r3, [r7, #24]
 8002ebc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ebe:	4923      	ldr	r1, [pc, #140]	; (8002f4c <xTaskIncrementTick+0x21c>)
 8002ec0:	4613      	mov	r3, r2
 8002ec2:	009b      	lsls	r3, r3, #2
 8002ec4:	4413      	add	r3, r2
 8002ec6:	009b      	lsls	r3, r3, #2
 8002ec8:	440b      	add	r3, r1
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	1c59      	adds	r1, r3, #1
 8002ece:	481f      	ldr	r0, [pc, #124]	; (8002f4c <xTaskIncrementTick+0x21c>)
 8002ed0:	4613      	mov	r3, r2
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	4413      	add	r3, r2
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	4403      	add	r3, r0
 8002eda:	6019      	str	r1, [r3, #0]
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002edc:	69bb      	ldr	r3, [r7, #24]
 8002ede:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ee0:	4b1b      	ldr	r3, [pc, #108]	; (8002f50 <xTaskIncrementTick+0x220>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	f4ff af5d 	bcc.w	8002da6 <xTaskIncrementTick+0x76>
                            {
                                xSwitchRequired = pdTRUE;
 8002eec:	2301      	movs	r3, #1
 8002eee:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002ef0:	e759      	b.n	8002da6 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002ef2:	4b17      	ldr	r3, [pc, #92]	; (8002f50 <xTaskIncrementTick+0x220>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ef8:	4914      	ldr	r1, [pc, #80]	; (8002f4c <xTaskIncrementTick+0x21c>)
 8002efa:	4613      	mov	r3, r2
 8002efc:	009b      	lsls	r3, r3, #2
 8002efe:	4413      	add	r3, r2
 8002f00:	009b      	lsls	r3, r3, #2
 8002f02:	440b      	add	r3, r1
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d901      	bls.n	8002f0e <xTaskIncrementTick+0x1de>
                {
                    xSwitchRequired = pdTRUE;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	627b      	str	r3, [r7, #36]	; 0x24
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8002f0e:	4b11      	ldr	r3, [pc, #68]	; (8002f54 <xTaskIncrementTick+0x224>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d007      	beq.n	8002f26 <xTaskIncrementTick+0x1f6>
                {
                    xSwitchRequired = pdTRUE;
 8002f16:	2301      	movs	r3, #1
 8002f18:	627b      	str	r3, [r7, #36]	; 0x24
 8002f1a:	e004      	b.n	8002f26 <xTaskIncrementTick+0x1f6>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002f1c:	4b0e      	ldr	r3, [pc, #56]	; (8002f58 <xTaskIncrementTick+0x228>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	3301      	adds	r3, #1
 8002f22:	4a0d      	ldr	r2, [pc, #52]	; (8002f58 <xTaskIncrementTick+0x228>)
 8002f24:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8002f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	3728      	adds	r7, #40	; 0x28
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}
 8002f30:	2000017c 	.word	0x2000017c
 8002f34:	20000158 	.word	0x20000158
 8002f38:	20000124 	.word	0x20000124
 8002f3c:	20000128 	.word	0x20000128
 8002f40:	2000016c 	.word	0x2000016c
 8002f44:	20000174 	.word	0x20000174
 8002f48:	2000015c 	.word	0x2000015c
 8002f4c:	20000098 	.word	0x20000098
 8002f50:	20000094 	.word	0x20000094
 8002f54:	20000168 	.word	0x20000168
 8002f58:	20000164 	.word	0x20000164

08002f5c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b087      	sub	sp, #28
 8002f60:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002f62:	4b27      	ldr	r3, [pc, #156]	; (8003000 <vTaskSwitchContext+0xa4>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d003      	beq.n	8002f72 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002f6a:	4b26      	ldr	r3, [pc, #152]	; (8003004 <vTaskSwitchContext+0xa8>)
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8002f70:	e03f      	b.n	8002ff2 <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 8002f72:	4b24      	ldr	r3, [pc, #144]	; (8003004 <vTaskSwitchContext+0xa8>)
 8002f74:	2200      	movs	r2, #0
 8002f76:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002f78:	4b23      	ldr	r3, [pc, #140]	; (8003008 <vTaskSwitchContext+0xac>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	fab3 f383 	clz	r3, r3
 8002f84:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8002f86:	7afb      	ldrb	r3, [r7, #11]
 8002f88:	f1c3 031f 	rsb	r3, r3, #31
 8002f8c:	617b      	str	r3, [r7, #20]
 8002f8e:	491f      	ldr	r1, [pc, #124]	; (800300c <vTaskSwitchContext+0xb0>)
 8002f90:	697a      	ldr	r2, [r7, #20]
 8002f92:	4613      	mov	r3, r2
 8002f94:	009b      	lsls	r3, r3, #2
 8002f96:	4413      	add	r3, r2
 8002f98:	009b      	lsls	r3, r3, #2
 8002f9a:	440b      	add	r3, r1
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d10a      	bne.n	8002fb8 <vTaskSwitchContext+0x5c>
        __asm volatile
 8002fa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fa6:	f383 8811 	msr	BASEPRI, r3
 8002faa:	f3bf 8f6f 	isb	sy
 8002fae:	f3bf 8f4f 	dsb	sy
 8002fb2:	607b      	str	r3, [r7, #4]
    }
 8002fb4:	bf00      	nop
 8002fb6:	e7fe      	b.n	8002fb6 <vTaskSwitchContext+0x5a>
 8002fb8:	697a      	ldr	r2, [r7, #20]
 8002fba:	4613      	mov	r3, r2
 8002fbc:	009b      	lsls	r3, r3, #2
 8002fbe:	4413      	add	r3, r2
 8002fc0:	009b      	lsls	r3, r3, #2
 8002fc2:	4a12      	ldr	r2, [pc, #72]	; (800300c <vTaskSwitchContext+0xb0>)
 8002fc4:	4413      	add	r3, r2
 8002fc6:	613b      	str	r3, [r7, #16]
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	685a      	ldr	r2, [r3, #4]
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	605a      	str	r2, [r3, #4]
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	685a      	ldr	r2, [r3, #4]
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	3308      	adds	r3, #8
 8002fda:	429a      	cmp	r2, r3
 8002fdc:	d104      	bne.n	8002fe8 <vTaskSwitchContext+0x8c>
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	685a      	ldr	r2, [r3, #4]
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	605a      	str	r2, [r3, #4]
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	68db      	ldr	r3, [r3, #12]
 8002fee:	4a08      	ldr	r2, [pc, #32]	; (8003010 <vTaskSwitchContext+0xb4>)
 8002ff0:	6013      	str	r3, [r2, #0]
}
 8002ff2:	bf00      	nop
 8002ff4:	371c      	adds	r7, #28
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffc:	4770      	bx	lr
 8002ffe:	bf00      	nop
 8003000:	2000017c 	.word	0x2000017c
 8003004:	20000168 	.word	0x20000168
 8003008:	2000015c 	.word	0x2000015c
 800300c:	20000098 	.word	0x20000098
 8003010:	20000094 	.word	0x20000094

08003014 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b084      	sub	sp, #16
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
 800301c:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d10a      	bne.n	800303a <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8003024:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003028:	f383 8811 	msr	BASEPRI, r3
 800302c:	f3bf 8f6f 	isb	sy
 8003030:	f3bf 8f4f 	dsb	sy
 8003034:	60fb      	str	r3, [r7, #12]
    }
 8003036:	bf00      	nop
 8003038:	e7fe      	b.n	8003038 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800303a:	4b07      	ldr	r3, [pc, #28]	; (8003058 <vTaskPlaceOnEventList+0x44>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	3318      	adds	r3, #24
 8003040:	4619      	mov	r1, r3
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f7ff f837 	bl	80020b6 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003048:	2101      	movs	r1, #1
 800304a:	6838      	ldr	r0, [r7, #0]
 800304c:	f000 fa3e 	bl	80034cc <prvAddCurrentTaskToDelayedList>
}
 8003050:	bf00      	nop
 8003052:	3710      	adds	r7, #16
 8003054:	46bd      	mov	sp, r7
 8003056:	bd80      	pop	{r7, pc}
 8003058:	20000094 	.word	0x20000094

0800305c <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 800305c:	b580      	push	{r7, lr}
 800305e:	b086      	sub	sp, #24
 8003060:	af00      	add	r7, sp, #0
 8003062:	60f8      	str	r0, [r7, #12]
 8003064:	60b9      	str	r1, [r7, #8]
 8003066:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d10a      	bne.n	8003084 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 800306e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003072:	f383 8811 	msr	BASEPRI, r3
 8003076:	f3bf 8f6f 	isb	sy
 800307a:	f3bf 8f4f 	dsb	sy
 800307e:	613b      	str	r3, [r7, #16]
    }
 8003080:	bf00      	nop
 8003082:	e7fe      	b.n	8003082 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	617b      	str	r3, [r7, #20]
 800308a:	4b16      	ldr	r3, [pc, #88]	; (80030e4 <vTaskPlaceOnEventListRestricted+0x88>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	697a      	ldr	r2, [r7, #20]
 8003090:	61da      	str	r2, [r3, #28]
 8003092:	4b14      	ldr	r3, [pc, #80]	; (80030e4 <vTaskPlaceOnEventListRestricted+0x88>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	697a      	ldr	r2, [r7, #20]
 8003098:	6892      	ldr	r2, [r2, #8]
 800309a:	621a      	str	r2, [r3, #32]
 800309c:	4b11      	ldr	r3, [pc, #68]	; (80030e4 <vTaskPlaceOnEventListRestricted+0x88>)
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	3218      	adds	r2, #24
 80030a6:	605a      	str	r2, [r3, #4]
 80030a8:	4b0e      	ldr	r3, [pc, #56]	; (80030e4 <vTaskPlaceOnEventListRestricted+0x88>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f103 0218 	add.w	r2, r3, #24
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	609a      	str	r2, [r3, #8]
 80030b4:	4b0b      	ldr	r3, [pc, #44]	; (80030e4 <vTaskPlaceOnEventListRestricted+0x88>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	68fa      	ldr	r2, [r7, #12]
 80030ba:	629a      	str	r2, [r3, #40]	; 0x28
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	1c5a      	adds	r2, r3, #1
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d002      	beq.n	80030d2 <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 80030cc:	f04f 33ff 	mov.w	r3, #4294967295
 80030d0:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80030d2:	6879      	ldr	r1, [r7, #4]
 80030d4:	68b8      	ldr	r0, [r7, #8]
 80030d6:	f000 f9f9 	bl	80034cc <prvAddCurrentTaskToDelayedList>
    }
 80030da:	bf00      	nop
 80030dc:	3718      	adds	r7, #24
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	bf00      	nop
 80030e4:	20000094 	.word	0x20000094

080030e8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80030e8:	b480      	push	{r7}
 80030ea:	b08b      	sub	sp, #44	; 0x2c
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	68db      	ldr	r3, [r3, #12]
 80030f4:	68db      	ldr	r3, [r3, #12]
 80030f6:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 80030f8:	6a3b      	ldr	r3, [r7, #32]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d10a      	bne.n	8003114 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 80030fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003102:	f383 8811 	msr	BASEPRI, r3
 8003106:	f3bf 8f6f 	isb	sy
 800310a:	f3bf 8f4f 	dsb	sy
 800310e:	60fb      	str	r3, [r7, #12]
    }
 8003110:	bf00      	nop
 8003112:	e7fe      	b.n	8003112 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8003114:	6a3b      	ldr	r3, [r7, #32]
 8003116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003118:	61fb      	str	r3, [r7, #28]
 800311a:	6a3b      	ldr	r3, [r7, #32]
 800311c:	69db      	ldr	r3, [r3, #28]
 800311e:	6a3a      	ldr	r2, [r7, #32]
 8003120:	6a12      	ldr	r2, [r2, #32]
 8003122:	609a      	str	r2, [r3, #8]
 8003124:	6a3b      	ldr	r3, [r7, #32]
 8003126:	6a1b      	ldr	r3, [r3, #32]
 8003128:	6a3a      	ldr	r2, [r7, #32]
 800312a:	69d2      	ldr	r2, [r2, #28]
 800312c:	605a      	str	r2, [r3, #4]
 800312e:	69fb      	ldr	r3, [r7, #28]
 8003130:	685a      	ldr	r2, [r3, #4]
 8003132:	6a3b      	ldr	r3, [r7, #32]
 8003134:	3318      	adds	r3, #24
 8003136:	429a      	cmp	r2, r3
 8003138:	d103      	bne.n	8003142 <xTaskRemoveFromEventList+0x5a>
 800313a:	6a3b      	ldr	r3, [r7, #32]
 800313c:	6a1a      	ldr	r2, [r3, #32]
 800313e:	69fb      	ldr	r3, [r7, #28]
 8003140:	605a      	str	r2, [r3, #4]
 8003142:	6a3b      	ldr	r3, [r7, #32]
 8003144:	2200      	movs	r2, #0
 8003146:	629a      	str	r2, [r3, #40]	; 0x28
 8003148:	69fb      	ldr	r3, [r7, #28]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	1e5a      	subs	r2, r3, #1
 800314e:	69fb      	ldr	r3, [r7, #28]
 8003150:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003152:	4b4a      	ldr	r3, [pc, #296]	; (800327c <xTaskRemoveFromEventList+0x194>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d15e      	bne.n	8003218 <xTaskRemoveFromEventList+0x130>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 800315a:	6a3b      	ldr	r3, [r7, #32]
 800315c:	695b      	ldr	r3, [r3, #20]
 800315e:	617b      	str	r3, [r7, #20]
 8003160:	6a3b      	ldr	r3, [r7, #32]
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	6a3a      	ldr	r2, [r7, #32]
 8003166:	68d2      	ldr	r2, [r2, #12]
 8003168:	609a      	str	r2, [r3, #8]
 800316a:	6a3b      	ldr	r3, [r7, #32]
 800316c:	68db      	ldr	r3, [r3, #12]
 800316e:	6a3a      	ldr	r2, [r7, #32]
 8003170:	6892      	ldr	r2, [r2, #8]
 8003172:	605a      	str	r2, [r3, #4]
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	685a      	ldr	r2, [r3, #4]
 8003178:	6a3b      	ldr	r3, [r7, #32]
 800317a:	3304      	adds	r3, #4
 800317c:	429a      	cmp	r2, r3
 800317e:	d103      	bne.n	8003188 <xTaskRemoveFromEventList+0xa0>
 8003180:	6a3b      	ldr	r3, [r7, #32]
 8003182:	68da      	ldr	r2, [r3, #12]
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	605a      	str	r2, [r3, #4]
 8003188:	6a3b      	ldr	r3, [r7, #32]
 800318a:	2200      	movs	r2, #0
 800318c:	615a      	str	r2, [r3, #20]
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	1e5a      	subs	r2, r3, #1
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8003198:	6a3b      	ldr	r3, [r7, #32]
 800319a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800319c:	2201      	movs	r2, #1
 800319e:	409a      	lsls	r2, r3
 80031a0:	4b37      	ldr	r3, [pc, #220]	; (8003280 <xTaskRemoveFromEventList+0x198>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4313      	orrs	r3, r2
 80031a6:	4a36      	ldr	r2, [pc, #216]	; (8003280 <xTaskRemoveFromEventList+0x198>)
 80031a8:	6013      	str	r3, [r2, #0]
 80031aa:	6a3b      	ldr	r3, [r7, #32]
 80031ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031ae:	4935      	ldr	r1, [pc, #212]	; (8003284 <xTaskRemoveFromEventList+0x19c>)
 80031b0:	4613      	mov	r3, r2
 80031b2:	009b      	lsls	r3, r3, #2
 80031b4:	4413      	add	r3, r2
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	440b      	add	r3, r1
 80031ba:	3304      	adds	r3, #4
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	613b      	str	r3, [r7, #16]
 80031c0:	6a3b      	ldr	r3, [r7, #32]
 80031c2:	693a      	ldr	r2, [r7, #16]
 80031c4:	609a      	str	r2, [r3, #8]
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	689a      	ldr	r2, [r3, #8]
 80031ca:	6a3b      	ldr	r3, [r7, #32]
 80031cc:	60da      	str	r2, [r3, #12]
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	6a3a      	ldr	r2, [r7, #32]
 80031d4:	3204      	adds	r2, #4
 80031d6:	605a      	str	r2, [r3, #4]
 80031d8:	6a3b      	ldr	r3, [r7, #32]
 80031da:	1d1a      	adds	r2, r3, #4
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	609a      	str	r2, [r3, #8]
 80031e0:	6a3b      	ldr	r3, [r7, #32]
 80031e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031e4:	4613      	mov	r3, r2
 80031e6:	009b      	lsls	r3, r3, #2
 80031e8:	4413      	add	r3, r2
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	4a25      	ldr	r2, [pc, #148]	; (8003284 <xTaskRemoveFromEventList+0x19c>)
 80031ee:	441a      	add	r2, r3
 80031f0:	6a3b      	ldr	r3, [r7, #32]
 80031f2:	615a      	str	r2, [r3, #20]
 80031f4:	6a3b      	ldr	r3, [r7, #32]
 80031f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031f8:	4922      	ldr	r1, [pc, #136]	; (8003284 <xTaskRemoveFromEventList+0x19c>)
 80031fa:	4613      	mov	r3, r2
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	4413      	add	r3, r2
 8003200:	009b      	lsls	r3, r3, #2
 8003202:	440b      	add	r3, r1
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	1c59      	adds	r1, r3, #1
 8003208:	481e      	ldr	r0, [pc, #120]	; (8003284 <xTaskRemoveFromEventList+0x19c>)
 800320a:	4613      	mov	r3, r2
 800320c:	009b      	lsls	r3, r3, #2
 800320e:	4413      	add	r3, r2
 8003210:	009b      	lsls	r3, r3, #2
 8003212:	4403      	add	r3, r0
 8003214:	6019      	str	r1, [r3, #0]
 8003216:	e01b      	b.n	8003250 <xTaskRemoveFromEventList+0x168>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003218:	4b1b      	ldr	r3, [pc, #108]	; (8003288 <xTaskRemoveFromEventList+0x1a0>)
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	61bb      	str	r3, [r7, #24]
 800321e:	6a3b      	ldr	r3, [r7, #32]
 8003220:	69ba      	ldr	r2, [r7, #24]
 8003222:	61da      	str	r2, [r3, #28]
 8003224:	69bb      	ldr	r3, [r7, #24]
 8003226:	689a      	ldr	r2, [r3, #8]
 8003228:	6a3b      	ldr	r3, [r7, #32]
 800322a:	621a      	str	r2, [r3, #32]
 800322c:	69bb      	ldr	r3, [r7, #24]
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	6a3a      	ldr	r2, [r7, #32]
 8003232:	3218      	adds	r2, #24
 8003234:	605a      	str	r2, [r3, #4]
 8003236:	6a3b      	ldr	r3, [r7, #32]
 8003238:	f103 0218 	add.w	r2, r3, #24
 800323c:	69bb      	ldr	r3, [r7, #24]
 800323e:	609a      	str	r2, [r3, #8]
 8003240:	6a3b      	ldr	r3, [r7, #32]
 8003242:	4a11      	ldr	r2, [pc, #68]	; (8003288 <xTaskRemoveFromEventList+0x1a0>)
 8003244:	629a      	str	r2, [r3, #40]	; 0x28
 8003246:	4b10      	ldr	r3, [pc, #64]	; (8003288 <xTaskRemoveFromEventList+0x1a0>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	3301      	adds	r3, #1
 800324c:	4a0e      	ldr	r2, [pc, #56]	; (8003288 <xTaskRemoveFromEventList+0x1a0>)
 800324e:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003250:	6a3b      	ldr	r3, [r7, #32]
 8003252:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003254:	4b0d      	ldr	r3, [pc, #52]	; (800328c <xTaskRemoveFromEventList+0x1a4>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800325a:	429a      	cmp	r2, r3
 800325c:	d905      	bls.n	800326a <xTaskRemoveFromEventList+0x182>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800325e:	2301      	movs	r3, #1
 8003260:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8003262:	4b0b      	ldr	r3, [pc, #44]	; (8003290 <xTaskRemoveFromEventList+0x1a8>)
 8003264:	2201      	movs	r2, #1
 8003266:	601a      	str	r2, [r3, #0]
 8003268:	e001      	b.n	800326e <xTaskRemoveFromEventList+0x186>
    }
    else
    {
        xReturn = pdFALSE;
 800326a:	2300      	movs	r3, #0
 800326c:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 800326e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003270:	4618      	mov	r0, r3
 8003272:	372c      	adds	r7, #44	; 0x2c
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr
 800327c:	2000017c 	.word	0x2000017c
 8003280:	2000015c 	.word	0x2000015c
 8003284:	20000098 	.word	0x20000098
 8003288:	2000012c 	.word	0x2000012c
 800328c:	20000094 	.word	0x20000094
 8003290:	20000168 	.word	0x20000168

08003294 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003294:	b480      	push	{r7}
 8003296:	b083      	sub	sp, #12
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 800329c:	4b06      	ldr	r3, [pc, #24]	; (80032b8 <vTaskInternalSetTimeOutState+0x24>)
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80032a4:	4b05      	ldr	r3, [pc, #20]	; (80032bc <vTaskInternalSetTimeOutState+0x28>)
 80032a6:	681a      	ldr	r2, [r3, #0]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	605a      	str	r2, [r3, #4]
}
 80032ac:	bf00      	nop
 80032ae:	370c      	adds	r7, #12
 80032b0:	46bd      	mov	sp, r7
 80032b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b6:	4770      	bx	lr
 80032b8:	2000016c 	.word	0x2000016c
 80032bc:	20000158 	.word	0x20000158

080032c0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b088      	sub	sp, #32
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
 80032c8:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d10a      	bne.n	80032e6 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 80032d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032d4:	f383 8811 	msr	BASEPRI, r3
 80032d8:	f3bf 8f6f 	isb	sy
 80032dc:	f3bf 8f4f 	dsb	sy
 80032e0:	613b      	str	r3, [r7, #16]
    }
 80032e2:	bf00      	nop
 80032e4:	e7fe      	b.n	80032e4 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d10a      	bne.n	8003302 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 80032ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032f0:	f383 8811 	msr	BASEPRI, r3
 80032f4:	f3bf 8f6f 	isb	sy
 80032f8:	f3bf 8f4f 	dsb	sy
 80032fc:	60fb      	str	r3, [r7, #12]
    }
 80032fe:	bf00      	nop
 8003300:	e7fe      	b.n	8003300 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8003302:	f000 fd19 	bl	8003d38 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003306:	4b1f      	ldr	r3, [pc, #124]	; (8003384 <xTaskCheckForTimeOut+0xc4>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	69ba      	ldr	r2, [r7, #24]
 8003312:	1ad3      	subs	r3, r2, r3
 8003314:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800331e:	d102      	bne.n	8003326 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003320:	2300      	movs	r3, #0
 8003322:	61fb      	str	r3, [r7, #28]
 8003324:	e026      	b.n	8003374 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	4b17      	ldr	r3, [pc, #92]	; (8003388 <xTaskCheckForTimeOut+0xc8>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	429a      	cmp	r2, r3
 8003330:	d00a      	beq.n	8003348 <xTaskCheckForTimeOut+0x88>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	69ba      	ldr	r2, [r7, #24]
 8003338:	429a      	cmp	r2, r3
 800333a:	d305      	bcc.n	8003348 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800333c:	2301      	movs	r3, #1
 800333e:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	2200      	movs	r2, #0
 8003344:	601a      	str	r2, [r3, #0]
 8003346:	e015      	b.n	8003374 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	697a      	ldr	r2, [r7, #20]
 800334e:	429a      	cmp	r2, r3
 8003350:	d20b      	bcs.n	800336a <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	681a      	ldr	r2, [r3, #0]
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	1ad2      	subs	r2, r2, r3
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800335e:	6878      	ldr	r0, [r7, #4]
 8003360:	f7ff ff98 	bl	8003294 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003364:	2300      	movs	r3, #0
 8003366:	61fb      	str	r3, [r7, #28]
 8003368:	e004      	b.n	8003374 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	2200      	movs	r2, #0
 800336e:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003370:	2301      	movs	r3, #1
 8003372:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003374:	f000 fd10 	bl	8003d98 <vPortExitCritical>

    return xReturn;
 8003378:	69fb      	ldr	r3, [r7, #28]
}
 800337a:	4618      	mov	r0, r3
 800337c:	3720      	adds	r7, #32
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}
 8003382:	bf00      	nop
 8003384:	20000158 	.word	0x20000158
 8003388:	2000016c 	.word	0x2000016c

0800338c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800338c:	b480      	push	{r7}
 800338e:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8003390:	4b03      	ldr	r3, [pc, #12]	; (80033a0 <vTaskMissedYield+0x14>)
 8003392:	2201      	movs	r2, #1
 8003394:	601a      	str	r2, [r3, #0]
}
 8003396:	bf00      	nop
 8003398:	46bd      	mov	sp, r7
 800339a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339e:	4770      	bx	lr
 80033a0:	20000168 	.word	0x20000168

080033a4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b082      	sub	sp, #8
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80033ac:	f000 f84c 	bl	8003448 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80033b0:	4b06      	ldr	r3, [pc, #24]	; (80033cc <prvIdleTask+0x28>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d9f9      	bls.n	80033ac <prvIdleTask+0x8>
                {
                    taskYIELD();
 80033b8:	4b05      	ldr	r3, [pc, #20]	; (80033d0 <prvIdleTask+0x2c>)
 80033ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033be:	601a      	str	r2, [r3, #0]
 80033c0:	f3bf 8f4f 	dsb	sy
 80033c4:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80033c8:	e7f0      	b.n	80033ac <prvIdleTask+0x8>
 80033ca:	bf00      	nop
 80033cc:	20000098 	.word	0x20000098
 80033d0:	e000ed04 	.word	0xe000ed04

080033d4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b082      	sub	sp, #8
 80033d8:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80033da:	2300      	movs	r3, #0
 80033dc:	607b      	str	r3, [r7, #4]
 80033de:	e00c      	b.n	80033fa <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80033e0:	687a      	ldr	r2, [r7, #4]
 80033e2:	4613      	mov	r3, r2
 80033e4:	009b      	lsls	r3, r3, #2
 80033e6:	4413      	add	r3, r2
 80033e8:	009b      	lsls	r3, r3, #2
 80033ea:	4a10      	ldr	r2, [pc, #64]	; (800342c <prvInitialiseTaskLists+0x58>)
 80033ec:	4413      	add	r3, r2
 80033ee:	4618      	mov	r0, r3
 80033f0:	f7fe fe34 	bl	800205c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	3301      	adds	r3, #1
 80033f8:	607b      	str	r3, [r7, #4]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2b04      	cmp	r3, #4
 80033fe:	d9ef      	bls.n	80033e0 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003400:	480b      	ldr	r0, [pc, #44]	; (8003430 <prvInitialiseTaskLists+0x5c>)
 8003402:	f7fe fe2b 	bl	800205c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003406:	480b      	ldr	r0, [pc, #44]	; (8003434 <prvInitialiseTaskLists+0x60>)
 8003408:	f7fe fe28 	bl	800205c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 800340c:	480a      	ldr	r0, [pc, #40]	; (8003438 <prvInitialiseTaskLists+0x64>)
 800340e:	f7fe fe25 	bl	800205c <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8003412:	480a      	ldr	r0, [pc, #40]	; (800343c <prvInitialiseTaskLists+0x68>)
 8003414:	f7fe fe22 	bl	800205c <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003418:	4b09      	ldr	r3, [pc, #36]	; (8003440 <prvInitialiseTaskLists+0x6c>)
 800341a:	4a05      	ldr	r2, [pc, #20]	; (8003430 <prvInitialiseTaskLists+0x5c>)
 800341c:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800341e:	4b09      	ldr	r3, [pc, #36]	; (8003444 <prvInitialiseTaskLists+0x70>)
 8003420:	4a04      	ldr	r2, [pc, #16]	; (8003434 <prvInitialiseTaskLists+0x60>)
 8003422:	601a      	str	r2, [r3, #0]
}
 8003424:	bf00      	nop
 8003426:	3708      	adds	r7, #8
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}
 800342c:	20000098 	.word	0x20000098
 8003430:	200000fc 	.word	0x200000fc
 8003434:	20000110 	.word	0x20000110
 8003438:	2000012c 	.word	0x2000012c
 800343c:	20000140 	.word	0x20000140
 8003440:	20000124 	.word	0x20000124
 8003444:	20000128 	.word	0x20000128

08003448 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003448:	b480      	push	{r7}
 800344a:	af00      	add	r7, sp, #0

                prvDeleteTCB( pxTCB );
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 800344c:	bf00      	nop
 800344e:	46bd      	mov	sp, r7
 8003450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003454:	4770      	bx	lr
	...

08003458 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003458:	b480      	push	{r7}
 800345a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800345c:	4b0a      	ldr	r3, [pc, #40]	; (8003488 <prvResetNextTaskUnblockTime+0x30>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d104      	bne.n	8003470 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003466:	4b09      	ldr	r3, [pc, #36]	; (800348c <prvResetNextTaskUnblockTime+0x34>)
 8003468:	f04f 32ff 	mov.w	r2, #4294967295
 800346c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800346e:	e005      	b.n	800347c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003470:	4b05      	ldr	r3, [pc, #20]	; (8003488 <prvResetNextTaskUnblockTime+0x30>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	68db      	ldr	r3, [r3, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a04      	ldr	r2, [pc, #16]	; (800348c <prvResetNextTaskUnblockTime+0x34>)
 800347a:	6013      	str	r3, [r2, #0]
}
 800347c:	bf00      	nop
 800347e:	46bd      	mov	sp, r7
 8003480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003484:	4770      	bx	lr
 8003486:	bf00      	nop
 8003488:	20000124 	.word	0x20000124
 800348c:	20000174 	.word	0x20000174

08003490 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003490:	b480      	push	{r7}
 8003492:	b083      	sub	sp, #12
 8003494:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8003496:	4b0b      	ldr	r3, [pc, #44]	; (80034c4 <xTaskGetSchedulerState+0x34>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d102      	bne.n	80034a4 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800349e:	2301      	movs	r3, #1
 80034a0:	607b      	str	r3, [r7, #4]
 80034a2:	e008      	b.n	80034b6 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80034a4:	4b08      	ldr	r3, [pc, #32]	; (80034c8 <xTaskGetSchedulerState+0x38>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d102      	bne.n	80034b2 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 80034ac:	2302      	movs	r3, #2
 80034ae:	607b      	str	r3, [r7, #4]
 80034b0:	e001      	b.n	80034b6 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 80034b2:	2300      	movs	r3, #0
 80034b4:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 80034b6:	687b      	ldr	r3, [r7, #4]
    }
 80034b8:	4618      	mov	r0, r3
 80034ba:	370c      	adds	r7, #12
 80034bc:	46bd      	mov	sp, r7
 80034be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c2:	4770      	bx	lr
 80034c4:	20000160 	.word	0x20000160
 80034c8:	2000017c 	.word	0x2000017c

080034cc <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b086      	sub	sp, #24
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
 80034d4:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80034d6:	4b36      	ldr	r3, [pc, #216]	; (80035b0 <prvAddCurrentTaskToDelayedList+0xe4>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	617b      	str	r3, [r7, #20]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80034dc:	4b35      	ldr	r3, [pc, #212]	; (80035b4 <prvAddCurrentTaskToDelayedList+0xe8>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	3304      	adds	r3, #4
 80034e2:	4618      	mov	r0, r3
 80034e4:	f7fe fe20 	bl	8002128 <uxListRemove>
 80034e8:	4603      	mov	r3, r0
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d10b      	bne.n	8003506 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80034ee:	4b31      	ldr	r3, [pc, #196]	; (80035b4 <prvAddCurrentTaskToDelayedList+0xe8>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034f4:	2201      	movs	r2, #1
 80034f6:	fa02 f303 	lsl.w	r3, r2, r3
 80034fa:	43da      	mvns	r2, r3
 80034fc:	4b2e      	ldr	r3, [pc, #184]	; (80035b8 <prvAddCurrentTaskToDelayedList+0xec>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4013      	ands	r3, r2
 8003502:	4a2d      	ldr	r2, [pc, #180]	; (80035b8 <prvAddCurrentTaskToDelayedList+0xec>)
 8003504:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	f1b3 3fff 	cmp.w	r3, #4294967295
 800350c:	d124      	bne.n	8003558 <prvAddCurrentTaskToDelayedList+0x8c>
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d021      	beq.n	8003558 <prvAddCurrentTaskToDelayedList+0x8c>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003514:	4b29      	ldr	r3, [pc, #164]	; (80035bc <prvAddCurrentTaskToDelayedList+0xf0>)
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	613b      	str	r3, [r7, #16]
 800351a:	4b26      	ldr	r3, [pc, #152]	; (80035b4 <prvAddCurrentTaskToDelayedList+0xe8>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	693a      	ldr	r2, [r7, #16]
 8003520:	609a      	str	r2, [r3, #8]
 8003522:	4b24      	ldr	r3, [pc, #144]	; (80035b4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	693a      	ldr	r2, [r7, #16]
 8003528:	6892      	ldr	r2, [r2, #8]
 800352a:	60da      	str	r2, [r3, #12]
 800352c:	4b21      	ldr	r3, [pc, #132]	; (80035b4 <prvAddCurrentTaskToDelayedList+0xe8>)
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	3204      	adds	r2, #4
 8003536:	605a      	str	r2, [r3, #4]
 8003538:	4b1e      	ldr	r3, [pc, #120]	; (80035b4 <prvAddCurrentTaskToDelayedList+0xe8>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	1d1a      	adds	r2, r3, #4
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	609a      	str	r2, [r3, #8]
 8003542:	4b1c      	ldr	r3, [pc, #112]	; (80035b4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a1d      	ldr	r2, [pc, #116]	; (80035bc <prvAddCurrentTaskToDelayedList+0xf0>)
 8003548:	615a      	str	r2, [r3, #20]
 800354a:	4b1c      	ldr	r3, [pc, #112]	; (80035bc <prvAddCurrentTaskToDelayedList+0xf0>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	3301      	adds	r3, #1
 8003550:	4a1a      	ldr	r2, [pc, #104]	; (80035bc <prvAddCurrentTaskToDelayedList+0xf0>)
 8003552:	6013      	str	r3, [r2, #0]
 8003554:	bf00      	nop

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003556:	e026      	b.n	80035a6 <prvAddCurrentTaskToDelayedList+0xda>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8003558:	697a      	ldr	r2, [r7, #20]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	4413      	add	r3, r2
 800355e:	60fb      	str	r3, [r7, #12]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003560:	4b14      	ldr	r3, [pc, #80]	; (80035b4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	68fa      	ldr	r2, [r7, #12]
 8003566:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8003568:	68fa      	ldr	r2, [r7, #12]
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	429a      	cmp	r2, r3
 800356e:	d209      	bcs.n	8003584 <prvAddCurrentTaskToDelayedList+0xb8>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003570:	4b13      	ldr	r3, [pc, #76]	; (80035c0 <prvAddCurrentTaskToDelayedList+0xf4>)
 8003572:	681a      	ldr	r2, [r3, #0]
 8003574:	4b0f      	ldr	r3, [pc, #60]	; (80035b4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	3304      	adds	r3, #4
 800357a:	4619      	mov	r1, r3
 800357c:	4610      	mov	r0, r2
 800357e:	f7fe fd9a 	bl	80020b6 <vListInsert>
}
 8003582:	e010      	b.n	80035a6 <prvAddCurrentTaskToDelayedList+0xda>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003584:	4b0f      	ldr	r3, [pc, #60]	; (80035c4 <prvAddCurrentTaskToDelayedList+0xf8>)
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	4b0a      	ldr	r3, [pc, #40]	; (80035b4 <prvAddCurrentTaskToDelayedList+0xe8>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	3304      	adds	r3, #4
 800358e:	4619      	mov	r1, r3
 8003590:	4610      	mov	r0, r2
 8003592:	f7fe fd90 	bl	80020b6 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8003596:	4b0c      	ldr	r3, [pc, #48]	; (80035c8 <prvAddCurrentTaskToDelayedList+0xfc>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	68fa      	ldr	r2, [r7, #12]
 800359c:	429a      	cmp	r2, r3
 800359e:	d202      	bcs.n	80035a6 <prvAddCurrentTaskToDelayedList+0xda>
                        xNextTaskUnblockTime = xTimeToWake;
 80035a0:	4a09      	ldr	r2, [pc, #36]	; (80035c8 <prvAddCurrentTaskToDelayedList+0xfc>)
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	6013      	str	r3, [r2, #0]
}
 80035a6:	bf00      	nop
 80035a8:	3718      	adds	r7, #24
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}
 80035ae:	bf00      	nop
 80035b0:	20000158 	.word	0x20000158
 80035b4:	20000094 	.word	0x20000094
 80035b8:	2000015c 	.word	0x2000015c
 80035bc:	20000140 	.word	0x20000140
 80035c0:	20000128 	.word	0x20000128
 80035c4:	20000124 	.word	0x20000124
 80035c8:	20000174 	.word	0x20000174

080035cc <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b084      	sub	sp, #16
 80035d0:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80035d2:	2300      	movs	r3, #0
 80035d4:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80035d6:	f000 fa47 	bl	8003a68 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80035da:	4b11      	ldr	r3, [pc, #68]	; (8003620 <xTimerCreateTimerTask+0x54>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d00b      	beq.n	80035fa <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 80035e2:	4b10      	ldr	r3, [pc, #64]	; (8003624 <xTimerCreateTimerTask+0x58>)
 80035e4:	9301      	str	r3, [sp, #4]
 80035e6:	2302      	movs	r3, #2
 80035e8:	9300      	str	r3, [sp, #0]
 80035ea:	2300      	movs	r3, #0
 80035ec:	f44f 7282 	mov.w	r2, #260	; 0x104
 80035f0:	490d      	ldr	r1, [pc, #52]	; (8003628 <xTimerCreateTimerTask+0x5c>)
 80035f2:	480e      	ldr	r0, [pc, #56]	; (800362c <xTimerCreateTimerTask+0x60>)
 80035f4:	f7ff f8b4 	bl	8002760 <xTaskCreate>
 80035f8:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d10a      	bne.n	8003616 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8003600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003604:	f383 8811 	msr	BASEPRI, r3
 8003608:	f3bf 8f6f 	isb	sy
 800360c:	f3bf 8f4f 	dsb	sy
 8003610:	603b      	str	r3, [r7, #0]
    }
 8003612:	bf00      	nop
 8003614:	e7fe      	b.n	8003614 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8003616:	687b      	ldr	r3, [r7, #4]
    }
 8003618:	4618      	mov	r0, r3
 800361a:	3708      	adds	r7, #8
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}
 8003620:	200001b0 	.word	0x200001b0
 8003624:	200001b4 	.word	0x200001b4
 8003628:	08004d74 	.word	0x08004d74
 800362c:	080036d5 	.word	0x080036d5

08003630 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8003630:	b580      	push	{r7, lr}
 8003632:	b084      	sub	sp, #16
 8003634:	af00      	add	r7, sp, #0
 8003636:	60f8      	str	r0, [r7, #12]
 8003638:	60b9      	str	r1, [r7, #8]
 800363a:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800363c:	e008      	b.n	8003650 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	699b      	ldr	r3, [r3, #24]
 8003642:	68ba      	ldr	r2, [r7, #8]
 8003644:	4413      	add	r3, r2
 8003646:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	6a1b      	ldr	r3, [r3, #32]
 800364c:	68f8      	ldr	r0, [r7, #12]
 800364e:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	699a      	ldr	r2, [r3, #24]
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	18d1      	adds	r1, r2, r3
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	687a      	ldr	r2, [r7, #4]
 800365c:	68f8      	ldr	r0, [r7, #12]
 800365e:	f000 f8dd 	bl	800381c <prvInsertTimerInActiveList>
 8003662:	4603      	mov	r3, r0
 8003664:	2b00      	cmp	r3, #0
 8003666:	d1ea      	bne.n	800363e <prvReloadTimer+0xe>
        }
    }
 8003668:	bf00      	nop
 800366a:	bf00      	nop
 800366c:	3710      	adds	r7, #16
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}
	...

08003674 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003674:	b580      	push	{r7, lr}
 8003676:	b084      	sub	sp, #16
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
 800367c:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800367e:	4b14      	ldr	r3, [pc, #80]	; (80036d0 <prvProcessExpiredTimer+0x5c>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	68db      	ldr	r3, [r3, #12]
 8003684:	68db      	ldr	r3, [r3, #12]
 8003686:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	3304      	adds	r3, #4
 800368c:	4618      	mov	r0, r3
 800368e:	f7fe fd4b 	bl	8002128 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003698:	f003 0304 	and.w	r3, r3, #4
 800369c:	2b00      	cmp	r3, #0
 800369e:	d005      	beq.n	80036ac <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 80036a0:	683a      	ldr	r2, [r7, #0]
 80036a2:	6879      	ldr	r1, [r7, #4]
 80036a4:	68f8      	ldr	r0, [r7, #12]
 80036a6:	f7ff ffc3 	bl	8003630 <prvReloadTimer>
 80036aa:	e008      	b.n	80036be <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80036b2:	f023 0301 	bic.w	r3, r3, #1
 80036b6:	b2da      	uxtb	r2, r3
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	6a1b      	ldr	r3, [r3, #32]
 80036c2:	68f8      	ldr	r0, [r7, #12]
 80036c4:	4798      	blx	r3
    }
 80036c6:	bf00      	nop
 80036c8:	3710      	adds	r7, #16
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}
 80036ce:	bf00      	nop
 80036d0:	200001a8 	.word	0x200001a8

080036d4 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b084      	sub	sp, #16
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80036dc:	f107 0308 	add.w	r3, r7, #8
 80036e0:	4618      	mov	r0, r3
 80036e2:	f000 f857 	bl	8003794 <prvGetNextExpireTime>
 80036e6:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	4619      	mov	r1, r3
 80036ec:	68f8      	ldr	r0, [r7, #12]
 80036ee:	f000 f803 	bl	80036f8 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80036f2:	f000 f8d5 	bl	80038a0 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80036f6:	e7f1      	b.n	80036dc <prvTimerTask+0x8>

080036f8 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b084      	sub	sp, #16
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
 8003700:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8003702:	f7ff f9fb 	bl	8002afc <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003706:	f107 0308 	add.w	r3, r7, #8
 800370a:	4618      	mov	r0, r3
 800370c:	f000 f866 	bl	80037dc <prvSampleTimeNow>
 8003710:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d130      	bne.n	800377a <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d10a      	bne.n	8003734 <prvProcessTimerOrBlockTask+0x3c>
 800371e:	687a      	ldr	r2, [r7, #4]
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	429a      	cmp	r2, r3
 8003724:	d806      	bhi.n	8003734 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8003726:	f7ff f9f7 	bl	8002b18 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800372a:	68f9      	ldr	r1, [r7, #12]
 800372c:	6878      	ldr	r0, [r7, #4]
 800372e:	f7ff ffa1 	bl	8003674 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8003732:	e024      	b.n	800377e <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d008      	beq.n	800374c <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800373a:	4b13      	ldr	r3, [pc, #76]	; (8003788 <prvProcessTimerOrBlockTask+0x90>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d101      	bne.n	8003748 <prvProcessTimerOrBlockTask+0x50>
 8003744:	2301      	movs	r3, #1
 8003746:	e000      	b.n	800374a <prvProcessTimerOrBlockTask+0x52>
 8003748:	2300      	movs	r3, #0
 800374a:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800374c:	4b0f      	ldr	r3, [pc, #60]	; (800378c <prvProcessTimerOrBlockTask+0x94>)
 800374e:	6818      	ldr	r0, [r3, #0]
 8003750:	687a      	ldr	r2, [r7, #4]
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	1ad3      	subs	r3, r2, r3
 8003756:	683a      	ldr	r2, [r7, #0]
 8003758:	4619      	mov	r1, r3
 800375a:	f7fe ffcd 	bl	80026f8 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800375e:	f7ff f9db 	bl	8002b18 <xTaskResumeAll>
 8003762:	4603      	mov	r3, r0
 8003764:	2b00      	cmp	r3, #0
 8003766:	d10a      	bne.n	800377e <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8003768:	4b09      	ldr	r3, [pc, #36]	; (8003790 <prvProcessTimerOrBlockTask+0x98>)
 800376a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800376e:	601a      	str	r2, [r3, #0]
 8003770:	f3bf 8f4f 	dsb	sy
 8003774:	f3bf 8f6f 	isb	sy
    }
 8003778:	e001      	b.n	800377e <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800377a:	f7ff f9cd 	bl	8002b18 <xTaskResumeAll>
    }
 800377e:	bf00      	nop
 8003780:	3710      	adds	r7, #16
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}
 8003786:	bf00      	nop
 8003788:	200001ac 	.word	0x200001ac
 800378c:	200001b0 	.word	0x200001b0
 8003790:	e000ed04 	.word	0xe000ed04

08003794 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003794:	b480      	push	{r7}
 8003796:	b085      	sub	sp, #20
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800379c:	4b0e      	ldr	r3, [pc, #56]	; (80037d8 <prvGetNextExpireTime+0x44>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d101      	bne.n	80037aa <prvGetNextExpireTime+0x16>
 80037a6:	2201      	movs	r2, #1
 80037a8:	e000      	b.n	80037ac <prvGetNextExpireTime+0x18>
 80037aa:	2200      	movs	r2, #0
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d105      	bne.n	80037c4 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80037b8:	4b07      	ldr	r3, [pc, #28]	; (80037d8 <prvGetNextExpireTime+0x44>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	68db      	ldr	r3, [r3, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	60fb      	str	r3, [r7, #12]
 80037c2:	e001      	b.n	80037c8 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80037c4:	2300      	movs	r3, #0
 80037c6:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 80037c8:	68fb      	ldr	r3, [r7, #12]
    }
 80037ca:	4618      	mov	r0, r3
 80037cc:	3714      	adds	r7, #20
 80037ce:	46bd      	mov	sp, r7
 80037d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d4:	4770      	bx	lr
 80037d6:	bf00      	nop
 80037d8:	200001a8 	.word	0x200001a8

080037dc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 80037dc:	b580      	push	{r7, lr}
 80037de:	b084      	sub	sp, #16
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 80037e4:	f7ff fa94 	bl	8002d10 <xTaskGetTickCount>
 80037e8:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 80037ea:	4b0b      	ldr	r3, [pc, #44]	; (8003818 <prvSampleTimeNow+0x3c>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	68fa      	ldr	r2, [r7, #12]
 80037f0:	429a      	cmp	r2, r3
 80037f2:	d205      	bcs.n	8003800 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 80037f4:	f000 f912 	bl	8003a1c <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2201      	movs	r2, #1
 80037fc:	601a      	str	r2, [r3, #0]
 80037fe:	e002      	b.n	8003806 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2200      	movs	r2, #0
 8003804:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8003806:	4a04      	ldr	r2, [pc, #16]	; (8003818 <prvSampleTimeNow+0x3c>)
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 800380c:	68fb      	ldr	r3, [r7, #12]
    }
 800380e:	4618      	mov	r0, r3
 8003810:	3710      	adds	r7, #16
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}
 8003816:	bf00      	nop
 8003818:	200001b8 	.word	0x200001b8

0800381c <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 800381c:	b580      	push	{r7, lr}
 800381e:	b086      	sub	sp, #24
 8003820:	af00      	add	r7, sp, #0
 8003822:	60f8      	str	r0, [r7, #12]
 8003824:	60b9      	str	r1, [r7, #8]
 8003826:	607a      	str	r2, [r7, #4]
 8003828:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800382a:	2300      	movs	r3, #0
 800382c:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	68ba      	ldr	r2, [r7, #8]
 8003832:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	68fa      	ldr	r2, [r7, #12]
 8003838:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800383a:	68ba      	ldr	r2, [r7, #8]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	429a      	cmp	r2, r3
 8003840:	d812      	bhi.n	8003868 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003842:	687a      	ldr	r2, [r7, #4]
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	1ad2      	subs	r2, r2, r3
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	699b      	ldr	r3, [r3, #24]
 800384c:	429a      	cmp	r2, r3
 800384e:	d302      	bcc.n	8003856 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003850:	2301      	movs	r3, #1
 8003852:	617b      	str	r3, [r7, #20]
 8003854:	e01b      	b.n	800388e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003856:	4b10      	ldr	r3, [pc, #64]	; (8003898 <prvInsertTimerInActiveList+0x7c>)
 8003858:	681a      	ldr	r2, [r3, #0]
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	3304      	adds	r3, #4
 800385e:	4619      	mov	r1, r3
 8003860:	4610      	mov	r0, r2
 8003862:	f7fe fc28 	bl	80020b6 <vListInsert>
 8003866:	e012      	b.n	800388e <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003868:	687a      	ldr	r2, [r7, #4]
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	429a      	cmp	r2, r3
 800386e:	d206      	bcs.n	800387e <prvInsertTimerInActiveList+0x62>
 8003870:	68ba      	ldr	r2, [r7, #8]
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	429a      	cmp	r2, r3
 8003876:	d302      	bcc.n	800387e <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003878:	2301      	movs	r3, #1
 800387a:	617b      	str	r3, [r7, #20]
 800387c:	e007      	b.n	800388e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800387e:	4b07      	ldr	r3, [pc, #28]	; (800389c <prvInsertTimerInActiveList+0x80>)
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	3304      	adds	r3, #4
 8003886:	4619      	mov	r1, r3
 8003888:	4610      	mov	r0, r2
 800388a:	f7fe fc14 	bl	80020b6 <vListInsert>
            }
        }

        return xProcessTimerNow;
 800388e:	697b      	ldr	r3, [r7, #20]
    }
 8003890:	4618      	mov	r0, r3
 8003892:	3718      	adds	r7, #24
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}
 8003898:	200001ac 	.word	0x200001ac
 800389c:	200001a8 	.word	0x200001a8

080038a0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b088      	sub	sp, #32
 80038a4:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80038a6:	e0a6      	b.n	80039f6 <prvProcessReceivedCommands+0x156>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	f2c0 80a2 	blt.w	80039f4 <prvProcessReceivedCommands+0x154>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80038b4:	69fb      	ldr	r3, [r7, #28]
 80038b6:	695b      	ldr	r3, [r3, #20]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d004      	beq.n	80038c6 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80038bc:	69fb      	ldr	r3, [r7, #28]
 80038be:	3304      	adds	r3, #4
 80038c0:	4618      	mov	r0, r3
 80038c2:	f7fe fc31 	bl	8002128 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80038c6:	1d3b      	adds	r3, r7, #4
 80038c8:	4618      	mov	r0, r3
 80038ca:	f7ff ff87 	bl	80037dc <prvSampleTimeNow>
 80038ce:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	3b01      	subs	r3, #1
 80038d4:	2b08      	cmp	r3, #8
 80038d6:	f200 808e 	bhi.w	80039f6 <prvProcessReceivedCommands+0x156>
 80038da:	a201      	add	r2, pc, #4	; (adr r2, 80038e0 <prvProcessReceivedCommands+0x40>)
 80038dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038e0:	08003905 	.word	0x08003905
 80038e4:	08003905 	.word	0x08003905
 80038e8:	0800396d 	.word	0x0800396d
 80038ec:	08003981 	.word	0x08003981
 80038f0:	080039cb 	.word	0x080039cb
 80038f4:	08003905 	.word	0x08003905
 80038f8:	08003905 	.word	0x08003905
 80038fc:	0800396d 	.word	0x0800396d
 8003900:	08003981 	.word	0x08003981
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003904:	69fb      	ldr	r3, [r7, #28]
 8003906:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800390a:	f043 0301 	orr.w	r3, r3, #1
 800390e:	b2da      	uxtb	r2, r3
 8003910:	69fb      	ldr	r3, [r7, #28]
 8003912:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003916:	68fa      	ldr	r2, [r7, #12]
 8003918:	69fb      	ldr	r3, [r7, #28]
 800391a:	699b      	ldr	r3, [r3, #24]
 800391c:	18d1      	adds	r1, r2, r3
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	69ba      	ldr	r2, [r7, #24]
 8003922:	69f8      	ldr	r0, [r7, #28]
 8003924:	f7ff ff7a 	bl	800381c <prvInsertTimerInActiveList>
 8003928:	4603      	mov	r3, r0
 800392a:	2b00      	cmp	r3, #0
 800392c:	d063      	beq.n	80039f6 <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800392e:	69fb      	ldr	r3, [r7, #28]
 8003930:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003934:	f003 0304 	and.w	r3, r3, #4
 8003938:	2b00      	cmp	r3, #0
 800393a:	d009      	beq.n	8003950 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 800393c:	68fa      	ldr	r2, [r7, #12]
 800393e:	69fb      	ldr	r3, [r7, #28]
 8003940:	699b      	ldr	r3, [r3, #24]
 8003942:	4413      	add	r3, r2
 8003944:	69ba      	ldr	r2, [r7, #24]
 8003946:	4619      	mov	r1, r3
 8003948:	69f8      	ldr	r0, [r7, #28]
 800394a:	f7ff fe71 	bl	8003630 <prvReloadTimer>
 800394e:	e008      	b.n	8003962 <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003950:	69fb      	ldr	r3, [r7, #28]
 8003952:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003956:	f023 0301 	bic.w	r3, r3, #1
 800395a:	b2da      	uxtb	r2, r3
 800395c:	69fb      	ldr	r3, [r7, #28]
 800395e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003962:	69fb      	ldr	r3, [r7, #28]
 8003964:	6a1b      	ldr	r3, [r3, #32]
 8003966:	69f8      	ldr	r0, [r7, #28]
 8003968:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 800396a:	e044      	b.n	80039f6 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800396c:	69fb      	ldr	r3, [r7, #28]
 800396e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003972:	f023 0301 	bic.w	r3, r3, #1
 8003976:	b2da      	uxtb	r2, r3
 8003978:	69fb      	ldr	r3, [r7, #28]
 800397a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 800397e:	e03a      	b.n	80039f6 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003980:	69fb      	ldr	r3, [r7, #28]
 8003982:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003986:	f043 0301 	orr.w	r3, r3, #1
 800398a:	b2da      	uxtb	r2, r3
 800398c:	69fb      	ldr	r3, [r7, #28]
 800398e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003992:	68fa      	ldr	r2, [r7, #12]
 8003994:	69fb      	ldr	r3, [r7, #28]
 8003996:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003998:	69fb      	ldr	r3, [r7, #28]
 800399a:	699b      	ldr	r3, [r3, #24]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d10a      	bne.n	80039b6 <prvProcessReceivedCommands+0x116>
        __asm volatile
 80039a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039a4:	f383 8811 	msr	BASEPRI, r3
 80039a8:	f3bf 8f6f 	isb	sy
 80039ac:	f3bf 8f4f 	dsb	sy
 80039b0:	617b      	str	r3, [r7, #20]
    }
 80039b2:	bf00      	nop
 80039b4:	e7fe      	b.n	80039b4 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80039b6:	69fb      	ldr	r3, [r7, #28]
 80039b8:	699a      	ldr	r2, [r3, #24]
 80039ba:	69bb      	ldr	r3, [r7, #24]
 80039bc:	18d1      	adds	r1, r2, r3
 80039be:	69bb      	ldr	r3, [r7, #24]
 80039c0:	69ba      	ldr	r2, [r7, #24]
 80039c2:	69f8      	ldr	r0, [r7, #28]
 80039c4:	f7ff ff2a 	bl	800381c <prvInsertTimerInActiveList>
                        break;
 80039c8:	e015      	b.n	80039f6 <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80039ca:	69fb      	ldr	r3, [r7, #28]
 80039cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80039d0:	f003 0302 	and.w	r3, r3, #2
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d103      	bne.n	80039e0 <prvProcessReceivedCommands+0x140>
                                {
                                    vPortFree( pxTimer );
 80039d8:	69f8      	ldr	r0, [r7, #28]
 80039da:	f000 fb6f 	bl	80040bc <vPortFree>
 80039de:	e00a      	b.n	80039f6 <prvProcessReceivedCommands+0x156>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80039e0:	69fb      	ldr	r3, [r7, #28]
 80039e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80039e6:	f023 0301 	bic.w	r3, r3, #1
 80039ea:	b2da      	uxtb	r2, r3
 80039ec:	69fb      	ldr	r3, [r7, #28]
 80039ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 80039f2:	e000      	b.n	80039f6 <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 80039f4:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80039f6:	4b08      	ldr	r3, [pc, #32]	; (8003a18 <prvProcessReceivedCommands+0x178>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f107 0108 	add.w	r1, r7, #8
 80039fe:	2200      	movs	r2, #0
 8003a00:	4618      	mov	r0, r3
 8003a02:	f7fe fcbd 	bl	8002380 <xQueueReceive>
 8003a06:	4603      	mov	r3, r0
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	f47f af4d 	bne.w	80038a8 <prvProcessReceivedCommands+0x8>
        }
    }
 8003a0e:	bf00      	nop
 8003a10:	bf00      	nop
 8003a12:	3720      	adds	r7, #32
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}
 8003a18:	200001b0 	.word	0x200001b0

08003a1c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b082      	sub	sp, #8
 8003a20:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003a22:	e009      	b.n	8003a38 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003a24:	4b0e      	ldr	r3, [pc, #56]	; (8003a60 <prvSwitchTimerLists+0x44>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	68db      	ldr	r3, [r3, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8003a2e:	f04f 31ff 	mov.w	r1, #4294967295
 8003a32:	6838      	ldr	r0, [r7, #0]
 8003a34:	f7ff fe1e 	bl	8003674 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003a38:	4b09      	ldr	r3, [pc, #36]	; (8003a60 <prvSwitchTimerLists+0x44>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d1f0      	bne.n	8003a24 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8003a42:	4b07      	ldr	r3, [pc, #28]	; (8003a60 <prvSwitchTimerLists+0x44>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8003a48:	4b06      	ldr	r3, [pc, #24]	; (8003a64 <prvSwitchTimerLists+0x48>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a04      	ldr	r2, [pc, #16]	; (8003a60 <prvSwitchTimerLists+0x44>)
 8003a4e:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8003a50:	4a04      	ldr	r2, [pc, #16]	; (8003a64 <prvSwitchTimerLists+0x48>)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6013      	str	r3, [r2, #0]
    }
 8003a56:	bf00      	nop
 8003a58:	3708      	adds	r7, #8
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}
 8003a5e:	bf00      	nop
 8003a60:	200001a8 	.word	0x200001a8
 8003a64:	200001ac 	.word	0x200001ac

08003a68 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8003a6c:	f000 f964 	bl	8003d38 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8003a70:	4b12      	ldr	r3, [pc, #72]	; (8003abc <prvCheckForValidListAndQueue+0x54>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d11d      	bne.n	8003ab4 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8003a78:	4811      	ldr	r0, [pc, #68]	; (8003ac0 <prvCheckForValidListAndQueue+0x58>)
 8003a7a:	f7fe faef 	bl	800205c <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8003a7e:	4811      	ldr	r0, [pc, #68]	; (8003ac4 <prvCheckForValidListAndQueue+0x5c>)
 8003a80:	f7fe faec 	bl	800205c <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8003a84:	4b10      	ldr	r3, [pc, #64]	; (8003ac8 <prvCheckForValidListAndQueue+0x60>)
 8003a86:	4a0e      	ldr	r2, [pc, #56]	; (8003ac0 <prvCheckForValidListAndQueue+0x58>)
 8003a88:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8003a8a:	4b10      	ldr	r3, [pc, #64]	; (8003acc <prvCheckForValidListAndQueue+0x64>)
 8003a8c:	4a0d      	ldr	r2, [pc, #52]	; (8003ac4 <prvCheckForValidListAndQueue+0x5c>)
 8003a8e:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8003a90:	2200      	movs	r2, #0
 8003a92:	210c      	movs	r1, #12
 8003a94:	200a      	movs	r0, #10
 8003a96:	f7fe fc01 	bl	800229c <xQueueGenericCreate>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	4a07      	ldr	r2, [pc, #28]	; (8003abc <prvCheckForValidListAndQueue+0x54>)
 8003a9e:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8003aa0:	4b06      	ldr	r3, [pc, #24]	; (8003abc <prvCheckForValidListAndQueue+0x54>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d005      	beq.n	8003ab4 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003aa8:	4b04      	ldr	r3, [pc, #16]	; (8003abc <prvCheckForValidListAndQueue+0x54>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4908      	ldr	r1, [pc, #32]	; (8003ad0 <prvCheckForValidListAndQueue+0x68>)
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f7fe fdd4 	bl	800265c <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003ab4:	f000 f970 	bl	8003d98 <vPortExitCritical>
    }
 8003ab8:	bf00      	nop
 8003aba:	bd80      	pop	{r7, pc}
 8003abc:	200001b0 	.word	0x200001b0
 8003ac0:	20000180 	.word	0x20000180
 8003ac4:	20000194 	.word	0x20000194
 8003ac8:	200001a8 	.word	0x200001a8
 8003acc:	200001ac 	.word	0x200001ac
 8003ad0:	08004d7c 	.word	0x08004d7c

08003ad4 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b085      	sub	sp, #20
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	60f8      	str	r0, [r7, #12]
 8003adc:	60b9      	str	r1, [r7, #8]
 8003ade:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	3b04      	subs	r3, #4
 8003ae4:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003aec:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	3b04      	subs	r3, #4
 8003af2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	f023 0201 	bic.w	r2, r3, #1
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	3b04      	subs	r3, #4
 8003b02:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8003b04:	4a0c      	ldr	r2, [pc, #48]	; (8003b38 <pxPortInitialiseStack+0x64>)
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	3b14      	subs	r3, #20
 8003b0e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8003b10:	687a      	ldr	r2, [r7, #4]
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	3b04      	subs	r3, #4
 8003b1a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	f06f 0202 	mvn.w	r2, #2
 8003b22:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	3b20      	subs	r3, #32
 8003b28:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	3714      	adds	r7, #20
 8003b30:	46bd      	mov	sp, r7
 8003b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b36:	4770      	bx	lr
 8003b38:	08003b3d 	.word	0x08003b3d

08003b3c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b085      	sub	sp, #20
 8003b40:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8003b42:	2300      	movs	r3, #0
 8003b44:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8003b46:	4b12      	ldr	r3, [pc, #72]	; (8003b90 <prvTaskExitError+0x54>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b4e:	d00a      	beq.n	8003b66 <prvTaskExitError+0x2a>
        __asm volatile
 8003b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b54:	f383 8811 	msr	BASEPRI, r3
 8003b58:	f3bf 8f6f 	isb	sy
 8003b5c:	f3bf 8f4f 	dsb	sy
 8003b60:	60fb      	str	r3, [r7, #12]
    }
 8003b62:	bf00      	nop
 8003b64:	e7fe      	b.n	8003b64 <prvTaskExitError+0x28>
        __asm volatile
 8003b66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b6a:	f383 8811 	msr	BASEPRI, r3
 8003b6e:	f3bf 8f6f 	isb	sy
 8003b72:	f3bf 8f4f 	dsb	sy
 8003b76:	60bb      	str	r3, [r7, #8]
    }
 8003b78:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8003b7a:	bf00      	nop
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d0fc      	beq.n	8003b7c <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8003b82:	bf00      	nop
 8003b84:	bf00      	nop
 8003b86:	3714      	adds	r7, #20
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8e:	4770      	bx	lr
 8003b90:	20000010 	.word	0x20000010
	...

08003ba0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003ba0:	4b07      	ldr	r3, [pc, #28]	; (8003bc0 <pxCurrentTCBConst2>)
 8003ba2:	6819      	ldr	r1, [r3, #0]
 8003ba4:	6808      	ldr	r0, [r1, #0]
 8003ba6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003baa:	f380 8809 	msr	PSP, r0
 8003bae:	f3bf 8f6f 	isb	sy
 8003bb2:	f04f 0000 	mov.w	r0, #0
 8003bb6:	f380 8811 	msr	BASEPRI, r0
 8003bba:	4770      	bx	lr
 8003bbc:	f3af 8000 	nop.w

08003bc0 <pxCurrentTCBConst2>:
 8003bc0:	20000094 	.word	0x20000094
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8003bc4:	bf00      	nop
 8003bc6:	bf00      	nop

08003bc8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8003bc8:	4808      	ldr	r0, [pc, #32]	; (8003bec <prvPortStartFirstTask+0x24>)
 8003bca:	6800      	ldr	r0, [r0, #0]
 8003bcc:	6800      	ldr	r0, [r0, #0]
 8003bce:	f380 8808 	msr	MSP, r0
 8003bd2:	f04f 0000 	mov.w	r0, #0
 8003bd6:	f380 8814 	msr	CONTROL, r0
 8003bda:	b662      	cpsie	i
 8003bdc:	b661      	cpsie	f
 8003bde:	f3bf 8f4f 	dsb	sy
 8003be2:	f3bf 8f6f 	isb	sy
 8003be6:	df00      	svc	0
 8003be8:	bf00      	nop
 8003bea:	0000      	.short	0x0000
 8003bec:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8003bf0:	bf00      	nop
 8003bf2:	bf00      	nop

08003bf4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b086      	sub	sp, #24
 8003bf8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003bfa:	4b46      	ldr	r3, [pc, #280]	; (8003d14 <xPortStartScheduler+0x120>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a46      	ldr	r2, [pc, #280]	; (8003d18 <xPortStartScheduler+0x124>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d10a      	bne.n	8003c1a <xPortStartScheduler+0x26>
        __asm volatile
 8003c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c08:	f383 8811 	msr	BASEPRI, r3
 8003c0c:	f3bf 8f6f 	isb	sy
 8003c10:	f3bf 8f4f 	dsb	sy
 8003c14:	613b      	str	r3, [r7, #16]
    }
 8003c16:	bf00      	nop
 8003c18:	e7fe      	b.n	8003c18 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003c1a:	4b3e      	ldr	r3, [pc, #248]	; (8003d14 <xPortStartScheduler+0x120>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a3f      	ldr	r2, [pc, #252]	; (8003d1c <xPortStartScheduler+0x128>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d10a      	bne.n	8003c3a <xPortStartScheduler+0x46>
        __asm volatile
 8003c24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c28:	f383 8811 	msr	BASEPRI, r3
 8003c2c:	f3bf 8f6f 	isb	sy
 8003c30:	f3bf 8f4f 	dsb	sy
 8003c34:	60fb      	str	r3, [r7, #12]
    }
 8003c36:	bf00      	nop
 8003c38:	e7fe      	b.n	8003c38 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003c3a:	4b39      	ldr	r3, [pc, #228]	; (8003d20 <xPortStartScheduler+0x12c>)
 8003c3c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	781b      	ldrb	r3, [r3, #0]
 8003c42:	b2db      	uxtb	r3, r3
 8003c44:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	22ff      	movs	r2, #255	; 0xff
 8003c4a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003c4c:	697b      	ldr	r3, [r7, #20]
 8003c4e:	781b      	ldrb	r3, [r3, #0]
 8003c50:	b2db      	uxtb	r3, r3
 8003c52:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003c54:	78fb      	ldrb	r3, [r7, #3]
 8003c56:	b2db      	uxtb	r3, r3
 8003c58:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003c5c:	b2da      	uxtb	r2, r3
 8003c5e:	4b31      	ldr	r3, [pc, #196]	; (8003d24 <xPortStartScheduler+0x130>)
 8003c60:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003c62:	4b31      	ldr	r3, [pc, #196]	; (8003d28 <xPortStartScheduler+0x134>)
 8003c64:	2207      	movs	r2, #7
 8003c66:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003c68:	e009      	b.n	8003c7e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8003c6a:	4b2f      	ldr	r3, [pc, #188]	; (8003d28 <xPortStartScheduler+0x134>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	3b01      	subs	r3, #1
 8003c70:	4a2d      	ldr	r2, [pc, #180]	; (8003d28 <xPortStartScheduler+0x134>)
 8003c72:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003c74:	78fb      	ldrb	r3, [r7, #3]
 8003c76:	b2db      	uxtb	r3, r3
 8003c78:	005b      	lsls	r3, r3, #1
 8003c7a:	b2db      	uxtb	r3, r3
 8003c7c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003c7e:	78fb      	ldrb	r3, [r7, #3]
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c86:	2b80      	cmp	r3, #128	; 0x80
 8003c88:	d0ef      	beq.n	8003c6a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003c8a:	4b27      	ldr	r3, [pc, #156]	; (8003d28 <xPortStartScheduler+0x134>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f1c3 0307 	rsb	r3, r3, #7
 8003c92:	2b04      	cmp	r3, #4
 8003c94:	d00a      	beq.n	8003cac <xPortStartScheduler+0xb8>
        __asm volatile
 8003c96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c9a:	f383 8811 	msr	BASEPRI, r3
 8003c9e:	f3bf 8f6f 	isb	sy
 8003ca2:	f3bf 8f4f 	dsb	sy
 8003ca6:	60bb      	str	r3, [r7, #8]
    }
 8003ca8:	bf00      	nop
 8003caa:	e7fe      	b.n	8003caa <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003cac:	4b1e      	ldr	r3, [pc, #120]	; (8003d28 <xPortStartScheduler+0x134>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	021b      	lsls	r3, r3, #8
 8003cb2:	4a1d      	ldr	r2, [pc, #116]	; (8003d28 <xPortStartScheduler+0x134>)
 8003cb4:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003cb6:	4b1c      	ldr	r3, [pc, #112]	; (8003d28 <xPortStartScheduler+0x134>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003cbe:	4a1a      	ldr	r2, [pc, #104]	; (8003d28 <xPortStartScheduler+0x134>)
 8003cc0:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	b2da      	uxtb	r2, r3
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	701a      	strb	r2, [r3, #0]
        }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8003cca:	4b18      	ldr	r3, [pc, #96]	; (8003d2c <xPortStartScheduler+0x138>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a17      	ldr	r2, [pc, #92]	; (8003d2c <xPortStartScheduler+0x138>)
 8003cd0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003cd4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8003cd6:	4b15      	ldr	r3, [pc, #84]	; (8003d2c <xPortStartScheduler+0x138>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a14      	ldr	r2, [pc, #80]	; (8003d2c <xPortStartScheduler+0x138>)
 8003cdc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003ce0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8003ce2:	f000 f8db 	bl	8003e9c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8003ce6:	4b12      	ldr	r3, [pc, #72]	; (8003d30 <xPortStartScheduler+0x13c>)
 8003ce8:	2200      	movs	r2, #0
 8003cea:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8003cec:	f000 f8fa 	bl	8003ee4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003cf0:	4b10      	ldr	r3, [pc, #64]	; (8003d34 <xPortStartScheduler+0x140>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a0f      	ldr	r2, [pc, #60]	; (8003d34 <xPortStartScheduler+0x140>)
 8003cf6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003cfa:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8003cfc:	f7ff ff64 	bl	8003bc8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8003d00:	f7ff f92c 	bl	8002f5c <vTaskSwitchContext>
    prvTaskExitError();
 8003d04:	f7ff ff1a 	bl	8003b3c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8003d08:	2300      	movs	r3, #0
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	3718      	adds	r7, #24
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}
 8003d12:	bf00      	nop
 8003d14:	e000ed00 	.word	0xe000ed00
 8003d18:	410fc271 	.word	0x410fc271
 8003d1c:	410fc270 	.word	0x410fc270
 8003d20:	e000e400 	.word	0xe000e400
 8003d24:	200001bc 	.word	0x200001bc
 8003d28:	200001c0 	.word	0x200001c0
 8003d2c:	e000ed20 	.word	0xe000ed20
 8003d30:	20000010 	.word	0x20000010
 8003d34:	e000ef34 	.word	0xe000ef34

08003d38 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b083      	sub	sp, #12
 8003d3c:	af00      	add	r7, sp, #0
        __asm volatile
 8003d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d42:	f383 8811 	msr	BASEPRI, r3
 8003d46:	f3bf 8f6f 	isb	sy
 8003d4a:	f3bf 8f4f 	dsb	sy
 8003d4e:	607b      	str	r3, [r7, #4]
    }
 8003d50:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8003d52:	4b0f      	ldr	r3, [pc, #60]	; (8003d90 <vPortEnterCritical+0x58>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	3301      	adds	r3, #1
 8003d58:	4a0d      	ldr	r2, [pc, #52]	; (8003d90 <vPortEnterCritical+0x58>)
 8003d5a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8003d5c:	4b0c      	ldr	r3, [pc, #48]	; (8003d90 <vPortEnterCritical+0x58>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	d10f      	bne.n	8003d84 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003d64:	4b0b      	ldr	r3, [pc, #44]	; (8003d94 <vPortEnterCritical+0x5c>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	b2db      	uxtb	r3, r3
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d00a      	beq.n	8003d84 <vPortEnterCritical+0x4c>
        __asm volatile
 8003d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d72:	f383 8811 	msr	BASEPRI, r3
 8003d76:	f3bf 8f6f 	isb	sy
 8003d7a:	f3bf 8f4f 	dsb	sy
 8003d7e:	603b      	str	r3, [r7, #0]
    }
 8003d80:	bf00      	nop
 8003d82:	e7fe      	b.n	8003d82 <vPortEnterCritical+0x4a>
    }
}
 8003d84:	bf00      	nop
 8003d86:	370c      	adds	r7, #12
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8e:	4770      	bx	lr
 8003d90:	20000010 	.word	0x20000010
 8003d94:	e000ed04 	.word	0xe000ed04

08003d98 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b083      	sub	sp, #12
 8003d9c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8003d9e:	4b12      	ldr	r3, [pc, #72]	; (8003de8 <vPortExitCritical+0x50>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d10a      	bne.n	8003dbc <vPortExitCritical+0x24>
        __asm volatile
 8003da6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003daa:	f383 8811 	msr	BASEPRI, r3
 8003dae:	f3bf 8f6f 	isb	sy
 8003db2:	f3bf 8f4f 	dsb	sy
 8003db6:	607b      	str	r3, [r7, #4]
    }
 8003db8:	bf00      	nop
 8003dba:	e7fe      	b.n	8003dba <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8003dbc:	4b0a      	ldr	r3, [pc, #40]	; (8003de8 <vPortExitCritical+0x50>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	3b01      	subs	r3, #1
 8003dc2:	4a09      	ldr	r2, [pc, #36]	; (8003de8 <vPortExitCritical+0x50>)
 8003dc4:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8003dc6:	4b08      	ldr	r3, [pc, #32]	; (8003de8 <vPortExitCritical+0x50>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d105      	bne.n	8003dda <vPortExitCritical+0x42>
 8003dce:	2300      	movs	r3, #0
 8003dd0:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8003dd8:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8003dda:	bf00      	nop
 8003ddc:	370c      	adds	r7, #12
 8003dde:	46bd      	mov	sp, r7
 8003de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de4:	4770      	bx	lr
 8003de6:	bf00      	nop
 8003de8:	20000010 	.word	0x20000010
 8003dec:	00000000 	.word	0x00000000

08003df0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003df0:	f3ef 8009 	mrs	r0, PSP
 8003df4:	f3bf 8f6f 	isb	sy
 8003df8:	4b15      	ldr	r3, [pc, #84]	; (8003e50 <pxCurrentTCBConst>)
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	f01e 0f10 	tst.w	lr, #16
 8003e00:	bf08      	it	eq
 8003e02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003e06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e0a:	6010      	str	r0, [r2, #0]
 8003e0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003e10:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003e14:	f380 8811 	msr	BASEPRI, r0
 8003e18:	f3bf 8f4f 	dsb	sy
 8003e1c:	f3bf 8f6f 	isb	sy
 8003e20:	f7ff f89c 	bl	8002f5c <vTaskSwitchContext>
 8003e24:	f04f 0000 	mov.w	r0, #0
 8003e28:	f380 8811 	msr	BASEPRI, r0
 8003e2c:	bc09      	pop	{r0, r3}
 8003e2e:	6819      	ldr	r1, [r3, #0]
 8003e30:	6808      	ldr	r0, [r1, #0]
 8003e32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e36:	f01e 0f10 	tst.w	lr, #16
 8003e3a:	bf08      	it	eq
 8003e3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003e40:	f380 8809 	msr	PSP, r0
 8003e44:	f3bf 8f6f 	isb	sy
 8003e48:	4770      	bx	lr
 8003e4a:	bf00      	nop
 8003e4c:	f3af 8000 	nop.w

08003e50 <pxCurrentTCBConst>:
 8003e50:	20000094 	.word	0x20000094
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8003e54:	bf00      	nop
 8003e56:	bf00      	nop

08003e58 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b082      	sub	sp, #8
 8003e5c:	af00      	add	r7, sp, #0
        __asm volatile
 8003e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e62:	f383 8811 	msr	BASEPRI, r3
 8003e66:	f3bf 8f6f 	isb	sy
 8003e6a:	f3bf 8f4f 	dsb	sy
 8003e6e:	607b      	str	r3, [r7, #4]
    }
 8003e70:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8003e72:	f7fe ff5d 	bl	8002d30 <xTaskIncrementTick>
 8003e76:	4603      	mov	r3, r0
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d003      	beq.n	8003e84 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003e7c:	4b06      	ldr	r3, [pc, #24]	; (8003e98 <SysTick_Handler+0x40>)
 8003e7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e82:	601a      	str	r2, [r3, #0]
 8003e84:	2300      	movs	r3, #0
 8003e86:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	f383 8811 	msr	BASEPRI, r3
    }
 8003e8e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8003e90:	bf00      	nop
 8003e92:	3708      	adds	r7, #8
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}
 8003e98:	e000ed04 	.word	0xe000ed04

08003e9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003ea0:	4b0b      	ldr	r3, [pc, #44]	; (8003ed0 <vPortSetupTimerInterrupt+0x34>)
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003ea6:	4b0b      	ldr	r3, [pc, #44]	; (8003ed4 <vPortSetupTimerInterrupt+0x38>)
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003eac:	4b0a      	ldr	r3, [pc, #40]	; (8003ed8 <vPortSetupTimerInterrupt+0x3c>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a0a      	ldr	r2, [pc, #40]	; (8003edc <vPortSetupTimerInterrupt+0x40>)
 8003eb2:	fba2 2303 	umull	r2, r3, r2, r3
 8003eb6:	099b      	lsrs	r3, r3, #6
 8003eb8:	4a09      	ldr	r2, [pc, #36]	; (8003ee0 <vPortSetupTimerInterrupt+0x44>)
 8003eba:	3b01      	subs	r3, #1
 8003ebc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003ebe:	4b04      	ldr	r3, [pc, #16]	; (8003ed0 <vPortSetupTimerInterrupt+0x34>)
 8003ec0:	2207      	movs	r2, #7
 8003ec2:	601a      	str	r2, [r3, #0]
}
 8003ec4:	bf00      	nop
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ecc:	4770      	bx	lr
 8003ece:	bf00      	nop
 8003ed0:	e000e010 	.word	0xe000e010
 8003ed4:	e000e018 	.word	0xe000e018
 8003ed8:	20000000 	.word	0x20000000
 8003edc:	10624dd3 	.word	0x10624dd3
 8003ee0:	e000e014 	.word	0xe000e014

08003ee4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8003ee4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003ef4 <vPortEnableVFP+0x10>
 8003ee8:	6801      	ldr	r1, [r0, #0]
 8003eea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003eee:	6001      	str	r1, [r0, #0]
 8003ef0:	4770      	bx	lr
 8003ef2:	0000      	.short	0x0000
 8003ef4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8003ef8:	bf00      	nop
 8003efa:	bf00      	nop

08003efc <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b08a      	sub	sp, #40	; 0x28
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8003f04:	2300      	movs	r3, #0
 8003f06:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8003f08:	f7fe fdf8 	bl	8002afc <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8003f0c:	4b65      	ldr	r3, [pc, #404]	; (80040a4 <pvPortMalloc+0x1a8>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d101      	bne.n	8003f18 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8003f14:	f000 f934 	bl	8004180 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003f18:	4b63      	ldr	r3, [pc, #396]	; (80040a8 <pvPortMalloc+0x1ac>)
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	4013      	ands	r3, r2
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	f040 80a7 	bne.w	8004074 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) &&
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d02d      	beq.n	8003f88 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8003f2c:	2208      	movs	r2, #8
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) &&
 8003f32:	687a      	ldr	r2, [r7, #4]
 8003f34:	429a      	cmp	r2, r3
 8003f36:	d227      	bcs.n	8003f88 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8003f38:	2208      	movs	r2, #8
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	4413      	add	r3, r2
 8003f3e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	f003 0307 	and.w	r3, r3, #7
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d021      	beq.n	8003f8e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) )
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	f023 0307 	bic.w	r3, r3, #7
 8003f50:	3308      	adds	r3, #8
 8003f52:	687a      	ldr	r2, [r7, #4]
 8003f54:	429a      	cmp	r2, r3
 8003f56:	d214      	bcs.n	8003f82 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	f023 0307 	bic.w	r3, r3, #7
 8003f5e:	3308      	adds	r3, #8
 8003f60:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	f003 0307 	and.w	r3, r3, #7
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d010      	beq.n	8003f8e <pvPortMalloc+0x92>
        __asm volatile
 8003f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f70:	f383 8811 	msr	BASEPRI, r3
 8003f74:	f3bf 8f6f 	isb	sy
 8003f78:	f3bf 8f4f 	dsb	sy
 8003f7c:	617b      	str	r3, [r7, #20]
    }
 8003f7e:	bf00      	nop
 8003f80:	e7fe      	b.n	8003f80 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8003f82:	2300      	movs	r3, #0
 8003f84:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003f86:	e002      	b.n	8003f8e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                xWantedSize = 0;
 8003f88:	2300      	movs	r3, #0
 8003f8a:	607b      	str	r3, [r7, #4]
 8003f8c:	e000      	b.n	8003f90 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003f8e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d06e      	beq.n	8004074 <pvPortMalloc+0x178>
 8003f96:	4b45      	ldr	r3, [pc, #276]	; (80040ac <pvPortMalloc+0x1b0>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	687a      	ldr	r2, [r7, #4]
 8003f9c:	429a      	cmp	r2, r3
 8003f9e:	d869      	bhi.n	8004074 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8003fa0:	4b43      	ldr	r3, [pc, #268]	; (80040b0 <pvPortMalloc+0x1b4>)
 8003fa2:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8003fa4:	4b42      	ldr	r3, [pc, #264]	; (80040b0 <pvPortMalloc+0x1b4>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003faa:	e004      	b.n	8003fb6 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 8003fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fae:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8003fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	687a      	ldr	r2, [r7, #4]
 8003fbc:	429a      	cmp	r2, r3
 8003fbe:	d903      	bls.n	8003fc8 <pvPortMalloc+0xcc>
 8003fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d1f1      	bne.n	8003fac <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8003fc8:	4b36      	ldr	r3, [pc, #216]	; (80040a4 <pvPortMalloc+0x1a8>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fce:	429a      	cmp	r2, r3
 8003fd0:	d050      	beq.n	8004074 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003fd2:	6a3b      	ldr	r3, [r7, #32]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	2208      	movs	r2, #8
 8003fd8:	4413      	add	r3, r2
 8003fda:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fde:	681a      	ldr	r2, [r3, #0]
 8003fe0:	6a3b      	ldr	r3, [r7, #32]
 8003fe2:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe6:	685a      	ldr	r2, [r3, #4]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	1ad2      	subs	r2, r2, r3
 8003fec:	2308      	movs	r3, #8
 8003fee:	005b      	lsls	r3, r3, #1
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	d91f      	bls.n	8004034 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003ff4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	4413      	add	r3, r2
 8003ffa:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003ffc:	69bb      	ldr	r3, [r7, #24]
 8003ffe:	f003 0307 	and.w	r3, r3, #7
 8004002:	2b00      	cmp	r3, #0
 8004004:	d00a      	beq.n	800401c <pvPortMalloc+0x120>
        __asm volatile
 8004006:	f04f 0350 	mov.w	r3, #80	; 0x50
 800400a:	f383 8811 	msr	BASEPRI, r3
 800400e:	f3bf 8f6f 	isb	sy
 8004012:	f3bf 8f4f 	dsb	sy
 8004016:	613b      	str	r3, [r7, #16]
    }
 8004018:	bf00      	nop
 800401a:	e7fe      	b.n	800401a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800401c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800401e:	685a      	ldr	r2, [r3, #4]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	1ad2      	subs	r2, r2, r3
 8004024:	69bb      	ldr	r3, [r7, #24]
 8004026:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800402a:	687a      	ldr	r2, [r7, #4]
 800402c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800402e:	69b8      	ldr	r0, [r7, #24]
 8004030:	f000 f908 	bl	8004244 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004034:	4b1d      	ldr	r3, [pc, #116]	; (80040ac <pvPortMalloc+0x1b0>)
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	1ad3      	subs	r3, r2, r3
 800403e:	4a1b      	ldr	r2, [pc, #108]	; (80040ac <pvPortMalloc+0x1b0>)
 8004040:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004042:	4b1a      	ldr	r3, [pc, #104]	; (80040ac <pvPortMalloc+0x1b0>)
 8004044:	681a      	ldr	r2, [r3, #0]
 8004046:	4b1b      	ldr	r3, [pc, #108]	; (80040b4 <pvPortMalloc+0x1b8>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	429a      	cmp	r2, r3
 800404c:	d203      	bcs.n	8004056 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800404e:	4b17      	ldr	r3, [pc, #92]	; (80040ac <pvPortMalloc+0x1b0>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a18      	ldr	r2, [pc, #96]	; (80040b4 <pvPortMalloc+0x1b8>)
 8004054:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004058:	685a      	ldr	r2, [r3, #4]
 800405a:	4b13      	ldr	r3, [pc, #76]	; (80040a8 <pvPortMalloc+0x1ac>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	431a      	orrs	r2, r3
 8004060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004062:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004066:	2200      	movs	r2, #0
 8004068:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800406a:	4b13      	ldr	r3, [pc, #76]	; (80040b8 <pvPortMalloc+0x1bc>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	3301      	adds	r3, #1
 8004070:	4a11      	ldr	r2, [pc, #68]	; (80040b8 <pvPortMalloc+0x1bc>)
 8004072:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004074:	f7fe fd50 	bl	8002b18 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004078:	69fb      	ldr	r3, [r7, #28]
 800407a:	f003 0307 	and.w	r3, r3, #7
 800407e:	2b00      	cmp	r3, #0
 8004080:	d00a      	beq.n	8004098 <pvPortMalloc+0x19c>
        __asm volatile
 8004082:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004086:	f383 8811 	msr	BASEPRI, r3
 800408a:	f3bf 8f6f 	isb	sy
 800408e:	f3bf 8f4f 	dsb	sy
 8004092:	60fb      	str	r3, [r7, #12]
    }
 8004094:	bf00      	nop
 8004096:	e7fe      	b.n	8004096 <pvPortMalloc+0x19a>
    return pvReturn;
 8004098:	69fb      	ldr	r3, [r7, #28]
}
 800409a:	4618      	mov	r0, r3
 800409c:	3728      	adds	r7, #40	; 0x28
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}
 80040a2:	bf00      	nop
 80040a4:	20012dcc 	.word	0x20012dcc
 80040a8:	20012de0 	.word	0x20012de0
 80040ac:	20012dd0 	.word	0x20012dd0
 80040b0:	20012dc4 	.word	0x20012dc4
 80040b4:	20012dd4 	.word	0x20012dd4
 80040b8:	20012dd8 	.word	0x20012dd8

080040bc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b086      	sub	sp, #24
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d04d      	beq.n	800416a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80040ce:	2308      	movs	r3, #8
 80040d0:	425b      	negs	r3, r3
 80040d2:	697a      	ldr	r2, [r7, #20]
 80040d4:	4413      	add	r3, r2
 80040d6:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	685a      	ldr	r2, [r3, #4]
 80040e0:	4b24      	ldr	r3, [pc, #144]	; (8004174 <vPortFree+0xb8>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4013      	ands	r3, r2
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d10a      	bne.n	8004100 <vPortFree+0x44>
        __asm volatile
 80040ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040ee:	f383 8811 	msr	BASEPRI, r3
 80040f2:	f3bf 8f6f 	isb	sy
 80040f6:	f3bf 8f4f 	dsb	sy
 80040fa:	60fb      	str	r3, [r7, #12]
    }
 80040fc:	bf00      	nop
 80040fe:	e7fe      	b.n	80040fe <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d00a      	beq.n	800411e <vPortFree+0x62>
        __asm volatile
 8004108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800410c:	f383 8811 	msr	BASEPRI, r3
 8004110:	f3bf 8f6f 	isb	sy
 8004114:	f3bf 8f4f 	dsb	sy
 8004118:	60bb      	str	r3, [r7, #8]
    }
 800411a:	bf00      	nop
 800411c:	e7fe      	b.n	800411c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	685a      	ldr	r2, [r3, #4]
 8004122:	4b14      	ldr	r3, [pc, #80]	; (8004174 <vPortFree+0xb8>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4013      	ands	r3, r2
 8004128:	2b00      	cmp	r3, #0
 800412a:	d01e      	beq.n	800416a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d11a      	bne.n	800416a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	685a      	ldr	r2, [r3, #4]
 8004138:	4b0e      	ldr	r3, [pc, #56]	; (8004174 <vPortFree+0xb8>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	43db      	mvns	r3, r3
 800413e:	401a      	ands	r2, r3
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8004144:	f7fe fcda 	bl	8002afc <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004148:	693b      	ldr	r3, [r7, #16]
 800414a:	685a      	ldr	r2, [r3, #4]
 800414c:	4b0a      	ldr	r3, [pc, #40]	; (8004178 <vPortFree+0xbc>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4413      	add	r3, r2
 8004152:	4a09      	ldr	r2, [pc, #36]	; (8004178 <vPortFree+0xbc>)
 8004154:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004156:	6938      	ldr	r0, [r7, #16]
 8004158:	f000 f874 	bl	8004244 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800415c:	4b07      	ldr	r3, [pc, #28]	; (800417c <vPortFree+0xc0>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	3301      	adds	r3, #1
 8004162:	4a06      	ldr	r2, [pc, #24]	; (800417c <vPortFree+0xc0>)
 8004164:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004166:	f7fe fcd7 	bl	8002b18 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800416a:	bf00      	nop
 800416c:	3718      	adds	r7, #24
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}
 8004172:	bf00      	nop
 8004174:	20012de0 	.word	0x20012de0
 8004178:	20012dd0 	.word	0x20012dd0
 800417c:	20012ddc 	.word	0x20012ddc

08004180 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004180:	b480      	push	{r7}
 8004182:	b085      	sub	sp, #20
 8004184:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004186:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 800418a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800418c:	4b27      	ldr	r3, [pc, #156]	; (800422c <prvHeapInit+0xac>)
 800418e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	f003 0307 	and.w	r3, r3, #7
 8004196:	2b00      	cmp	r3, #0
 8004198:	d00c      	beq.n	80041b4 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	3307      	adds	r3, #7
 800419e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	f023 0307 	bic.w	r3, r3, #7
 80041a6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80041a8:	68ba      	ldr	r2, [r7, #8]
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	1ad3      	subs	r3, r2, r3
 80041ae:	4a1f      	ldr	r2, [pc, #124]	; (800422c <prvHeapInit+0xac>)
 80041b0:	4413      	add	r3, r2
 80041b2:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80041b8:	4a1d      	ldr	r2, [pc, #116]	; (8004230 <prvHeapInit+0xb0>)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80041be:	4b1c      	ldr	r3, [pc, #112]	; (8004230 <prvHeapInit+0xb0>)
 80041c0:	2200      	movs	r2, #0
 80041c2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	68ba      	ldr	r2, [r7, #8]
 80041c8:	4413      	add	r3, r2
 80041ca:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80041cc:	2208      	movs	r2, #8
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	1a9b      	subs	r3, r3, r2
 80041d2:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	f023 0307 	bic.w	r3, r3, #7
 80041da:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	4a15      	ldr	r2, [pc, #84]	; (8004234 <prvHeapInit+0xb4>)
 80041e0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80041e2:	4b14      	ldr	r3, [pc, #80]	; (8004234 <prvHeapInit+0xb4>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	2200      	movs	r2, #0
 80041e8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80041ea:	4b12      	ldr	r3, [pc, #72]	; (8004234 <prvHeapInit+0xb4>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	2200      	movs	r2, #0
 80041f0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	68fa      	ldr	r2, [r7, #12]
 80041fa:	1ad2      	subs	r2, r2, r3
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004200:	4b0c      	ldr	r3, [pc, #48]	; (8004234 <prvHeapInit+0xb4>)
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	4a0a      	ldr	r2, [pc, #40]	; (8004238 <prvHeapInit+0xb8>)
 800420e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	4a09      	ldr	r2, [pc, #36]	; (800423c <prvHeapInit+0xbc>)
 8004216:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004218:	4b09      	ldr	r3, [pc, #36]	; (8004240 <prvHeapInit+0xc0>)
 800421a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800421e:	601a      	str	r2, [r3, #0]
}
 8004220:	bf00      	nop
 8004222:	3714      	adds	r7, #20
 8004224:	46bd      	mov	sp, r7
 8004226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422a:	4770      	bx	lr
 800422c:	200001c4 	.word	0x200001c4
 8004230:	20012dc4 	.word	0x20012dc4
 8004234:	20012dcc 	.word	0x20012dcc
 8004238:	20012dd4 	.word	0x20012dd4
 800423c:	20012dd0 	.word	0x20012dd0
 8004240:	20012de0 	.word	0x20012de0

08004244 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004244:	b480      	push	{r7}
 8004246:	b085      	sub	sp, #20
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800424c:	4b28      	ldr	r3, [pc, #160]	; (80042f0 <prvInsertBlockIntoFreeList+0xac>)
 800424e:	60fb      	str	r3, [r7, #12]
 8004250:	e002      	b.n	8004258 <prvInsertBlockIntoFreeList+0x14>
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	60fb      	str	r3, [r7, #12]
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	687a      	ldr	r2, [r7, #4]
 800425e:	429a      	cmp	r2, r3
 8004260:	d8f7      	bhi.n	8004252 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	68ba      	ldr	r2, [r7, #8]
 800426c:	4413      	add	r3, r2
 800426e:	687a      	ldr	r2, [r7, #4]
 8004270:	429a      	cmp	r2, r3
 8004272:	d108      	bne.n	8004286 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	685a      	ldr	r2, [r3, #4]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	441a      	add	r2, r3
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	68ba      	ldr	r2, [r7, #8]
 8004290:	441a      	add	r2, r3
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	429a      	cmp	r2, r3
 8004298:	d118      	bne.n	80042cc <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681a      	ldr	r2, [r3, #0]
 800429e:	4b15      	ldr	r3, [pc, #84]	; (80042f4 <prvInsertBlockIntoFreeList+0xb0>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	429a      	cmp	r2, r3
 80042a4:	d00d      	beq.n	80042c2 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	685a      	ldr	r2, [r3, #4]
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	441a      	add	r2, r3
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	601a      	str	r2, [r3, #0]
 80042c0:	e008      	b.n	80042d4 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80042c2:	4b0c      	ldr	r3, [pc, #48]	; (80042f4 <prvInsertBlockIntoFreeList+0xb0>)
 80042c4:	681a      	ldr	r2, [r3, #0]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	601a      	str	r2, [r3, #0]
 80042ca:	e003      	b.n	80042d4 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681a      	ldr	r2, [r3, #0]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80042d4:	68fa      	ldr	r2, [r7, #12]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	429a      	cmp	r2, r3
 80042da:	d002      	beq.n	80042e2 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	687a      	ldr	r2, [r7, #4]
 80042e0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80042e2:	bf00      	nop
 80042e4:	3714      	adds	r7, #20
 80042e6:	46bd      	mov	sp, r7
 80042e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ec:	4770      	bx	lr
 80042ee:	bf00      	nop
 80042f0:	20012dc4 	.word	0x20012dc4
 80042f4:	20012dcc 	.word	0x20012dcc

080042f8 <__libc_init_array>:
 80042f8:	b570      	push	{r4, r5, r6, lr}
 80042fa:	4d0d      	ldr	r5, [pc, #52]	; (8004330 <__libc_init_array+0x38>)
 80042fc:	4c0d      	ldr	r4, [pc, #52]	; (8004334 <__libc_init_array+0x3c>)
 80042fe:	1b64      	subs	r4, r4, r5
 8004300:	10a4      	asrs	r4, r4, #2
 8004302:	2600      	movs	r6, #0
 8004304:	42a6      	cmp	r6, r4
 8004306:	d109      	bne.n	800431c <__libc_init_array+0x24>
 8004308:	4d0b      	ldr	r5, [pc, #44]	; (8004338 <__libc_init_array+0x40>)
 800430a:	4c0c      	ldr	r4, [pc, #48]	; (800433c <__libc_init_array+0x44>)
 800430c:	f000 fd02 	bl	8004d14 <_init>
 8004310:	1b64      	subs	r4, r4, r5
 8004312:	10a4      	asrs	r4, r4, #2
 8004314:	2600      	movs	r6, #0
 8004316:	42a6      	cmp	r6, r4
 8004318:	d105      	bne.n	8004326 <__libc_init_array+0x2e>
 800431a:	bd70      	pop	{r4, r5, r6, pc}
 800431c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004320:	4798      	blx	r3
 8004322:	3601      	adds	r6, #1
 8004324:	e7ee      	b.n	8004304 <__libc_init_array+0xc>
 8004326:	f855 3b04 	ldr.w	r3, [r5], #4
 800432a:	4798      	blx	r3
 800432c:	3601      	adds	r6, #1
 800432e:	e7f2      	b.n	8004316 <__libc_init_array+0x1e>
 8004330:	08004e08 	.word	0x08004e08
 8004334:	08004e08 	.word	0x08004e08
 8004338:	08004e08 	.word	0x08004e08
 800433c:	08004e0c 	.word	0x08004e0c

08004340 <memcpy>:
 8004340:	440a      	add	r2, r1
 8004342:	4291      	cmp	r1, r2
 8004344:	f100 33ff 	add.w	r3, r0, #4294967295
 8004348:	d100      	bne.n	800434c <memcpy+0xc>
 800434a:	4770      	bx	lr
 800434c:	b510      	push	{r4, lr}
 800434e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004352:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004356:	4291      	cmp	r1, r2
 8004358:	d1f9      	bne.n	800434e <memcpy+0xe>
 800435a:	bd10      	pop	{r4, pc}

0800435c <memset>:
 800435c:	4402      	add	r2, r0
 800435e:	4603      	mov	r3, r0
 8004360:	4293      	cmp	r3, r2
 8004362:	d100      	bne.n	8004366 <memset+0xa>
 8004364:	4770      	bx	lr
 8004366:	f803 1b01 	strb.w	r1, [r3], #1
 800436a:	e7f9      	b.n	8004360 <memset+0x4>

0800436c <_puts_r>:
 800436c:	b570      	push	{r4, r5, r6, lr}
 800436e:	460e      	mov	r6, r1
 8004370:	4605      	mov	r5, r0
 8004372:	b118      	cbz	r0, 800437c <_puts_r+0x10>
 8004374:	6983      	ldr	r3, [r0, #24]
 8004376:	b90b      	cbnz	r3, 800437c <_puts_r+0x10>
 8004378:	f000 fa48 	bl	800480c <__sinit>
 800437c:	69ab      	ldr	r3, [r5, #24]
 800437e:	68ac      	ldr	r4, [r5, #8]
 8004380:	b913      	cbnz	r3, 8004388 <_puts_r+0x1c>
 8004382:	4628      	mov	r0, r5
 8004384:	f000 fa42 	bl	800480c <__sinit>
 8004388:	4b2c      	ldr	r3, [pc, #176]	; (800443c <_puts_r+0xd0>)
 800438a:	429c      	cmp	r4, r3
 800438c:	d120      	bne.n	80043d0 <_puts_r+0x64>
 800438e:	686c      	ldr	r4, [r5, #4]
 8004390:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004392:	07db      	lsls	r3, r3, #31
 8004394:	d405      	bmi.n	80043a2 <_puts_r+0x36>
 8004396:	89a3      	ldrh	r3, [r4, #12]
 8004398:	0598      	lsls	r0, r3, #22
 800439a:	d402      	bmi.n	80043a2 <_puts_r+0x36>
 800439c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800439e:	f000 fad3 	bl	8004948 <__retarget_lock_acquire_recursive>
 80043a2:	89a3      	ldrh	r3, [r4, #12]
 80043a4:	0719      	lsls	r1, r3, #28
 80043a6:	d51d      	bpl.n	80043e4 <_puts_r+0x78>
 80043a8:	6923      	ldr	r3, [r4, #16]
 80043aa:	b1db      	cbz	r3, 80043e4 <_puts_r+0x78>
 80043ac:	3e01      	subs	r6, #1
 80043ae:	68a3      	ldr	r3, [r4, #8]
 80043b0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80043b4:	3b01      	subs	r3, #1
 80043b6:	60a3      	str	r3, [r4, #8]
 80043b8:	bb39      	cbnz	r1, 800440a <_puts_r+0x9e>
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	da38      	bge.n	8004430 <_puts_r+0xc4>
 80043be:	4622      	mov	r2, r4
 80043c0:	210a      	movs	r1, #10
 80043c2:	4628      	mov	r0, r5
 80043c4:	f000 f848 	bl	8004458 <__swbuf_r>
 80043c8:	3001      	adds	r0, #1
 80043ca:	d011      	beq.n	80043f0 <_puts_r+0x84>
 80043cc:	250a      	movs	r5, #10
 80043ce:	e011      	b.n	80043f4 <_puts_r+0x88>
 80043d0:	4b1b      	ldr	r3, [pc, #108]	; (8004440 <_puts_r+0xd4>)
 80043d2:	429c      	cmp	r4, r3
 80043d4:	d101      	bne.n	80043da <_puts_r+0x6e>
 80043d6:	68ac      	ldr	r4, [r5, #8]
 80043d8:	e7da      	b.n	8004390 <_puts_r+0x24>
 80043da:	4b1a      	ldr	r3, [pc, #104]	; (8004444 <_puts_r+0xd8>)
 80043dc:	429c      	cmp	r4, r3
 80043de:	bf08      	it	eq
 80043e0:	68ec      	ldreq	r4, [r5, #12]
 80043e2:	e7d5      	b.n	8004390 <_puts_r+0x24>
 80043e4:	4621      	mov	r1, r4
 80043e6:	4628      	mov	r0, r5
 80043e8:	f000 f888 	bl	80044fc <__swsetup_r>
 80043ec:	2800      	cmp	r0, #0
 80043ee:	d0dd      	beq.n	80043ac <_puts_r+0x40>
 80043f0:	f04f 35ff 	mov.w	r5, #4294967295
 80043f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80043f6:	07da      	lsls	r2, r3, #31
 80043f8:	d405      	bmi.n	8004406 <_puts_r+0x9a>
 80043fa:	89a3      	ldrh	r3, [r4, #12]
 80043fc:	059b      	lsls	r3, r3, #22
 80043fe:	d402      	bmi.n	8004406 <_puts_r+0x9a>
 8004400:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004402:	f000 faa2 	bl	800494a <__retarget_lock_release_recursive>
 8004406:	4628      	mov	r0, r5
 8004408:	bd70      	pop	{r4, r5, r6, pc}
 800440a:	2b00      	cmp	r3, #0
 800440c:	da04      	bge.n	8004418 <_puts_r+0xac>
 800440e:	69a2      	ldr	r2, [r4, #24]
 8004410:	429a      	cmp	r2, r3
 8004412:	dc06      	bgt.n	8004422 <_puts_r+0xb6>
 8004414:	290a      	cmp	r1, #10
 8004416:	d004      	beq.n	8004422 <_puts_r+0xb6>
 8004418:	6823      	ldr	r3, [r4, #0]
 800441a:	1c5a      	adds	r2, r3, #1
 800441c:	6022      	str	r2, [r4, #0]
 800441e:	7019      	strb	r1, [r3, #0]
 8004420:	e7c5      	b.n	80043ae <_puts_r+0x42>
 8004422:	4622      	mov	r2, r4
 8004424:	4628      	mov	r0, r5
 8004426:	f000 f817 	bl	8004458 <__swbuf_r>
 800442a:	3001      	adds	r0, #1
 800442c:	d1bf      	bne.n	80043ae <_puts_r+0x42>
 800442e:	e7df      	b.n	80043f0 <_puts_r+0x84>
 8004430:	6823      	ldr	r3, [r4, #0]
 8004432:	250a      	movs	r5, #10
 8004434:	1c5a      	adds	r2, r3, #1
 8004436:	6022      	str	r2, [r4, #0]
 8004438:	701d      	strb	r5, [r3, #0]
 800443a:	e7db      	b.n	80043f4 <_puts_r+0x88>
 800443c:	08004dc0 	.word	0x08004dc0
 8004440:	08004de0 	.word	0x08004de0
 8004444:	08004da0 	.word	0x08004da0

08004448 <puts>:
 8004448:	4b02      	ldr	r3, [pc, #8]	; (8004454 <puts+0xc>)
 800444a:	4601      	mov	r1, r0
 800444c:	6818      	ldr	r0, [r3, #0]
 800444e:	f7ff bf8d 	b.w	800436c <_puts_r>
 8004452:	bf00      	nop
 8004454:	20000014 	.word	0x20000014

08004458 <__swbuf_r>:
 8004458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800445a:	460e      	mov	r6, r1
 800445c:	4614      	mov	r4, r2
 800445e:	4605      	mov	r5, r0
 8004460:	b118      	cbz	r0, 800446a <__swbuf_r+0x12>
 8004462:	6983      	ldr	r3, [r0, #24]
 8004464:	b90b      	cbnz	r3, 800446a <__swbuf_r+0x12>
 8004466:	f000 f9d1 	bl	800480c <__sinit>
 800446a:	4b21      	ldr	r3, [pc, #132]	; (80044f0 <__swbuf_r+0x98>)
 800446c:	429c      	cmp	r4, r3
 800446e:	d12b      	bne.n	80044c8 <__swbuf_r+0x70>
 8004470:	686c      	ldr	r4, [r5, #4]
 8004472:	69a3      	ldr	r3, [r4, #24]
 8004474:	60a3      	str	r3, [r4, #8]
 8004476:	89a3      	ldrh	r3, [r4, #12]
 8004478:	071a      	lsls	r2, r3, #28
 800447a:	d52f      	bpl.n	80044dc <__swbuf_r+0x84>
 800447c:	6923      	ldr	r3, [r4, #16]
 800447e:	b36b      	cbz	r3, 80044dc <__swbuf_r+0x84>
 8004480:	6923      	ldr	r3, [r4, #16]
 8004482:	6820      	ldr	r0, [r4, #0]
 8004484:	1ac0      	subs	r0, r0, r3
 8004486:	6963      	ldr	r3, [r4, #20]
 8004488:	b2f6      	uxtb	r6, r6
 800448a:	4283      	cmp	r3, r0
 800448c:	4637      	mov	r7, r6
 800448e:	dc04      	bgt.n	800449a <__swbuf_r+0x42>
 8004490:	4621      	mov	r1, r4
 8004492:	4628      	mov	r0, r5
 8004494:	f000 f926 	bl	80046e4 <_fflush_r>
 8004498:	bb30      	cbnz	r0, 80044e8 <__swbuf_r+0x90>
 800449a:	68a3      	ldr	r3, [r4, #8]
 800449c:	3b01      	subs	r3, #1
 800449e:	60a3      	str	r3, [r4, #8]
 80044a0:	6823      	ldr	r3, [r4, #0]
 80044a2:	1c5a      	adds	r2, r3, #1
 80044a4:	6022      	str	r2, [r4, #0]
 80044a6:	701e      	strb	r6, [r3, #0]
 80044a8:	6963      	ldr	r3, [r4, #20]
 80044aa:	3001      	adds	r0, #1
 80044ac:	4283      	cmp	r3, r0
 80044ae:	d004      	beq.n	80044ba <__swbuf_r+0x62>
 80044b0:	89a3      	ldrh	r3, [r4, #12]
 80044b2:	07db      	lsls	r3, r3, #31
 80044b4:	d506      	bpl.n	80044c4 <__swbuf_r+0x6c>
 80044b6:	2e0a      	cmp	r6, #10
 80044b8:	d104      	bne.n	80044c4 <__swbuf_r+0x6c>
 80044ba:	4621      	mov	r1, r4
 80044bc:	4628      	mov	r0, r5
 80044be:	f000 f911 	bl	80046e4 <_fflush_r>
 80044c2:	b988      	cbnz	r0, 80044e8 <__swbuf_r+0x90>
 80044c4:	4638      	mov	r0, r7
 80044c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80044c8:	4b0a      	ldr	r3, [pc, #40]	; (80044f4 <__swbuf_r+0x9c>)
 80044ca:	429c      	cmp	r4, r3
 80044cc:	d101      	bne.n	80044d2 <__swbuf_r+0x7a>
 80044ce:	68ac      	ldr	r4, [r5, #8]
 80044d0:	e7cf      	b.n	8004472 <__swbuf_r+0x1a>
 80044d2:	4b09      	ldr	r3, [pc, #36]	; (80044f8 <__swbuf_r+0xa0>)
 80044d4:	429c      	cmp	r4, r3
 80044d6:	bf08      	it	eq
 80044d8:	68ec      	ldreq	r4, [r5, #12]
 80044da:	e7ca      	b.n	8004472 <__swbuf_r+0x1a>
 80044dc:	4621      	mov	r1, r4
 80044de:	4628      	mov	r0, r5
 80044e0:	f000 f80c 	bl	80044fc <__swsetup_r>
 80044e4:	2800      	cmp	r0, #0
 80044e6:	d0cb      	beq.n	8004480 <__swbuf_r+0x28>
 80044e8:	f04f 37ff 	mov.w	r7, #4294967295
 80044ec:	e7ea      	b.n	80044c4 <__swbuf_r+0x6c>
 80044ee:	bf00      	nop
 80044f0:	08004dc0 	.word	0x08004dc0
 80044f4:	08004de0 	.word	0x08004de0
 80044f8:	08004da0 	.word	0x08004da0

080044fc <__swsetup_r>:
 80044fc:	4b32      	ldr	r3, [pc, #200]	; (80045c8 <__swsetup_r+0xcc>)
 80044fe:	b570      	push	{r4, r5, r6, lr}
 8004500:	681d      	ldr	r5, [r3, #0]
 8004502:	4606      	mov	r6, r0
 8004504:	460c      	mov	r4, r1
 8004506:	b125      	cbz	r5, 8004512 <__swsetup_r+0x16>
 8004508:	69ab      	ldr	r3, [r5, #24]
 800450a:	b913      	cbnz	r3, 8004512 <__swsetup_r+0x16>
 800450c:	4628      	mov	r0, r5
 800450e:	f000 f97d 	bl	800480c <__sinit>
 8004512:	4b2e      	ldr	r3, [pc, #184]	; (80045cc <__swsetup_r+0xd0>)
 8004514:	429c      	cmp	r4, r3
 8004516:	d10f      	bne.n	8004538 <__swsetup_r+0x3c>
 8004518:	686c      	ldr	r4, [r5, #4]
 800451a:	89a3      	ldrh	r3, [r4, #12]
 800451c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004520:	0719      	lsls	r1, r3, #28
 8004522:	d42c      	bmi.n	800457e <__swsetup_r+0x82>
 8004524:	06dd      	lsls	r5, r3, #27
 8004526:	d411      	bmi.n	800454c <__swsetup_r+0x50>
 8004528:	2309      	movs	r3, #9
 800452a:	6033      	str	r3, [r6, #0]
 800452c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004530:	81a3      	strh	r3, [r4, #12]
 8004532:	f04f 30ff 	mov.w	r0, #4294967295
 8004536:	e03e      	b.n	80045b6 <__swsetup_r+0xba>
 8004538:	4b25      	ldr	r3, [pc, #148]	; (80045d0 <__swsetup_r+0xd4>)
 800453a:	429c      	cmp	r4, r3
 800453c:	d101      	bne.n	8004542 <__swsetup_r+0x46>
 800453e:	68ac      	ldr	r4, [r5, #8]
 8004540:	e7eb      	b.n	800451a <__swsetup_r+0x1e>
 8004542:	4b24      	ldr	r3, [pc, #144]	; (80045d4 <__swsetup_r+0xd8>)
 8004544:	429c      	cmp	r4, r3
 8004546:	bf08      	it	eq
 8004548:	68ec      	ldreq	r4, [r5, #12]
 800454a:	e7e6      	b.n	800451a <__swsetup_r+0x1e>
 800454c:	0758      	lsls	r0, r3, #29
 800454e:	d512      	bpl.n	8004576 <__swsetup_r+0x7a>
 8004550:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004552:	b141      	cbz	r1, 8004566 <__swsetup_r+0x6a>
 8004554:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004558:	4299      	cmp	r1, r3
 800455a:	d002      	beq.n	8004562 <__swsetup_r+0x66>
 800455c:	4630      	mov	r0, r6
 800455e:	f000 fa59 	bl	8004a14 <_free_r>
 8004562:	2300      	movs	r3, #0
 8004564:	6363      	str	r3, [r4, #52]	; 0x34
 8004566:	89a3      	ldrh	r3, [r4, #12]
 8004568:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800456c:	81a3      	strh	r3, [r4, #12]
 800456e:	2300      	movs	r3, #0
 8004570:	6063      	str	r3, [r4, #4]
 8004572:	6923      	ldr	r3, [r4, #16]
 8004574:	6023      	str	r3, [r4, #0]
 8004576:	89a3      	ldrh	r3, [r4, #12]
 8004578:	f043 0308 	orr.w	r3, r3, #8
 800457c:	81a3      	strh	r3, [r4, #12]
 800457e:	6923      	ldr	r3, [r4, #16]
 8004580:	b94b      	cbnz	r3, 8004596 <__swsetup_r+0x9a>
 8004582:	89a3      	ldrh	r3, [r4, #12]
 8004584:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004588:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800458c:	d003      	beq.n	8004596 <__swsetup_r+0x9a>
 800458e:	4621      	mov	r1, r4
 8004590:	4630      	mov	r0, r6
 8004592:	f000 f9ff 	bl	8004994 <__smakebuf_r>
 8004596:	89a0      	ldrh	r0, [r4, #12]
 8004598:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800459c:	f010 0301 	ands.w	r3, r0, #1
 80045a0:	d00a      	beq.n	80045b8 <__swsetup_r+0xbc>
 80045a2:	2300      	movs	r3, #0
 80045a4:	60a3      	str	r3, [r4, #8]
 80045a6:	6963      	ldr	r3, [r4, #20]
 80045a8:	425b      	negs	r3, r3
 80045aa:	61a3      	str	r3, [r4, #24]
 80045ac:	6923      	ldr	r3, [r4, #16]
 80045ae:	b943      	cbnz	r3, 80045c2 <__swsetup_r+0xc6>
 80045b0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80045b4:	d1ba      	bne.n	800452c <__swsetup_r+0x30>
 80045b6:	bd70      	pop	{r4, r5, r6, pc}
 80045b8:	0781      	lsls	r1, r0, #30
 80045ba:	bf58      	it	pl
 80045bc:	6963      	ldrpl	r3, [r4, #20]
 80045be:	60a3      	str	r3, [r4, #8]
 80045c0:	e7f4      	b.n	80045ac <__swsetup_r+0xb0>
 80045c2:	2000      	movs	r0, #0
 80045c4:	e7f7      	b.n	80045b6 <__swsetup_r+0xba>
 80045c6:	bf00      	nop
 80045c8:	20000014 	.word	0x20000014
 80045cc:	08004dc0 	.word	0x08004dc0
 80045d0:	08004de0 	.word	0x08004de0
 80045d4:	08004da0 	.word	0x08004da0

080045d8 <__sflush_r>:
 80045d8:	898a      	ldrh	r2, [r1, #12]
 80045da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045de:	4605      	mov	r5, r0
 80045e0:	0710      	lsls	r0, r2, #28
 80045e2:	460c      	mov	r4, r1
 80045e4:	d458      	bmi.n	8004698 <__sflush_r+0xc0>
 80045e6:	684b      	ldr	r3, [r1, #4]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	dc05      	bgt.n	80045f8 <__sflush_r+0x20>
 80045ec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	dc02      	bgt.n	80045f8 <__sflush_r+0x20>
 80045f2:	2000      	movs	r0, #0
 80045f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80045f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80045fa:	2e00      	cmp	r6, #0
 80045fc:	d0f9      	beq.n	80045f2 <__sflush_r+0x1a>
 80045fe:	2300      	movs	r3, #0
 8004600:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004604:	682f      	ldr	r7, [r5, #0]
 8004606:	602b      	str	r3, [r5, #0]
 8004608:	d032      	beq.n	8004670 <__sflush_r+0x98>
 800460a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800460c:	89a3      	ldrh	r3, [r4, #12]
 800460e:	075a      	lsls	r2, r3, #29
 8004610:	d505      	bpl.n	800461e <__sflush_r+0x46>
 8004612:	6863      	ldr	r3, [r4, #4]
 8004614:	1ac0      	subs	r0, r0, r3
 8004616:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004618:	b10b      	cbz	r3, 800461e <__sflush_r+0x46>
 800461a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800461c:	1ac0      	subs	r0, r0, r3
 800461e:	2300      	movs	r3, #0
 8004620:	4602      	mov	r2, r0
 8004622:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004624:	6a21      	ldr	r1, [r4, #32]
 8004626:	4628      	mov	r0, r5
 8004628:	47b0      	blx	r6
 800462a:	1c43      	adds	r3, r0, #1
 800462c:	89a3      	ldrh	r3, [r4, #12]
 800462e:	d106      	bne.n	800463e <__sflush_r+0x66>
 8004630:	6829      	ldr	r1, [r5, #0]
 8004632:	291d      	cmp	r1, #29
 8004634:	d82c      	bhi.n	8004690 <__sflush_r+0xb8>
 8004636:	4a2a      	ldr	r2, [pc, #168]	; (80046e0 <__sflush_r+0x108>)
 8004638:	40ca      	lsrs	r2, r1
 800463a:	07d6      	lsls	r6, r2, #31
 800463c:	d528      	bpl.n	8004690 <__sflush_r+0xb8>
 800463e:	2200      	movs	r2, #0
 8004640:	6062      	str	r2, [r4, #4]
 8004642:	04d9      	lsls	r1, r3, #19
 8004644:	6922      	ldr	r2, [r4, #16]
 8004646:	6022      	str	r2, [r4, #0]
 8004648:	d504      	bpl.n	8004654 <__sflush_r+0x7c>
 800464a:	1c42      	adds	r2, r0, #1
 800464c:	d101      	bne.n	8004652 <__sflush_r+0x7a>
 800464e:	682b      	ldr	r3, [r5, #0]
 8004650:	b903      	cbnz	r3, 8004654 <__sflush_r+0x7c>
 8004652:	6560      	str	r0, [r4, #84]	; 0x54
 8004654:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004656:	602f      	str	r7, [r5, #0]
 8004658:	2900      	cmp	r1, #0
 800465a:	d0ca      	beq.n	80045f2 <__sflush_r+0x1a>
 800465c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004660:	4299      	cmp	r1, r3
 8004662:	d002      	beq.n	800466a <__sflush_r+0x92>
 8004664:	4628      	mov	r0, r5
 8004666:	f000 f9d5 	bl	8004a14 <_free_r>
 800466a:	2000      	movs	r0, #0
 800466c:	6360      	str	r0, [r4, #52]	; 0x34
 800466e:	e7c1      	b.n	80045f4 <__sflush_r+0x1c>
 8004670:	6a21      	ldr	r1, [r4, #32]
 8004672:	2301      	movs	r3, #1
 8004674:	4628      	mov	r0, r5
 8004676:	47b0      	blx	r6
 8004678:	1c41      	adds	r1, r0, #1
 800467a:	d1c7      	bne.n	800460c <__sflush_r+0x34>
 800467c:	682b      	ldr	r3, [r5, #0]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d0c4      	beq.n	800460c <__sflush_r+0x34>
 8004682:	2b1d      	cmp	r3, #29
 8004684:	d001      	beq.n	800468a <__sflush_r+0xb2>
 8004686:	2b16      	cmp	r3, #22
 8004688:	d101      	bne.n	800468e <__sflush_r+0xb6>
 800468a:	602f      	str	r7, [r5, #0]
 800468c:	e7b1      	b.n	80045f2 <__sflush_r+0x1a>
 800468e:	89a3      	ldrh	r3, [r4, #12]
 8004690:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004694:	81a3      	strh	r3, [r4, #12]
 8004696:	e7ad      	b.n	80045f4 <__sflush_r+0x1c>
 8004698:	690f      	ldr	r7, [r1, #16]
 800469a:	2f00      	cmp	r7, #0
 800469c:	d0a9      	beq.n	80045f2 <__sflush_r+0x1a>
 800469e:	0793      	lsls	r3, r2, #30
 80046a0:	680e      	ldr	r6, [r1, #0]
 80046a2:	bf08      	it	eq
 80046a4:	694b      	ldreq	r3, [r1, #20]
 80046a6:	600f      	str	r7, [r1, #0]
 80046a8:	bf18      	it	ne
 80046aa:	2300      	movne	r3, #0
 80046ac:	eba6 0807 	sub.w	r8, r6, r7
 80046b0:	608b      	str	r3, [r1, #8]
 80046b2:	f1b8 0f00 	cmp.w	r8, #0
 80046b6:	dd9c      	ble.n	80045f2 <__sflush_r+0x1a>
 80046b8:	6a21      	ldr	r1, [r4, #32]
 80046ba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80046bc:	4643      	mov	r3, r8
 80046be:	463a      	mov	r2, r7
 80046c0:	4628      	mov	r0, r5
 80046c2:	47b0      	blx	r6
 80046c4:	2800      	cmp	r0, #0
 80046c6:	dc06      	bgt.n	80046d6 <__sflush_r+0xfe>
 80046c8:	89a3      	ldrh	r3, [r4, #12]
 80046ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80046ce:	81a3      	strh	r3, [r4, #12]
 80046d0:	f04f 30ff 	mov.w	r0, #4294967295
 80046d4:	e78e      	b.n	80045f4 <__sflush_r+0x1c>
 80046d6:	4407      	add	r7, r0
 80046d8:	eba8 0800 	sub.w	r8, r8, r0
 80046dc:	e7e9      	b.n	80046b2 <__sflush_r+0xda>
 80046de:	bf00      	nop
 80046e0:	20400001 	.word	0x20400001

080046e4 <_fflush_r>:
 80046e4:	b538      	push	{r3, r4, r5, lr}
 80046e6:	690b      	ldr	r3, [r1, #16]
 80046e8:	4605      	mov	r5, r0
 80046ea:	460c      	mov	r4, r1
 80046ec:	b913      	cbnz	r3, 80046f4 <_fflush_r+0x10>
 80046ee:	2500      	movs	r5, #0
 80046f0:	4628      	mov	r0, r5
 80046f2:	bd38      	pop	{r3, r4, r5, pc}
 80046f4:	b118      	cbz	r0, 80046fe <_fflush_r+0x1a>
 80046f6:	6983      	ldr	r3, [r0, #24]
 80046f8:	b90b      	cbnz	r3, 80046fe <_fflush_r+0x1a>
 80046fa:	f000 f887 	bl	800480c <__sinit>
 80046fe:	4b14      	ldr	r3, [pc, #80]	; (8004750 <_fflush_r+0x6c>)
 8004700:	429c      	cmp	r4, r3
 8004702:	d11b      	bne.n	800473c <_fflush_r+0x58>
 8004704:	686c      	ldr	r4, [r5, #4]
 8004706:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d0ef      	beq.n	80046ee <_fflush_r+0xa>
 800470e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004710:	07d0      	lsls	r0, r2, #31
 8004712:	d404      	bmi.n	800471e <_fflush_r+0x3a>
 8004714:	0599      	lsls	r1, r3, #22
 8004716:	d402      	bmi.n	800471e <_fflush_r+0x3a>
 8004718:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800471a:	f000 f915 	bl	8004948 <__retarget_lock_acquire_recursive>
 800471e:	4628      	mov	r0, r5
 8004720:	4621      	mov	r1, r4
 8004722:	f7ff ff59 	bl	80045d8 <__sflush_r>
 8004726:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004728:	07da      	lsls	r2, r3, #31
 800472a:	4605      	mov	r5, r0
 800472c:	d4e0      	bmi.n	80046f0 <_fflush_r+0xc>
 800472e:	89a3      	ldrh	r3, [r4, #12]
 8004730:	059b      	lsls	r3, r3, #22
 8004732:	d4dd      	bmi.n	80046f0 <_fflush_r+0xc>
 8004734:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004736:	f000 f908 	bl	800494a <__retarget_lock_release_recursive>
 800473a:	e7d9      	b.n	80046f0 <_fflush_r+0xc>
 800473c:	4b05      	ldr	r3, [pc, #20]	; (8004754 <_fflush_r+0x70>)
 800473e:	429c      	cmp	r4, r3
 8004740:	d101      	bne.n	8004746 <_fflush_r+0x62>
 8004742:	68ac      	ldr	r4, [r5, #8]
 8004744:	e7df      	b.n	8004706 <_fflush_r+0x22>
 8004746:	4b04      	ldr	r3, [pc, #16]	; (8004758 <_fflush_r+0x74>)
 8004748:	429c      	cmp	r4, r3
 800474a:	bf08      	it	eq
 800474c:	68ec      	ldreq	r4, [r5, #12]
 800474e:	e7da      	b.n	8004706 <_fflush_r+0x22>
 8004750:	08004dc0 	.word	0x08004dc0
 8004754:	08004de0 	.word	0x08004de0
 8004758:	08004da0 	.word	0x08004da0

0800475c <std>:
 800475c:	2300      	movs	r3, #0
 800475e:	b510      	push	{r4, lr}
 8004760:	4604      	mov	r4, r0
 8004762:	e9c0 3300 	strd	r3, r3, [r0]
 8004766:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800476a:	6083      	str	r3, [r0, #8]
 800476c:	8181      	strh	r1, [r0, #12]
 800476e:	6643      	str	r3, [r0, #100]	; 0x64
 8004770:	81c2      	strh	r2, [r0, #14]
 8004772:	6183      	str	r3, [r0, #24]
 8004774:	4619      	mov	r1, r3
 8004776:	2208      	movs	r2, #8
 8004778:	305c      	adds	r0, #92	; 0x5c
 800477a:	f7ff fdef 	bl	800435c <memset>
 800477e:	4b05      	ldr	r3, [pc, #20]	; (8004794 <std+0x38>)
 8004780:	6263      	str	r3, [r4, #36]	; 0x24
 8004782:	4b05      	ldr	r3, [pc, #20]	; (8004798 <std+0x3c>)
 8004784:	62a3      	str	r3, [r4, #40]	; 0x28
 8004786:	4b05      	ldr	r3, [pc, #20]	; (800479c <std+0x40>)
 8004788:	62e3      	str	r3, [r4, #44]	; 0x2c
 800478a:	4b05      	ldr	r3, [pc, #20]	; (80047a0 <std+0x44>)
 800478c:	6224      	str	r4, [r4, #32]
 800478e:	6323      	str	r3, [r4, #48]	; 0x30
 8004790:	bd10      	pop	{r4, pc}
 8004792:	bf00      	nop
 8004794:	08004b89 	.word	0x08004b89
 8004798:	08004bab 	.word	0x08004bab
 800479c:	08004be3 	.word	0x08004be3
 80047a0:	08004c07 	.word	0x08004c07

080047a4 <_cleanup_r>:
 80047a4:	4901      	ldr	r1, [pc, #4]	; (80047ac <_cleanup_r+0x8>)
 80047a6:	f000 b8af 	b.w	8004908 <_fwalk_reent>
 80047aa:	bf00      	nop
 80047ac:	080046e5 	.word	0x080046e5

080047b0 <__sfmoreglue>:
 80047b0:	b570      	push	{r4, r5, r6, lr}
 80047b2:	1e4a      	subs	r2, r1, #1
 80047b4:	2568      	movs	r5, #104	; 0x68
 80047b6:	4355      	muls	r5, r2
 80047b8:	460e      	mov	r6, r1
 80047ba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80047be:	f000 f979 	bl	8004ab4 <_malloc_r>
 80047c2:	4604      	mov	r4, r0
 80047c4:	b140      	cbz	r0, 80047d8 <__sfmoreglue+0x28>
 80047c6:	2100      	movs	r1, #0
 80047c8:	e9c0 1600 	strd	r1, r6, [r0]
 80047cc:	300c      	adds	r0, #12
 80047ce:	60a0      	str	r0, [r4, #8]
 80047d0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80047d4:	f7ff fdc2 	bl	800435c <memset>
 80047d8:	4620      	mov	r0, r4
 80047da:	bd70      	pop	{r4, r5, r6, pc}

080047dc <__sfp_lock_acquire>:
 80047dc:	4801      	ldr	r0, [pc, #4]	; (80047e4 <__sfp_lock_acquire+0x8>)
 80047de:	f000 b8b3 	b.w	8004948 <__retarget_lock_acquire_recursive>
 80047e2:	bf00      	nop
 80047e4:	20012e84 	.word	0x20012e84

080047e8 <__sfp_lock_release>:
 80047e8:	4801      	ldr	r0, [pc, #4]	; (80047f0 <__sfp_lock_release+0x8>)
 80047ea:	f000 b8ae 	b.w	800494a <__retarget_lock_release_recursive>
 80047ee:	bf00      	nop
 80047f0:	20012e84 	.word	0x20012e84

080047f4 <__sinit_lock_acquire>:
 80047f4:	4801      	ldr	r0, [pc, #4]	; (80047fc <__sinit_lock_acquire+0x8>)
 80047f6:	f000 b8a7 	b.w	8004948 <__retarget_lock_acquire_recursive>
 80047fa:	bf00      	nop
 80047fc:	20012e7f 	.word	0x20012e7f

08004800 <__sinit_lock_release>:
 8004800:	4801      	ldr	r0, [pc, #4]	; (8004808 <__sinit_lock_release+0x8>)
 8004802:	f000 b8a2 	b.w	800494a <__retarget_lock_release_recursive>
 8004806:	bf00      	nop
 8004808:	20012e7f 	.word	0x20012e7f

0800480c <__sinit>:
 800480c:	b510      	push	{r4, lr}
 800480e:	4604      	mov	r4, r0
 8004810:	f7ff fff0 	bl	80047f4 <__sinit_lock_acquire>
 8004814:	69a3      	ldr	r3, [r4, #24]
 8004816:	b11b      	cbz	r3, 8004820 <__sinit+0x14>
 8004818:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800481c:	f7ff bff0 	b.w	8004800 <__sinit_lock_release>
 8004820:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004824:	6523      	str	r3, [r4, #80]	; 0x50
 8004826:	4b13      	ldr	r3, [pc, #76]	; (8004874 <__sinit+0x68>)
 8004828:	4a13      	ldr	r2, [pc, #76]	; (8004878 <__sinit+0x6c>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	62a2      	str	r2, [r4, #40]	; 0x28
 800482e:	42a3      	cmp	r3, r4
 8004830:	bf04      	itt	eq
 8004832:	2301      	moveq	r3, #1
 8004834:	61a3      	streq	r3, [r4, #24]
 8004836:	4620      	mov	r0, r4
 8004838:	f000 f820 	bl	800487c <__sfp>
 800483c:	6060      	str	r0, [r4, #4]
 800483e:	4620      	mov	r0, r4
 8004840:	f000 f81c 	bl	800487c <__sfp>
 8004844:	60a0      	str	r0, [r4, #8]
 8004846:	4620      	mov	r0, r4
 8004848:	f000 f818 	bl	800487c <__sfp>
 800484c:	2200      	movs	r2, #0
 800484e:	60e0      	str	r0, [r4, #12]
 8004850:	2104      	movs	r1, #4
 8004852:	6860      	ldr	r0, [r4, #4]
 8004854:	f7ff ff82 	bl	800475c <std>
 8004858:	68a0      	ldr	r0, [r4, #8]
 800485a:	2201      	movs	r2, #1
 800485c:	2109      	movs	r1, #9
 800485e:	f7ff ff7d 	bl	800475c <std>
 8004862:	68e0      	ldr	r0, [r4, #12]
 8004864:	2202      	movs	r2, #2
 8004866:	2112      	movs	r1, #18
 8004868:	f7ff ff78 	bl	800475c <std>
 800486c:	2301      	movs	r3, #1
 800486e:	61a3      	str	r3, [r4, #24]
 8004870:	e7d2      	b.n	8004818 <__sinit+0xc>
 8004872:	bf00      	nop
 8004874:	08004d9c 	.word	0x08004d9c
 8004878:	080047a5 	.word	0x080047a5

0800487c <__sfp>:
 800487c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800487e:	4607      	mov	r7, r0
 8004880:	f7ff ffac 	bl	80047dc <__sfp_lock_acquire>
 8004884:	4b1e      	ldr	r3, [pc, #120]	; (8004900 <__sfp+0x84>)
 8004886:	681e      	ldr	r6, [r3, #0]
 8004888:	69b3      	ldr	r3, [r6, #24]
 800488a:	b913      	cbnz	r3, 8004892 <__sfp+0x16>
 800488c:	4630      	mov	r0, r6
 800488e:	f7ff ffbd 	bl	800480c <__sinit>
 8004892:	3648      	adds	r6, #72	; 0x48
 8004894:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004898:	3b01      	subs	r3, #1
 800489a:	d503      	bpl.n	80048a4 <__sfp+0x28>
 800489c:	6833      	ldr	r3, [r6, #0]
 800489e:	b30b      	cbz	r3, 80048e4 <__sfp+0x68>
 80048a0:	6836      	ldr	r6, [r6, #0]
 80048a2:	e7f7      	b.n	8004894 <__sfp+0x18>
 80048a4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80048a8:	b9d5      	cbnz	r5, 80048e0 <__sfp+0x64>
 80048aa:	4b16      	ldr	r3, [pc, #88]	; (8004904 <__sfp+0x88>)
 80048ac:	60e3      	str	r3, [r4, #12]
 80048ae:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80048b2:	6665      	str	r5, [r4, #100]	; 0x64
 80048b4:	f000 f847 	bl	8004946 <__retarget_lock_init_recursive>
 80048b8:	f7ff ff96 	bl	80047e8 <__sfp_lock_release>
 80048bc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80048c0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80048c4:	6025      	str	r5, [r4, #0]
 80048c6:	61a5      	str	r5, [r4, #24]
 80048c8:	2208      	movs	r2, #8
 80048ca:	4629      	mov	r1, r5
 80048cc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80048d0:	f7ff fd44 	bl	800435c <memset>
 80048d4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80048d8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80048dc:	4620      	mov	r0, r4
 80048de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80048e0:	3468      	adds	r4, #104	; 0x68
 80048e2:	e7d9      	b.n	8004898 <__sfp+0x1c>
 80048e4:	2104      	movs	r1, #4
 80048e6:	4638      	mov	r0, r7
 80048e8:	f7ff ff62 	bl	80047b0 <__sfmoreglue>
 80048ec:	4604      	mov	r4, r0
 80048ee:	6030      	str	r0, [r6, #0]
 80048f0:	2800      	cmp	r0, #0
 80048f2:	d1d5      	bne.n	80048a0 <__sfp+0x24>
 80048f4:	f7ff ff78 	bl	80047e8 <__sfp_lock_release>
 80048f8:	230c      	movs	r3, #12
 80048fa:	603b      	str	r3, [r7, #0]
 80048fc:	e7ee      	b.n	80048dc <__sfp+0x60>
 80048fe:	bf00      	nop
 8004900:	08004d9c 	.word	0x08004d9c
 8004904:	ffff0001 	.word	0xffff0001

08004908 <_fwalk_reent>:
 8004908:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800490c:	4606      	mov	r6, r0
 800490e:	4688      	mov	r8, r1
 8004910:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004914:	2700      	movs	r7, #0
 8004916:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800491a:	f1b9 0901 	subs.w	r9, r9, #1
 800491e:	d505      	bpl.n	800492c <_fwalk_reent+0x24>
 8004920:	6824      	ldr	r4, [r4, #0]
 8004922:	2c00      	cmp	r4, #0
 8004924:	d1f7      	bne.n	8004916 <_fwalk_reent+0xe>
 8004926:	4638      	mov	r0, r7
 8004928:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800492c:	89ab      	ldrh	r3, [r5, #12]
 800492e:	2b01      	cmp	r3, #1
 8004930:	d907      	bls.n	8004942 <_fwalk_reent+0x3a>
 8004932:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004936:	3301      	adds	r3, #1
 8004938:	d003      	beq.n	8004942 <_fwalk_reent+0x3a>
 800493a:	4629      	mov	r1, r5
 800493c:	4630      	mov	r0, r6
 800493e:	47c0      	blx	r8
 8004940:	4307      	orrs	r7, r0
 8004942:	3568      	adds	r5, #104	; 0x68
 8004944:	e7e9      	b.n	800491a <_fwalk_reent+0x12>

08004946 <__retarget_lock_init_recursive>:
 8004946:	4770      	bx	lr

08004948 <__retarget_lock_acquire_recursive>:
 8004948:	4770      	bx	lr

0800494a <__retarget_lock_release_recursive>:
 800494a:	4770      	bx	lr

0800494c <__swhatbuf_r>:
 800494c:	b570      	push	{r4, r5, r6, lr}
 800494e:	460e      	mov	r6, r1
 8004950:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004954:	2900      	cmp	r1, #0
 8004956:	b096      	sub	sp, #88	; 0x58
 8004958:	4614      	mov	r4, r2
 800495a:	461d      	mov	r5, r3
 800495c:	da07      	bge.n	800496e <__swhatbuf_r+0x22>
 800495e:	2300      	movs	r3, #0
 8004960:	602b      	str	r3, [r5, #0]
 8004962:	89b3      	ldrh	r3, [r6, #12]
 8004964:	061a      	lsls	r2, r3, #24
 8004966:	d410      	bmi.n	800498a <__swhatbuf_r+0x3e>
 8004968:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800496c:	e00e      	b.n	800498c <__swhatbuf_r+0x40>
 800496e:	466a      	mov	r2, sp
 8004970:	f000 f970 	bl	8004c54 <_fstat_r>
 8004974:	2800      	cmp	r0, #0
 8004976:	dbf2      	blt.n	800495e <__swhatbuf_r+0x12>
 8004978:	9a01      	ldr	r2, [sp, #4]
 800497a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800497e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004982:	425a      	negs	r2, r3
 8004984:	415a      	adcs	r2, r3
 8004986:	602a      	str	r2, [r5, #0]
 8004988:	e7ee      	b.n	8004968 <__swhatbuf_r+0x1c>
 800498a:	2340      	movs	r3, #64	; 0x40
 800498c:	2000      	movs	r0, #0
 800498e:	6023      	str	r3, [r4, #0]
 8004990:	b016      	add	sp, #88	; 0x58
 8004992:	bd70      	pop	{r4, r5, r6, pc}

08004994 <__smakebuf_r>:
 8004994:	898b      	ldrh	r3, [r1, #12]
 8004996:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004998:	079d      	lsls	r5, r3, #30
 800499a:	4606      	mov	r6, r0
 800499c:	460c      	mov	r4, r1
 800499e:	d507      	bpl.n	80049b0 <__smakebuf_r+0x1c>
 80049a0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80049a4:	6023      	str	r3, [r4, #0]
 80049a6:	6123      	str	r3, [r4, #16]
 80049a8:	2301      	movs	r3, #1
 80049aa:	6163      	str	r3, [r4, #20]
 80049ac:	b002      	add	sp, #8
 80049ae:	bd70      	pop	{r4, r5, r6, pc}
 80049b0:	ab01      	add	r3, sp, #4
 80049b2:	466a      	mov	r2, sp
 80049b4:	f7ff ffca 	bl	800494c <__swhatbuf_r>
 80049b8:	9900      	ldr	r1, [sp, #0]
 80049ba:	4605      	mov	r5, r0
 80049bc:	4630      	mov	r0, r6
 80049be:	f000 f879 	bl	8004ab4 <_malloc_r>
 80049c2:	b948      	cbnz	r0, 80049d8 <__smakebuf_r+0x44>
 80049c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80049c8:	059a      	lsls	r2, r3, #22
 80049ca:	d4ef      	bmi.n	80049ac <__smakebuf_r+0x18>
 80049cc:	f023 0303 	bic.w	r3, r3, #3
 80049d0:	f043 0302 	orr.w	r3, r3, #2
 80049d4:	81a3      	strh	r3, [r4, #12]
 80049d6:	e7e3      	b.n	80049a0 <__smakebuf_r+0xc>
 80049d8:	4b0d      	ldr	r3, [pc, #52]	; (8004a10 <__smakebuf_r+0x7c>)
 80049da:	62b3      	str	r3, [r6, #40]	; 0x28
 80049dc:	89a3      	ldrh	r3, [r4, #12]
 80049de:	6020      	str	r0, [r4, #0]
 80049e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049e4:	81a3      	strh	r3, [r4, #12]
 80049e6:	9b00      	ldr	r3, [sp, #0]
 80049e8:	6163      	str	r3, [r4, #20]
 80049ea:	9b01      	ldr	r3, [sp, #4]
 80049ec:	6120      	str	r0, [r4, #16]
 80049ee:	b15b      	cbz	r3, 8004a08 <__smakebuf_r+0x74>
 80049f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80049f4:	4630      	mov	r0, r6
 80049f6:	f000 f93f 	bl	8004c78 <_isatty_r>
 80049fa:	b128      	cbz	r0, 8004a08 <__smakebuf_r+0x74>
 80049fc:	89a3      	ldrh	r3, [r4, #12]
 80049fe:	f023 0303 	bic.w	r3, r3, #3
 8004a02:	f043 0301 	orr.w	r3, r3, #1
 8004a06:	81a3      	strh	r3, [r4, #12]
 8004a08:	89a0      	ldrh	r0, [r4, #12]
 8004a0a:	4305      	orrs	r5, r0
 8004a0c:	81a5      	strh	r5, [r4, #12]
 8004a0e:	e7cd      	b.n	80049ac <__smakebuf_r+0x18>
 8004a10:	080047a5 	.word	0x080047a5

08004a14 <_free_r>:
 8004a14:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004a16:	2900      	cmp	r1, #0
 8004a18:	d048      	beq.n	8004aac <_free_r+0x98>
 8004a1a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a1e:	9001      	str	r0, [sp, #4]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	f1a1 0404 	sub.w	r4, r1, #4
 8004a26:	bfb8      	it	lt
 8004a28:	18e4      	addlt	r4, r4, r3
 8004a2a:	f000 f947 	bl	8004cbc <__malloc_lock>
 8004a2e:	4a20      	ldr	r2, [pc, #128]	; (8004ab0 <_free_r+0x9c>)
 8004a30:	9801      	ldr	r0, [sp, #4]
 8004a32:	6813      	ldr	r3, [r2, #0]
 8004a34:	4615      	mov	r5, r2
 8004a36:	b933      	cbnz	r3, 8004a46 <_free_r+0x32>
 8004a38:	6063      	str	r3, [r4, #4]
 8004a3a:	6014      	str	r4, [r2, #0]
 8004a3c:	b003      	add	sp, #12
 8004a3e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004a42:	f000 b941 	b.w	8004cc8 <__malloc_unlock>
 8004a46:	42a3      	cmp	r3, r4
 8004a48:	d90b      	bls.n	8004a62 <_free_r+0x4e>
 8004a4a:	6821      	ldr	r1, [r4, #0]
 8004a4c:	1862      	adds	r2, r4, r1
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	bf04      	itt	eq
 8004a52:	681a      	ldreq	r2, [r3, #0]
 8004a54:	685b      	ldreq	r3, [r3, #4]
 8004a56:	6063      	str	r3, [r4, #4]
 8004a58:	bf04      	itt	eq
 8004a5a:	1852      	addeq	r2, r2, r1
 8004a5c:	6022      	streq	r2, [r4, #0]
 8004a5e:	602c      	str	r4, [r5, #0]
 8004a60:	e7ec      	b.n	8004a3c <_free_r+0x28>
 8004a62:	461a      	mov	r2, r3
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	b10b      	cbz	r3, 8004a6c <_free_r+0x58>
 8004a68:	42a3      	cmp	r3, r4
 8004a6a:	d9fa      	bls.n	8004a62 <_free_r+0x4e>
 8004a6c:	6811      	ldr	r1, [r2, #0]
 8004a6e:	1855      	adds	r5, r2, r1
 8004a70:	42a5      	cmp	r5, r4
 8004a72:	d10b      	bne.n	8004a8c <_free_r+0x78>
 8004a74:	6824      	ldr	r4, [r4, #0]
 8004a76:	4421      	add	r1, r4
 8004a78:	1854      	adds	r4, r2, r1
 8004a7a:	42a3      	cmp	r3, r4
 8004a7c:	6011      	str	r1, [r2, #0]
 8004a7e:	d1dd      	bne.n	8004a3c <_free_r+0x28>
 8004a80:	681c      	ldr	r4, [r3, #0]
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	6053      	str	r3, [r2, #4]
 8004a86:	4421      	add	r1, r4
 8004a88:	6011      	str	r1, [r2, #0]
 8004a8a:	e7d7      	b.n	8004a3c <_free_r+0x28>
 8004a8c:	d902      	bls.n	8004a94 <_free_r+0x80>
 8004a8e:	230c      	movs	r3, #12
 8004a90:	6003      	str	r3, [r0, #0]
 8004a92:	e7d3      	b.n	8004a3c <_free_r+0x28>
 8004a94:	6825      	ldr	r5, [r4, #0]
 8004a96:	1961      	adds	r1, r4, r5
 8004a98:	428b      	cmp	r3, r1
 8004a9a:	bf04      	itt	eq
 8004a9c:	6819      	ldreq	r1, [r3, #0]
 8004a9e:	685b      	ldreq	r3, [r3, #4]
 8004aa0:	6063      	str	r3, [r4, #4]
 8004aa2:	bf04      	itt	eq
 8004aa4:	1949      	addeq	r1, r1, r5
 8004aa6:	6021      	streq	r1, [r4, #0]
 8004aa8:	6054      	str	r4, [r2, #4]
 8004aaa:	e7c7      	b.n	8004a3c <_free_r+0x28>
 8004aac:	b003      	add	sp, #12
 8004aae:	bd30      	pop	{r4, r5, pc}
 8004ab0:	20012de4 	.word	0x20012de4

08004ab4 <_malloc_r>:
 8004ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ab6:	1ccd      	adds	r5, r1, #3
 8004ab8:	f025 0503 	bic.w	r5, r5, #3
 8004abc:	3508      	adds	r5, #8
 8004abe:	2d0c      	cmp	r5, #12
 8004ac0:	bf38      	it	cc
 8004ac2:	250c      	movcc	r5, #12
 8004ac4:	2d00      	cmp	r5, #0
 8004ac6:	4606      	mov	r6, r0
 8004ac8:	db01      	blt.n	8004ace <_malloc_r+0x1a>
 8004aca:	42a9      	cmp	r1, r5
 8004acc:	d903      	bls.n	8004ad6 <_malloc_r+0x22>
 8004ace:	230c      	movs	r3, #12
 8004ad0:	6033      	str	r3, [r6, #0]
 8004ad2:	2000      	movs	r0, #0
 8004ad4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ad6:	f000 f8f1 	bl	8004cbc <__malloc_lock>
 8004ada:	4921      	ldr	r1, [pc, #132]	; (8004b60 <_malloc_r+0xac>)
 8004adc:	680a      	ldr	r2, [r1, #0]
 8004ade:	4614      	mov	r4, r2
 8004ae0:	b99c      	cbnz	r4, 8004b0a <_malloc_r+0x56>
 8004ae2:	4f20      	ldr	r7, [pc, #128]	; (8004b64 <_malloc_r+0xb0>)
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	b923      	cbnz	r3, 8004af2 <_malloc_r+0x3e>
 8004ae8:	4621      	mov	r1, r4
 8004aea:	4630      	mov	r0, r6
 8004aec:	f000 f83c 	bl	8004b68 <_sbrk_r>
 8004af0:	6038      	str	r0, [r7, #0]
 8004af2:	4629      	mov	r1, r5
 8004af4:	4630      	mov	r0, r6
 8004af6:	f000 f837 	bl	8004b68 <_sbrk_r>
 8004afa:	1c43      	adds	r3, r0, #1
 8004afc:	d123      	bne.n	8004b46 <_malloc_r+0x92>
 8004afe:	230c      	movs	r3, #12
 8004b00:	6033      	str	r3, [r6, #0]
 8004b02:	4630      	mov	r0, r6
 8004b04:	f000 f8e0 	bl	8004cc8 <__malloc_unlock>
 8004b08:	e7e3      	b.n	8004ad2 <_malloc_r+0x1e>
 8004b0a:	6823      	ldr	r3, [r4, #0]
 8004b0c:	1b5b      	subs	r3, r3, r5
 8004b0e:	d417      	bmi.n	8004b40 <_malloc_r+0x8c>
 8004b10:	2b0b      	cmp	r3, #11
 8004b12:	d903      	bls.n	8004b1c <_malloc_r+0x68>
 8004b14:	6023      	str	r3, [r4, #0]
 8004b16:	441c      	add	r4, r3
 8004b18:	6025      	str	r5, [r4, #0]
 8004b1a:	e004      	b.n	8004b26 <_malloc_r+0x72>
 8004b1c:	6863      	ldr	r3, [r4, #4]
 8004b1e:	42a2      	cmp	r2, r4
 8004b20:	bf0c      	ite	eq
 8004b22:	600b      	streq	r3, [r1, #0]
 8004b24:	6053      	strne	r3, [r2, #4]
 8004b26:	4630      	mov	r0, r6
 8004b28:	f000 f8ce 	bl	8004cc8 <__malloc_unlock>
 8004b2c:	f104 000b 	add.w	r0, r4, #11
 8004b30:	1d23      	adds	r3, r4, #4
 8004b32:	f020 0007 	bic.w	r0, r0, #7
 8004b36:	1ac2      	subs	r2, r0, r3
 8004b38:	d0cc      	beq.n	8004ad4 <_malloc_r+0x20>
 8004b3a:	1a1b      	subs	r3, r3, r0
 8004b3c:	50a3      	str	r3, [r4, r2]
 8004b3e:	e7c9      	b.n	8004ad4 <_malloc_r+0x20>
 8004b40:	4622      	mov	r2, r4
 8004b42:	6864      	ldr	r4, [r4, #4]
 8004b44:	e7cc      	b.n	8004ae0 <_malloc_r+0x2c>
 8004b46:	1cc4      	adds	r4, r0, #3
 8004b48:	f024 0403 	bic.w	r4, r4, #3
 8004b4c:	42a0      	cmp	r0, r4
 8004b4e:	d0e3      	beq.n	8004b18 <_malloc_r+0x64>
 8004b50:	1a21      	subs	r1, r4, r0
 8004b52:	4630      	mov	r0, r6
 8004b54:	f000 f808 	bl	8004b68 <_sbrk_r>
 8004b58:	3001      	adds	r0, #1
 8004b5a:	d1dd      	bne.n	8004b18 <_malloc_r+0x64>
 8004b5c:	e7cf      	b.n	8004afe <_malloc_r+0x4a>
 8004b5e:	bf00      	nop
 8004b60:	20012de4 	.word	0x20012de4
 8004b64:	20012de8 	.word	0x20012de8

08004b68 <_sbrk_r>:
 8004b68:	b538      	push	{r3, r4, r5, lr}
 8004b6a:	4d06      	ldr	r5, [pc, #24]	; (8004b84 <_sbrk_r+0x1c>)
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	4604      	mov	r4, r0
 8004b70:	4608      	mov	r0, r1
 8004b72:	602b      	str	r3, [r5, #0]
 8004b74:	f000 f8c0 	bl	8004cf8 <_sbrk>
 8004b78:	1c43      	adds	r3, r0, #1
 8004b7a:	d102      	bne.n	8004b82 <_sbrk_r+0x1a>
 8004b7c:	682b      	ldr	r3, [r5, #0]
 8004b7e:	b103      	cbz	r3, 8004b82 <_sbrk_r+0x1a>
 8004b80:	6023      	str	r3, [r4, #0]
 8004b82:	bd38      	pop	{r3, r4, r5, pc}
 8004b84:	20012e88 	.word	0x20012e88

08004b88 <__sread>:
 8004b88:	b510      	push	{r4, lr}
 8004b8a:	460c      	mov	r4, r1
 8004b8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b90:	f000 f8a0 	bl	8004cd4 <_read_r>
 8004b94:	2800      	cmp	r0, #0
 8004b96:	bfab      	itete	ge
 8004b98:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004b9a:	89a3      	ldrhlt	r3, [r4, #12]
 8004b9c:	181b      	addge	r3, r3, r0
 8004b9e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004ba2:	bfac      	ite	ge
 8004ba4:	6563      	strge	r3, [r4, #84]	; 0x54
 8004ba6:	81a3      	strhlt	r3, [r4, #12]
 8004ba8:	bd10      	pop	{r4, pc}

08004baa <__swrite>:
 8004baa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004bae:	461f      	mov	r7, r3
 8004bb0:	898b      	ldrh	r3, [r1, #12]
 8004bb2:	05db      	lsls	r3, r3, #23
 8004bb4:	4605      	mov	r5, r0
 8004bb6:	460c      	mov	r4, r1
 8004bb8:	4616      	mov	r6, r2
 8004bba:	d505      	bpl.n	8004bc8 <__swrite+0x1e>
 8004bbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004bc0:	2302      	movs	r3, #2
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	f000 f868 	bl	8004c98 <_lseek_r>
 8004bc8:	89a3      	ldrh	r3, [r4, #12]
 8004bca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004bce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004bd2:	81a3      	strh	r3, [r4, #12]
 8004bd4:	4632      	mov	r2, r6
 8004bd6:	463b      	mov	r3, r7
 8004bd8:	4628      	mov	r0, r5
 8004bda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004bde:	f000 b817 	b.w	8004c10 <_write_r>

08004be2 <__sseek>:
 8004be2:	b510      	push	{r4, lr}
 8004be4:	460c      	mov	r4, r1
 8004be6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004bea:	f000 f855 	bl	8004c98 <_lseek_r>
 8004bee:	1c43      	adds	r3, r0, #1
 8004bf0:	89a3      	ldrh	r3, [r4, #12]
 8004bf2:	bf15      	itete	ne
 8004bf4:	6560      	strne	r0, [r4, #84]	; 0x54
 8004bf6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004bfa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004bfe:	81a3      	strheq	r3, [r4, #12]
 8004c00:	bf18      	it	ne
 8004c02:	81a3      	strhne	r3, [r4, #12]
 8004c04:	bd10      	pop	{r4, pc}

08004c06 <__sclose>:
 8004c06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c0a:	f000 b813 	b.w	8004c34 <_close_r>
	...

08004c10 <_write_r>:
 8004c10:	b538      	push	{r3, r4, r5, lr}
 8004c12:	4d07      	ldr	r5, [pc, #28]	; (8004c30 <_write_r+0x20>)
 8004c14:	4604      	mov	r4, r0
 8004c16:	4608      	mov	r0, r1
 8004c18:	4611      	mov	r1, r2
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	602a      	str	r2, [r5, #0]
 8004c1e:	461a      	mov	r2, r3
 8004c20:	f7fb ff75 	bl	8000b0e <_write>
 8004c24:	1c43      	adds	r3, r0, #1
 8004c26:	d102      	bne.n	8004c2e <_write_r+0x1e>
 8004c28:	682b      	ldr	r3, [r5, #0]
 8004c2a:	b103      	cbz	r3, 8004c2e <_write_r+0x1e>
 8004c2c:	6023      	str	r3, [r4, #0]
 8004c2e:	bd38      	pop	{r3, r4, r5, pc}
 8004c30:	20012e88 	.word	0x20012e88

08004c34 <_close_r>:
 8004c34:	b538      	push	{r3, r4, r5, lr}
 8004c36:	4d06      	ldr	r5, [pc, #24]	; (8004c50 <_close_r+0x1c>)
 8004c38:	2300      	movs	r3, #0
 8004c3a:	4604      	mov	r4, r0
 8004c3c:	4608      	mov	r0, r1
 8004c3e:	602b      	str	r3, [r5, #0]
 8004c40:	f7fb ff81 	bl	8000b46 <_close>
 8004c44:	1c43      	adds	r3, r0, #1
 8004c46:	d102      	bne.n	8004c4e <_close_r+0x1a>
 8004c48:	682b      	ldr	r3, [r5, #0]
 8004c4a:	b103      	cbz	r3, 8004c4e <_close_r+0x1a>
 8004c4c:	6023      	str	r3, [r4, #0]
 8004c4e:	bd38      	pop	{r3, r4, r5, pc}
 8004c50:	20012e88 	.word	0x20012e88

08004c54 <_fstat_r>:
 8004c54:	b538      	push	{r3, r4, r5, lr}
 8004c56:	4d07      	ldr	r5, [pc, #28]	; (8004c74 <_fstat_r+0x20>)
 8004c58:	2300      	movs	r3, #0
 8004c5a:	4604      	mov	r4, r0
 8004c5c:	4608      	mov	r0, r1
 8004c5e:	4611      	mov	r1, r2
 8004c60:	602b      	str	r3, [r5, #0]
 8004c62:	f7fb ff7c 	bl	8000b5e <_fstat>
 8004c66:	1c43      	adds	r3, r0, #1
 8004c68:	d102      	bne.n	8004c70 <_fstat_r+0x1c>
 8004c6a:	682b      	ldr	r3, [r5, #0]
 8004c6c:	b103      	cbz	r3, 8004c70 <_fstat_r+0x1c>
 8004c6e:	6023      	str	r3, [r4, #0]
 8004c70:	bd38      	pop	{r3, r4, r5, pc}
 8004c72:	bf00      	nop
 8004c74:	20012e88 	.word	0x20012e88

08004c78 <_isatty_r>:
 8004c78:	b538      	push	{r3, r4, r5, lr}
 8004c7a:	4d06      	ldr	r5, [pc, #24]	; (8004c94 <_isatty_r+0x1c>)
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	4604      	mov	r4, r0
 8004c80:	4608      	mov	r0, r1
 8004c82:	602b      	str	r3, [r5, #0]
 8004c84:	f7fb ff7b 	bl	8000b7e <_isatty>
 8004c88:	1c43      	adds	r3, r0, #1
 8004c8a:	d102      	bne.n	8004c92 <_isatty_r+0x1a>
 8004c8c:	682b      	ldr	r3, [r5, #0]
 8004c8e:	b103      	cbz	r3, 8004c92 <_isatty_r+0x1a>
 8004c90:	6023      	str	r3, [r4, #0]
 8004c92:	bd38      	pop	{r3, r4, r5, pc}
 8004c94:	20012e88 	.word	0x20012e88

08004c98 <_lseek_r>:
 8004c98:	b538      	push	{r3, r4, r5, lr}
 8004c9a:	4d07      	ldr	r5, [pc, #28]	; (8004cb8 <_lseek_r+0x20>)
 8004c9c:	4604      	mov	r4, r0
 8004c9e:	4608      	mov	r0, r1
 8004ca0:	4611      	mov	r1, r2
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	602a      	str	r2, [r5, #0]
 8004ca6:	461a      	mov	r2, r3
 8004ca8:	f7fb ff74 	bl	8000b94 <_lseek>
 8004cac:	1c43      	adds	r3, r0, #1
 8004cae:	d102      	bne.n	8004cb6 <_lseek_r+0x1e>
 8004cb0:	682b      	ldr	r3, [r5, #0]
 8004cb2:	b103      	cbz	r3, 8004cb6 <_lseek_r+0x1e>
 8004cb4:	6023      	str	r3, [r4, #0]
 8004cb6:	bd38      	pop	{r3, r4, r5, pc}
 8004cb8:	20012e88 	.word	0x20012e88

08004cbc <__malloc_lock>:
 8004cbc:	4801      	ldr	r0, [pc, #4]	; (8004cc4 <__malloc_lock+0x8>)
 8004cbe:	f7ff be43 	b.w	8004948 <__retarget_lock_acquire_recursive>
 8004cc2:	bf00      	nop
 8004cc4:	20012e80 	.word	0x20012e80

08004cc8 <__malloc_unlock>:
 8004cc8:	4801      	ldr	r0, [pc, #4]	; (8004cd0 <__malloc_unlock+0x8>)
 8004cca:	f7ff be3e 	b.w	800494a <__retarget_lock_release_recursive>
 8004cce:	bf00      	nop
 8004cd0:	20012e80 	.word	0x20012e80

08004cd4 <_read_r>:
 8004cd4:	b538      	push	{r3, r4, r5, lr}
 8004cd6:	4d07      	ldr	r5, [pc, #28]	; (8004cf4 <_read_r+0x20>)
 8004cd8:	4604      	mov	r4, r0
 8004cda:	4608      	mov	r0, r1
 8004cdc:	4611      	mov	r1, r2
 8004cde:	2200      	movs	r2, #0
 8004ce0:	602a      	str	r2, [r5, #0]
 8004ce2:	461a      	mov	r2, r3
 8004ce4:	f7fb fef6 	bl	8000ad4 <_read>
 8004ce8:	1c43      	adds	r3, r0, #1
 8004cea:	d102      	bne.n	8004cf2 <_read_r+0x1e>
 8004cec:	682b      	ldr	r3, [r5, #0]
 8004cee:	b103      	cbz	r3, 8004cf2 <_read_r+0x1e>
 8004cf0:	6023      	str	r3, [r4, #0]
 8004cf2:	bd38      	pop	{r3, r4, r5, pc}
 8004cf4:	20012e88 	.word	0x20012e88

08004cf8 <_sbrk>:
 8004cf8:	4b04      	ldr	r3, [pc, #16]	; (8004d0c <_sbrk+0x14>)
 8004cfa:	6819      	ldr	r1, [r3, #0]
 8004cfc:	4602      	mov	r2, r0
 8004cfe:	b909      	cbnz	r1, 8004d04 <_sbrk+0xc>
 8004d00:	4903      	ldr	r1, [pc, #12]	; (8004d10 <_sbrk+0x18>)
 8004d02:	6019      	str	r1, [r3, #0]
 8004d04:	6818      	ldr	r0, [r3, #0]
 8004d06:	4402      	add	r2, r0
 8004d08:	601a      	str	r2, [r3, #0]
 8004d0a:	4770      	bx	lr
 8004d0c:	20012dec 	.word	0x20012dec
 8004d10:	20012e90 	.word	0x20012e90

08004d14 <_init>:
 8004d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d16:	bf00      	nop
 8004d18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d1a:	bc08      	pop	{r3}
 8004d1c:	469e      	mov	lr, r3
 8004d1e:	4770      	bx	lr

08004d20 <_fini>:
 8004d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d22:	bf00      	nop
 8004d24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d26:	bc08      	pop	{r3}
 8004d28:	469e      	mov	lr, r3
 8004d2a:	4770      	bx	lr
